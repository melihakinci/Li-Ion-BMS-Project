
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  0800aae8  0800aae8  0001aae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b684  0800b684  000209c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b684  0800b684  0001b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b68c  0800b68c  000209c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b694  0800b694  0001b694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  0800b698  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  200009c0  0800c058  000209c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fbc  0800c058  00020fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146e2  00000000  00000000  000209f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc6  00000000  00000000  000350d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00037d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00038fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b7d  00000000  00000000  0003a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001564a  00000000  00000000  0005cc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf4d1  00000000  00000000  0007227f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  001417a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009c0 	.word	0x200009c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aad0 	.word	0x0800aad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009c4 	.word	0x200009c4
 80001dc:	0800aad0 	.word	0x0800aad0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <LTC2990_ConfigureControlReg>:
#include "adc.h"

/*
 *	Configure control register
 */
HAL_StatusTypeDef LTC2990_ConfigureControlReg(I2C_HandleTypeDef *hi2c) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retStatus;

	uint8_t controlBuffer[1];
	controlBuffer[0] = 0x1F; //All modes per measurement, V1-V2 (measures current in and out of battery), V3 measures battery voltage (currently disconnected in schematic), V4 measures battery temperature (currently disconnected in schematic)
 8000f98:	231f      	movs	r3, #31
 8000f9a:	733b      	strb	r3, [r7, #12]

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x1, I2C_MEMADD_SIZE_8BIT,
 8000f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2198      	movs	r1, #152	; 0x98
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f002 f904 	bl	80031c0 <HAL_I2C_Mem_Write>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
			controlBuffer, I2C_MEMADD_SIZE_8BIT, 500);

	return retStatus;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <LTC2990_Trigger>:

/*
 * Trigger new ADC conversion
 */
HAL_StatusTypeDef LTC2990_Trigger(I2C_HandleTypeDef *hi2c) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b088      	sub	sp, #32
 8000fca:	af04      	add	r7, sp, #16
 8000fcc:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retStatus;
	uint8_t triggerVal = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73bb      	strb	r3, [r7, #14]

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x02,
 8000fd2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	2198      	movs	r1, #152	; 0x98
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f002 f8e9 	bl	80031c0 <HAL_I2C_Mem_Write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, &triggerVal, I2C_MEMADD_SIZE_8BIT, 1500);

	return retStatus;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <LTC2990_WaitForConversion>:

/*
 * Wait for new ADC conversion
 */
HAL_StatusTypeDef LTC2990_WaitForConversion(I2C_HandleTypeDef *hi2c,
		uint16_t timeout_ms) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af04      	add	r7, sp, #16
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retStatus;

	uint8_t statusBuffer = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	737b      	strb	r3, [r7, #13]
	uint8_t vccReady = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	73bb      	strb	r3, [r7, #14]

	while ((timeout_ms != 0) && (vccReady == 0)) {
 8001010:	e019      	b.n	8001046 <LTC2990_WaitForConversion+0x4a>
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 030d 	add.w	r3, r7, #13
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	2200      	movs	r2, #0
 8001026:	2198      	movs	r1, #152	; 0x98
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f002 f9dd 	bl	80033e8 <HAL_I2C_Mem_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
				I2C_MEMADD_SIZE_8BIT, &statusBuffer, I2C_MEMADD_SIZE_8BIT,
				1000);
		vccReady = (statusBuffer & 0b00000100);
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	73bb      	strb	r3, [r7, #14]

		HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f001 fbc2 	bl	80027c4 <HAL_Delay>
		timeout_ms -= 10;
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	3b0a      	subs	r3, #10
 8001044:	807b      	strh	r3, [r7, #2]
	while ((timeout_ms != 0) && (vccReady == 0)) {
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <LTC2990_WaitForConversion+0x56>
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0df      	beq.n	8001012 <LTC2990_WaitForConversion+0x16>
	}

	return retStatus;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0000      	movs	r0, r0
	...

08001060 <LTC2990_ReadVcc>:


/*
 * Read Vcc voltage
 */
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retStatus;
	uint16_t Vcc_regData;
	uint8_t VccReadBuffer[2];

	//Read MSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	220e      	movs	r2, #14
 800107e:	2198      	movs	r1, #152	; 0x98
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f002 f9b1 	bl	80033e8 <HAL_I2C_Mem_Read>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
			&VccReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <LTC2990_ReadVcc+0x34>
		return retStatus;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	e045      	b.n	8001120 <LTC2990_ReadVcc+0xc0>
	}

	//Read LSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0F, I2C_MEMADD_SIZE_8BIT,
 8001094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	3301      	adds	r3, #1
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	220f      	movs	r2, #15
 80010aa:	2198      	movs	r1, #152	; 0x98
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f002 f99b 	bl	80033e8 <HAL_I2C_Mem_Read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
			&VccReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <LTC2990_ReadVcc+0x60>
		return retStatus;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	e02f      	b.n	8001120 <LTC2990_ReadVcc+0xc0>
	}

	//Convert register contents to Vcc
	Vcc_regData = ((VccReadBuffer[0] << 8) | VccReadBuffer[1]) & ~0xC000; //D[13:0]
 80010c0:	7a3b      	ldrb	r3, [r7, #8]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7a7b      	ldrb	r3, [r7, #9]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010d4:	81bb      	strh	r3, [r7, #12]
	*Vcc_V = 2.5 + ((Vcc_regData * 305.18) / 1000000);
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa2b 	bl	8000534 <__aeabi_i2d>
 80010de:	a313      	add	r3, pc, #76	; (adr r3, 800112c <LTC2990_ReadVcc+0xcc>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fa90 	bl	8000608 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	a310      	add	r3, pc, #64	; (adr r3, 8001134 <LTC2990_ReadVcc+0xd4>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fbb1 	bl	800085c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <LTC2990_ReadVcc+0xc8>)
 8001108:	f7ff f8c8 	bl	800029c <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd70 	bl	8000bf8 <__aeabi_d2f>
 8001118:	4602      	mov	r2, r0
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	601a      	str	r2, [r3, #0]

	return retStatus;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40040000 	.word	0x40040000
 800112c:	47ae147b 	.word	0x47ae147b
 8001130:	407312e1 	.word	0x407312e1
 8001134:	00000000 	.word	0x00000000
 8001138:	412e8480 	.word	0x412e8480
 800113c:	00000000 	.word	0x00000000

08001140 <LTC2990_ReadV4>:
}

/*
 * Read V4 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV4(I2C_HandleTypeDef *hi2c, float* V4_V) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retStatus;
	uint16_t V4_regData;
	uint8_t V4ReadBuffer[2];

	//Read MSB of V4
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0C, I2C_MEMADD_SIZE_8BIT,
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	220c      	movs	r2, #12
 800115e:	2198      	movs	r1, #152	; 0x98
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f002 f941 	bl	80033e8 <HAL_I2C_Mem_Read>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
			&V4ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <LTC2990_ReadV4+0x34>
		return retStatus;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	e04b      	b.n	800120c <LTC2990_ReadV4+0xcc>
	}

	//Read LSB of V4
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0D, I2C_MEMADD_SIZE_8BIT,
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	3301      	adds	r3, #1
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	220d      	movs	r2, #13
 800118a:	2198      	movs	r1, #152	; 0x98
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f002 f92b 	bl	80033e8 <HAL_I2C_Mem_Read>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
			&V4ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <LTC2990_ReadV4+0x60>
		return retStatus;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	e035      	b.n	800120c <LTC2990_ReadV4+0xcc>
	}

	//Convert register contents to V4
	V4_regData = ((V4ReadBuffer[0] << 8) | V4ReadBuffer[1]) & ~0xC000; //D[13:0]
 80011a0:	7a3b      	ldrb	r3, [r7, #8]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7a7b      	ldrb	r3, [r7, #9]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011b4:	81bb      	strh	r3, [r7, #12]
	*V4_V = ((V4_regData * 305.18) / 1000000) * vdividerFactor ;
 80011b6:	89bb      	ldrh	r3, [r7, #12]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9bb 	bl	8000534 <__aeabi_i2d>
 80011be:	a316      	add	r3, pc, #88	; (adr r3, 8001218 <LTC2990_ReadV4+0xd8>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fa20 	bl	8000608 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a313      	add	r3, pc, #76	; (adr r3, 8001220 <LTC2990_ReadV4+0xe0>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fb41 	bl	800085c <__aeabi_ddiv>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4614      	mov	r4, r2
 80011e0:	461d      	mov	r5, r3
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9b6 	bl	8000558 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f7ff fa08 	bl	8000608 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fcfa 	bl	8000bf8 <__aeabi_d2f>
 8001204:	4602      	mov	r2, r0
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	601a      	str	r2, [r3, #0]

	return retStatus;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bdb0      	pop	{r4, r5, r7, pc}
 8001214:	f3af 8000 	nop.w
 8001218:	47ae147b 	.word	0x47ae147b
 800121c:	407312e1 	.word	0x407312e1
 8001220:	00000000 	.word	0x00000000
 8001224:	412e8480 	.word	0x412e8480

08001228 <LTC2990_ReadV1>:
}

/*
 * Read V1 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af04      	add	r7, sp, #16
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retStatus;
	uint16_t V1_regData;
	uint8_t V1ReadBuffer[2];

	//Read MSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2206      	movs	r2, #6
 8001246:	2198      	movs	r1, #152	; 0x98
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f002 f8cd 	bl	80033e8 <HAL_I2C_Mem_Read>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
			&V1ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <LTC2990_ReadV1+0x34>
		return retStatus;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	e04b      	b.n	80012f4 <LTC2990_ReadV1+0xcc>
	}

	//Read LSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x07, I2C_MEMADD_SIZE_8BIT,
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	3301      	adds	r3, #1
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	2207      	movs	r2, #7
 8001272:	2198      	movs	r1, #152	; 0x98
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f002 f8b7 	bl	80033e8 <HAL_I2C_Mem_Read>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
			&V1ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <LTC2990_ReadV1+0x60>
		return retStatus;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	e035      	b.n	80012f4 <LTC2990_ReadV1+0xcc>
	}

	//Convert register contents to V4
	V1_regData = ((V1ReadBuffer[0] << 8) | V1ReadBuffer[1]) & ~0xC000; //D[13:0]
 8001288:	7a3b      	ldrb	r3, [r7, #8]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7a7b      	ldrb	r3, [r7, #9]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800129c:	81bb      	strh	r3, [r7, #12]
	*V1_V = (((V1_regData * 305.18) / 1000000) * vdividerFactor);
 800129e:	89bb      	ldrh	r3, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f947 	bl	8000534 <__aeabi_i2d>
 80012a6:	a316      	add	r3, pc, #88	; (adr r3, 8001300 <LTC2990_ReadV1+0xd8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9ac 	bl	8000608 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	a313      	add	r3, pc, #76	; (adr r3, 8001308 <LTC2990_ReadV1+0xe0>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff facd 	bl	800085c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f942 	bl	8000558 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff f994 	bl	8000608 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc86 	bl	8000bf8 <__aeabi_d2f>
 80012ec:	4602      	mov	r2, r0
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	601a      	str	r2, [r3, #0]

	return retStatus;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	47ae147b 	.word	0x47ae147b
 8001304:	407312e1 	.word	0x407312e1
 8001308:	00000000 	.word	0x00000000
 800130c:	412e8480 	.word	0x412e8480

08001310 <LTC2990_ReadCurrent>:
 * Current reading is in mA
 * Charging gives negative current value when V1_V < V4_V
 * Discharging gives positive current value when V1_V > V4_V
 */
HAL_StatusTypeDef LTC2990_ReadCurrent(I2C_HandleTypeDef *hi2c, float V1_V, float V4_V, float* current_value)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	ed87 0a02 	vstr	s0, [r7, #8]
 800131c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8001322:	ed97 7a02 	vldr	s14, [r7, #8]
 8001326:	edd7 7a01 	vldr	s15, [r7, #4]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	ee17 0a90 	vmov	r0, s15
 8001332:	f7ff f911 	bl	8000558 <__aeabi_f2d>
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <LTC2990_ReadCurrent+0x68>)
 800133c:	f7ff f964 	bl	8000608 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4614      	mov	r4, r2
 8001346:	461d      	mov	r5, r3
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LTC2990_ReadCurrent+0x6c>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f904 	bl	8000558 <__aeabi_f2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff fa80 	bl	800085c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc48 	bl	8000bf8 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	408f4000 	.word	0x408f4000
 800137c:	3e1eb852 	.word	0x3e1eb852

08001380 <LTC2990_ReadTemperature>:

/*
 * Temperature in degrees C
 */
HAL_StatusTypeDef LTC2990_ReadTemperature(I2C_HandleTypeDef *hi2c, float* temp_value)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af04      	add	r7, sp, #16
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retStatus;
	uint16_t temp_regData;
	uint8_t tempReadBuffer[2];

	//Read MSB of temp
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x04, I2C_MEMADD_SIZE_8BIT,
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	2301      	movs	r3, #1
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	2204      	movs	r2, #4
 800139e:	2198      	movs	r1, #152	; 0x98
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f002 f821 	bl	80033e8 <HAL_I2C_Mem_Read>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
			&tempReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <LTC2990_ReadTemperature+0x34>
		return retStatus;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	e033      	b.n	800141c <LTC2990_ReadTemperature+0x9c>
	}

	//Read LSB of temp
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x05, I2C_MEMADD_SIZE_8BIT,
 80013b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	3301      	adds	r3, #1
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	2205      	movs	r2, #5
 80013ca:	2198      	movs	r1, #152	; 0x98
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f002 f80b 	bl	80033e8 <HAL_I2C_Mem_Read>
 80013d2:	4603      	mov	r3, r0
 80013d4:	73fb      	strb	r3, [r7, #15]
			&tempReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <LTC2990_ReadTemperature+0x60>
		return retStatus;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	e01d      	b.n	800141c <LTC2990_ReadTemperature+0x9c>
	}

	//Convert register contents to V3
	temp_regData = ((tempReadBuffer[0] << 8) | tempReadBuffer[1]) & ~0xE000; //D[12:0]
 80013e0:	7a3b      	ldrb	r3, [r7, #8]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7a7b      	ldrb	r3, [r7, #9]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80013f4:	81bb      	strh	r3, [r7, #12]
	*temp_value = (temp_regData / 16.0);
 80013f6:	89bb      	ldrh	r3, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f89b 	bl	8000534 <__aeabi_i2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <LTC2990_ReadTemperature+0xa4>)
 8001404:	f7ff fa2a 	bl	800085c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fbf2 	bl	8000bf8 <__aeabi_d2f>
 8001414:	4602      	mov	r2, r0
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	601a      	str	r2, [r3, #0]

	return retStatus;
 800141a:	7bfb      	ldrb	r3, [r7, #15]

}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40300000 	.word	0x40300000

08001428 <LTC2990_ReadVoltage>:

/*
 * Read Voltage Higher Level Function
 */
HAL_StatusTypeDef LTC2990_ReadVoltage(I2C_HandleTypeDef *hi2c, ADC_CHANNEL ch, float* voltage_value)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	460b      	mov	r3, r1
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef retStatus;

	if(ch == VCC)
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <LTC2990_ReadVoltage+0x22>
	{
		//Vcc
		retStatus = LTC2990_ReadVcc(hi2c, voltage_value);
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fe0e 	bl	8001060 <LTC2990_ReadVcc>
 8001444:	4603      	mov	r3, r0
 8001446:	75fb      	strb	r3, [r7, #23]
 8001448:	e019      	b.n	800147e <LTC2990_ReadVoltage+0x56>
	}
	else if(ch == BATTV)
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <LTC2990_ReadVoltage+0x36>
	{
		//Vbatt
		retStatus = LTC2990_ReadV1(hi2c, voltage_value);
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff fee8 	bl	8001228 <LTC2990_ReadV1>
 8001458:	4603      	mov	r3, r0
 800145a:	75fb      	strb	r3, [r7, #23]
 800145c:	e00f      	b.n	800147e <LTC2990_ReadVoltage+0x56>
	}
	else if(ch == BATTV_2)
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d106      	bne.n	8001472 <LTC2990_ReadVoltage+0x4a>
	{
		//Vbatt2
		retStatus = LTC2990_ReadV4(hi2c, voltage_value);
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fe6a 	bl	8001140 <LTC2990_ReadV4>
 800146c:	4603      	mov	r3, r0
 800146e:	75fb      	strb	r3, [r7, #23]
 8001470:	e005      	b.n	800147e <LTC2990_ReadVoltage+0x56>
	}
	else
	{
		//default case
		*voltage_value = 0;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
		retStatus = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
	}
 800147e:	bf00      	nop
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	; 0x50
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148e:	f001 f933 	bl	80026f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001492:	f000 f943 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f000 faab 	bl	80019f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800149a:	f000 fa79 	bl	8001990 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800149e:	f000 f9c7 	bl	8001830 <MX_I2C1_Init>
  MX_DAC1_Init();
 80014a2:	f000 f99b 	bl	80017dc <MX_DAC1_Init>
  MX_TIM6_Init();
 80014a6:	f000 fa03 	bl	80018b0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80014aa:	f000 fa39 	bl	8001920 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim6);

  //İnitialize OLED DISPLAY
  ssd1306_Init();
 80014ae:	f000 fcc3 	bl	8001e38 <ssd1306_Init>
  ssd1306_Fill(Black);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fd2c 	bl	8001f10 <ssd1306_Fill>
  ssd1306_SetCursor(30,0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	201e      	movs	r0, #30
 80014bc:	f000 fe82 	bl	80021c4 <ssd1306_SetCursor>
  ssd1306_WriteString("Li-ion BMS",Font_7x10,White);
 80014c0:	4a85      	ldr	r2, [pc, #532]	; (80016d8 <main+0x250>)
 80014c2:	2301      	movs	r3, #1
 80014c4:	ca06      	ldmia	r2, {r1, r2}
 80014c6:	4885      	ldr	r0, [pc, #532]	; (80016dc <main+0x254>)
 80014c8:	f000 fe56 	bl	8002178 <ssd1306_WriteString>
  //ssd1306_UpdateScreen();

  //İnitialize ADC
  LTC2990_ConfigureControlReg(&hi2c1);
 80014cc:	4884      	ldr	r0, [pc, #528]	; (80016e0 <main+0x258>)
 80014ce:	f7ff fd5f 	bl	8000f90 <LTC2990_ConfigureControlReg>

  //initialize timer7
  HAL_TIM_Base_Start_IT(&htim7);
 80014d2:	4884      	ldr	r0, [pc, #528]	; (80016e4 <main+0x25c>)
 80014d4:	f003 ff18 	bl	8005308 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */


	  //Trigger a new conversion
	  LTC2990_Trigger(&hi2c1);
 80014d8:	4881      	ldr	r0, [pc, #516]	; (80016e0 <main+0x258>)
 80014da:	f7ff fd74 	bl	8000fc6 <LTC2990_Trigger>
	  LTC2990_WaitForConversion(&hi2c1,50);
 80014de:	2132      	movs	r1, #50	; 0x32
 80014e0:	487f      	ldr	r0, [pc, #508]	; (80016e0 <main+0x258>)
 80014e2:	f7ff fd8b 	bl	8000ffc <LTC2990_WaitForConversion>

	  //Quick Test -Read vcc

	  float voltageADCVcc=0;
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	  LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 80014ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f0:	461a      	mov	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	487a      	ldr	r0, [pc, #488]	; (80016e0 <main+0x258>)
 80014f6:	f7ff ff97 	bl	8001428 <LTC2990_ReadVoltage>

	  //current reading
	  float current=0;
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
	  float battV=0;
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
	  float battV_2=0;
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
	  LTC2990_ReadVoltage(&hi2c1, BATTV, &battV);
 800150c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001510:	461a      	mov	r2, r3
 8001512:	2101      	movs	r1, #1
 8001514:	4872      	ldr	r0, [pc, #456]	; (80016e0 <main+0x258>)
 8001516:	f7ff ff87 	bl	8001428 <LTC2990_ReadVoltage>
	  LTC2990_ReadVoltage(&hi2c1, BATTV_2, &battV_2);
 800151a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800151e:	461a      	mov	r2, r3
 8001520:	2104      	movs	r1, #4
 8001522:	486f      	ldr	r0, [pc, #444]	; (80016e0 <main+0x258>)
 8001524:	f7ff ff80 	bl	8001428 <LTC2990_ReadVoltage>

	  LTC2990_ReadCurrent(&hi2c1, battV, battV_2, &current);
 8001528:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800152c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001534:	4619      	mov	r1, r3
 8001536:	eef0 0a47 	vmov.f32	s1, s14
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	4868      	ldr	r0, [pc, #416]	; (80016e0 <main+0x258>)
 8001540:	f7ff fee6 	bl	8001310 <LTC2990_ReadCurrent>

	  //temp reading
	  	  float temp=0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	  LTC2990_ReadTemperature(&hi2c1, &temp);
 800154a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154e:	4619      	mov	r1, r3
 8001550:	4863      	ldr	r0, [pc, #396]	; (80016e0 <main+0x258>)
 8001552:	f7ff ff15 	bl	8001380 <LTC2990_ReadTemperature>

	  	  char tempString[10];
	  	  sprintf(tempString, "%.3f C" ,temp);
 8001556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fffd 	bl	8000558 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001566:	4960      	ldr	r1, [pc, #384]	; (80016e8 <main+0x260>)
 8001568:	f004 fdba 	bl	80060e0 <sprintf>
	  	  ssd1306_SetCursor(2,40);
 800156c:	2128      	movs	r1, #40	; 0x28
 800156e:	2002      	movs	r0, #2
 8001570:	f000 fe28 	bl	80021c4 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("Temp   ",Font_7x10,White);
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <main+0x250>)
 8001576:	2301      	movs	r3, #1
 8001578:	ca06      	ldmia	r2, {r1, r2}
 800157a:	485c      	ldr	r0, [pc, #368]	; (80016ec <main+0x264>)
 800157c:	f000 fdfc 	bl	8002178 <ssd1306_WriteString>
	  	  ssd1306_SetCursor(43,40);
 8001580:	2128      	movs	r1, #40	; 0x28
 8001582:	202b      	movs	r0, #43	; 0x2b
 8001584:	f000 fe1e 	bl	80021c4 <ssd1306_SetCursor>
	  	  ssd1306_WriteString(tempString,Font_7x10,White);
 8001588:	4a53      	ldr	r2, [pc, #332]	; (80016d8 <main+0x250>)
 800158a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800158e:	2301      	movs	r3, #1
 8001590:	ca06      	ldmia	r2, {r1, r2}
 8001592:	f000 fdf1 	bl	8002178 <ssd1306_WriteString>

	  //display adc on oled
	  char voltageADCVccString[10];
	  sprintf(voltageADCVccString, "%.3f  V" ,voltageADCVcc);
 8001596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffdd 	bl	8000558 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80015a6:	4952      	ldr	r1, [pc, #328]	; (80016f0 <main+0x268>)
 80015a8:	f004 fd9a 	bl	80060e0 <sprintf>
	  ssd1306_SetCursor(2,10);
 80015ac:	210a      	movs	r1, #10
 80015ae:	2002      	movs	r0, #2
 80015b0:	f000 fe08 	bl	80021c4 <ssd1306_SetCursor>
	  ssd1306_WriteString("Vcc   ",Font_7x10,White);
 80015b4:	4a48      	ldr	r2, [pc, #288]	; (80016d8 <main+0x250>)
 80015b6:	2301      	movs	r3, #1
 80015b8:	ca06      	ldmia	r2, {r1, r2}
 80015ba:	484e      	ldr	r0, [pc, #312]	; (80016f4 <main+0x26c>)
 80015bc:	f000 fddc 	bl	8002178 <ssd1306_WriteString>
	  ssd1306_SetCursor(43,10);
 80015c0:	210a      	movs	r1, #10
 80015c2:	202b      	movs	r0, #43	; 0x2b
 80015c4:	f000 fdfe 	bl	80021c4 <ssd1306_SetCursor>
	  ssd1306_WriteString(voltageADCVccString,Font_7x10,White);
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <main+0x250>)
 80015ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80015ce:	2301      	movs	r3, #1
 80015d0:	ca06      	ldmia	r2, {r1, r2}
 80015d2:	f000 fdd1 	bl	8002178 <ssd1306_WriteString>

	//show current on oled
	   char currentString[10];
	   sprintf(currentString, "%.3f mA" ,current);
 80015d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffbd 	bl	8000558 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	f107 0018 	add.w	r0, r7, #24
 80015e6:	4944      	ldr	r1, [pc, #272]	; (80016f8 <main+0x270>)
 80015e8:	f004 fd7a 	bl	80060e0 <sprintf>
	   ssd1306_SetCursor(2,20);
 80015ec:	2114      	movs	r1, #20
 80015ee:	2002      	movs	r0, #2
 80015f0:	f000 fde8 	bl	80021c4 <ssd1306_SetCursor>
	   ssd1306_WriteString("Cur   ",Font_7x10,White);
 80015f4:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <main+0x250>)
 80015f6:	2301      	movs	r3, #1
 80015f8:	ca06      	ldmia	r2, {r1, r2}
 80015fa:	4840      	ldr	r0, [pc, #256]	; (80016fc <main+0x274>)
 80015fc:	f000 fdbc 	bl	8002178 <ssd1306_WriteString>
	   ssd1306_SetCursor(43,20);
 8001600:	2114      	movs	r1, #20
 8001602:	202b      	movs	r0, #43	; 0x2b
 8001604:	f000 fdde 	bl	80021c4 <ssd1306_SetCursor>
	   ssd1306_WriteString(currentString,Font_7x10,White);
 8001608:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <main+0x250>)
 800160a:	f107 0018 	add.w	r0, r7, #24
 800160e:	2301      	movs	r3, #1
 8001610:	ca06      	ldmia	r2, {r1, r2}
 8001612:	f000 fdb1 	bl	8002178 <ssd1306_WriteString>

	//battery voltage
	   char battVString[10];
	   sprintf(battVString, "%.3f  V" ,battV);
 8001616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff9d 	bl	8000558 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	f107 000c 	add.w	r0, r7, #12
 8001626:	4932      	ldr	r1, [pc, #200]	; (80016f0 <main+0x268>)
 8001628:	f004 fd5a 	bl	80060e0 <sprintf>
	   ssd1306_SetCursor(2,30);
 800162c:	211e      	movs	r1, #30
 800162e:	2002      	movs	r0, #2
 8001630:	f000 fdc8 	bl	80021c4 <ssd1306_SetCursor>
	   ssd1306_WriteString("BattV   ",Font_7x10,White);
 8001634:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <main+0x250>)
 8001636:	2301      	movs	r3, #1
 8001638:	ca06      	ldmia	r2, {r1, r2}
 800163a:	4831      	ldr	r0, [pc, #196]	; (8001700 <main+0x278>)
 800163c:	f000 fd9c 	bl	8002178 <ssd1306_WriteString>
	   ssd1306_SetCursor(43,30);
 8001640:	211e      	movs	r1, #30
 8001642:	202b      	movs	r0, #43	; 0x2b
 8001644:	f000 fdbe 	bl	80021c4 <ssd1306_SetCursor>
	   ssd1306_WriteString(battVString,Font_7x10,White);
 8001648:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <main+0x250>)
 800164a:	f107 000c 	add.w	r0, r7, #12
 800164e:	2301      	movs	r3, #1
 8001650:	ca06      	ldmia	r2, {r1, r2}
 8001652:	f000 fd91 	bl	8002178 <ssd1306_WriteString>

	   //SoC estimation

	   char socString[10];
	   sprintf(socString, "%.1f %" ,(battV/3.7)*100);
 8001656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	a31c      	add	r3, pc, #112	; (adr r3, 80016d0 <main+0x248>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7ff f8fa 	bl	800085c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <main+0x27c>)
 8001676:	f7fe ffc7 	bl	8000608 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4638      	mov	r0, r7
 8001680:	4921      	ldr	r1, [pc, #132]	; (8001708 <main+0x280>)
 8001682:	f004 fd2d 	bl	80060e0 <sprintf>
	  	   ssd1306_SetCursor(2,50);
 8001686:	2132      	movs	r1, #50	; 0x32
 8001688:	2002      	movs	r0, #2
 800168a:	f000 fd9b 	bl	80021c4 <ssd1306_SetCursor>
	  	   ssd1306_WriteString("SoC   ",Font_7x10,White);
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <main+0x250>)
 8001690:	2301      	movs	r3, #1
 8001692:	ca06      	ldmia	r2, {r1, r2}
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <main+0x284>)
 8001696:	f000 fd6f 	bl	8002178 <ssd1306_WriteString>
	  	   ssd1306_SetCursor(43,50);
 800169a:	2132      	movs	r1, #50	; 0x32
 800169c:	202b      	movs	r0, #43	; 0x2b
 800169e:	f000 fd91 	bl	80021c4 <ssd1306_SetCursor>
	  	   ssd1306_WriteString(socString,Font_7x10,White);
 80016a2:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <main+0x250>)
 80016a4:	4638      	mov	r0, r7
 80016a6:	2301      	movs	r3, #1
 80016a8:	ca06      	ldmia	r2, {r1, r2}
 80016aa:	f000 fd65 	bl	8002178 <ssd1306_WriteString>

	   //update last battV to safety
	   lastReadBattV =battV;
 80016ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <main+0x288>)
 80016b2:	6013      	str	r3, [r2, #0]
	   //update last temp to safety
	   lastReadTemp=temp;
 80016b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <main+0x28c>)
 80016b8:	6013      	str	r3, [r2, #0]
	   //update last current to to safety
	   lastCurrent=current;
 80016ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <main+0x290>)
 80016be:	6013      	str	r3, [r2, #0]


	   ssd1306_UpdateScreen();
 80016c0:	f000 fc4a 	bl	8001f58 <ssd1306_UpdateScreen>

	   HAL_Delay(1000); //update rate
 80016c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c8:	f001 f87c 	bl	80027c4 <HAL_Delay>
  {
 80016cc:	e704      	b.n	80014d8 <main+0x50>
 80016ce:	bf00      	nop
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	400d9999 	.word	0x400d9999
 80016d8:	20000000 	.word	0x20000000
 80016dc:	0800aae8 	.word	0x0800aae8
 80016e0:	20000e40 	.word	0x20000e40
 80016e4:	20000f5c 	.word	0x20000f5c
 80016e8:	0800aaf4 	.word	0x0800aaf4
 80016ec:	0800aafc 	.word	0x0800aafc
 80016f0:	0800ab04 	.word	0x0800ab04
 80016f4:	0800ab0c 	.word	0x0800ab0c
 80016f8:	0800ab14 	.word	0x0800ab14
 80016fc:	0800ab1c 	.word	0x0800ab1c
 8001700:	0800ab24 	.word	0x0800ab24
 8001704:	40590000 	.word	0x40590000
 8001708:	0800ab30 	.word	0x0800ab30
 800170c:	0800ab38 	.word	0x0800ab38
 8001710:	200009e0 	.word	0x200009e0
 8001714:	200009e4 	.word	0x200009e4
 8001718:	200009e8 	.word	0x200009e8

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a6      	sub	sp, #152	; 0x98
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001726:	2228      	movs	r2, #40	; 0x28
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fcd0 	bl	80060d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2258      	movs	r2, #88	; 0x58
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fcc2 	bl	80060d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174c:	2302      	movs	r3, #2
 800174e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001754:	2310      	movs	r3, #16
 8001756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001768:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800176c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fa02 	bl	8003b84 <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001786:	f000 fb39 	bl	8001dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178a:	230f      	movs	r3, #15
 800178c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178e:	2302      	movs	r3, #2
 8001790:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017a4:	2102      	movs	r1, #2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f902 	bl	80049b0 <HAL_RCC_ClockConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017b2:	f000 fb23 	bl	8001dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80017b6:	2322      	movs	r3, #34	; 0x22
 80017b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fb29 	bl	8004e1c <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80017d0:	f000 fb14 	bl	8001dfc <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3798      	adds	r7, #152	; 0x98
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_DAC1_Init+0x4c>)
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <MX_DAC1_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_DAC1_Init+0x4c>)
 80017f4:	f001 f91b 	bl	8002a2e <HAL_DAC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80017fe:	f000 fafd 	bl	8001dfc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_DAC1_Init+0x4c>)
 8001812:	f001 fa02 	bl	8002c1a <HAL_DAC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 800181c:	f000 faee 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000e2c 	.word	0x20000e2c
 800182c:	40007400 	.word	0x40007400

08001830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001836:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <MX_I2C1_Init+0x78>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_I2C1_Init+0x74>)
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <MX_I2C1_Init+0x7c>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_I2C1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_I2C1_Init+0x74>)
 800186c:	f001 fc18 	bl	80030a0 <HAL_I2C_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001876:	f000 fac1 	bl	8001dfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187a:	2100      	movs	r1, #0
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <MX_I2C1_Init+0x74>)
 800187e:	f002 f8e9 	bl	8003a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001888:	f000 fab8 	bl	8001dfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800188c:	2100      	movs	r1, #0
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_I2C1_Init+0x74>)
 8001890:	f002 f92b 	bl	8003aea <HAL_I2CEx_ConfigDigitalFilter>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800189a:	f000 faaf 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000e40 	.word	0x20000e40
 80018a8:	40005400 	.word	0x40005400
 80018ac:	2000090e 	.word	0x2000090e

080018b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_TIM6_Init+0x68>)
 80018c2:	4a16      	ldr	r2, [pc, #88]	; (800191c <MX_TIM6_Init+0x6c>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_TIM6_Init+0x68>)
 80018c8:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80018cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_TIM6_Init+0x68>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_TIM6_Init+0x68>)
 80018d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_TIM6_Init+0x68>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM6_Init+0x68>)
 80018e4:	f003 fcb8 	bl	8005258 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018ee:	f000 fa85 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM6_Init+0x68>)
 8001900:	f003 ff86 	bl	8005810 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800190a:	f000 fa77 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000e8c 	.word	0x20000e8c
 800191c:	40001000 	.word	0x40001000

08001920 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_TIM7_Init+0x68>)
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <MX_TIM7_Init+0x6c>)
 8001934:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_TIM7_Init+0x68>)
 8001938:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800193c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_TIM7_Init+0x68>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_TIM7_Init+0x68>)
 8001946:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800194a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_TIM7_Init+0x68>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001952:	480d      	ldr	r0, [pc, #52]	; (8001988 <MX_TIM7_Init+0x68>)
 8001954:	f003 fc80 	bl	8005258 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800195e:	f000 fa4d 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <MX_TIM7_Init+0x68>)
 8001970:	f003 ff4e 	bl	8005810 <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800197a:	f000 fa3f 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000f5c 	.word	0x20000f5c
 800198c:	40001400 	.word	0x40001400

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <MX_USART2_UART_Init+0x5c>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 800199c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019d4:	f003 ffc6 	bl	8005964 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019de:	f000 fa0d 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000ed8 	.word	0x20000ed8
 80019ec:	40004400 	.word	0x40004400

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a10:	6153      	str	r3, [r2, #20]
 8001a12:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	6153      	str	r3, [r2, #20]
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <MX_GPIO_Init+0x11c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f001 facc 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin|LED_USR1_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001a7a:	4825      	ldr	r0, [pc, #148]	; (8001b10 <MX_GPIO_Init+0x120>)
 8001a7c:	f001 fac6 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <MX_GPIO_Init+0x124>)
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <MX_GPIO_Init+0x128>)
 8001a96:	f001 f917 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_USR2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8001a9a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f001 f907 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_EN_Pin LED_USR1_Pin */
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 8001aba:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <MX_GPIO_Init+0x120>)
 8001ad4:	f001 f8f8 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_INTERRUPT_Pin S1_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = S2_INTERRUPT_Pin|S1_INTERRUPT_Pin;
 8001ad8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <MX_GPIO_Init+0x124>)
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f001 f8ea 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2017      	movs	r0, #23
 8001afa:	f000 ff62 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001afe:	2017      	movs	r0, #23
 8001b00:	f000 ff7b 	bl	80029fa <HAL_NVIC_EnableIRQ>

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	10210000 	.word	0x10210000
 8001b18:	48000800 	.word	0x48000800

08001b1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a37      	ldr	r2, [pc, #220]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d160      	bne.n	8001bee <HAL_TIM_PeriodElapsedCallback+0xd2>
	{
		HAL_GPIO_TogglePin(LED_USR1_GPIO_Port, LED_USR1_Pin); //toggle the led1 every 0.5 second
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4836      	ldr	r0, [pc, #216]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b30:	f001 fa84 	bl	800303c <HAL_GPIO_TogglePin>



		//if both button pressed change the mode
		if(HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8001b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f001 fa4e 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d124      	bne.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f001 fa45 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			//change mode
			if(currentState == IDLE)
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				Change_State(CHG);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f000 f8cf 	bl	8001d04 <Change_State>
			if(currentState == IDLE)
 8001b66:	e03e      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>

			}
			else if(currentState == CHG)
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d103      	bne.n	8001b78 <HAL_TIM_PeriodElapsedCallback+0x5c>
			{
				Change_State(DCHG);
 8001b70:	2002      	movs	r0, #2
 8001b72:	f000 f8c7 	bl	8001d04 <Change_State>
			if(currentState == IDLE)
 8001b76:	e036      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>
			}
			else if(currentState==DCHG)
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d103      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x6c>
			{
				Change_State(IDLE);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 f8bf 	bl	8001d04 <Change_State>
			if(currentState == IDLE)
 8001b86:	e02e      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>
			}

			else
			{
				Change_State(IDLE);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 f8bb 	bl	8001d04 <Change_State>
			if(currentState == IDLE)
 8001b8e:	e02a      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>


		}

		//if one of the switch is pressed change discharge current
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d111      	bne.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f001 fa1c 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0xa0>
		{
			//increase discharge current
			uint8_t newDchgPct = currentDchgPct +10;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	330a      	adds	r3, #10
 8001bb0:	73fb      	strb	r3, [r7, #15]
			Discharging_Set(newDchgPct);
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f847 	bl	8001c48 <Discharging_Set>
		{
 8001bba:	e014      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d110      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f001 fa06 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			//decrease discharge current
			uint8_t newDchgPct = currentDchgPct -10;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3b0a      	subs	r3, #10
 8001bdc:	73bb      	strb	r3, [r7, #14]
			Discharging_Set(newDchgPct);
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f831 	bl	8001c48 <Discharging_Set>
		}



		HAL_TIM_Base_Stop_IT(&htim6);
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001be8:	f003 fbfe 	bl	80053e8 <HAL_TIM_Base_Stop_IT>
		Safety_Loop();
	}



}
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0xde>
	else if(htim==&htim7)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0xde>
		Safety_Loop();
 8001bf6:	f000 f8b3 	bl	8001d60 <Safety_Loop>
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000e8c 	.word	0x20000e8c
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	200009dc 	.word	0x200009dc
 8001c10:	200009dd 	.word	0x200009dd
 8001c14:	20000f5c 	.word	0x20000f5c

08001c18 <HAL_GPIO_EXTI_Callback>:
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == S2_INTERRUPT_Pin || GPIO_Pin == S1_INTERRUPT_Pin)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_EXTI_Callback+0x1a>
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c30:	d102      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x20>
	 {
		 //Enable charging

		 //
		 HAL_TIM_Base_Start_IT(&htim6);
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c34:	f003 fb68 	bl	8005308 <HAL_TIM_Base_Start_IT>
	 }
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000e8c 	.word	0x20000e8c
 8001c44:	00000000 	.word	0x00000000

08001c48 <Discharging_Set>:

//Where PCT should be 0 - 100
void Discharging_Set(uint8_t pct) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	if (pct < 0) {
		pct = 0;
	} else if (pct > 100) {
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <Discharging_Set+0x14>
		pct = 100;
 8001c58:	2364      	movs	r3, #100	; 0x64
 8001c5a:	71fb      	strb	r3, [r7, #7]
	}
	//DAC is 12 bit resolution - 0 - 4095 data codes which translates to 0 - 3.3V analog

	uint32_t dacCode = (uint32_t) ((pct / 100.0) * 4095.0);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc68 	bl	8000534 <__aeabi_i2d>
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <Discharging_Set+0x78>)
 8001c6a:	f7fe fdf7 	bl	800085c <__aeabi_ddiv>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	a310      	add	r3, pc, #64	; (adr r3, 8001cb8 <Discharging_Set+0x70>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fcc4 	bl	8000608 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff96 	bl	8000bb8 <__aeabi_d2uiz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <Discharging_Set+0x7c>)
 8001c98:	f000 fef5 	bl	8002a86 <HAL_DAC_SetValue>

	currentDchgPct = pct;
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <Discharging_Set+0x80>)
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	7013      	strb	r3, [r2, #0]

	//Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <Discharging_Set+0x7c>)
 8001ca6:	f000 ff13 	bl	8002ad0 <HAL_DAC_Start>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	40affe00 	.word	0x40affe00
 8001cc0:	40590000 	.word	0x40590000
 8001cc4:	20000e2c 	.word	0x20000e2c
 8001cc8:	200009dd 	.word	0x200009dd

08001ccc <Charging_Enable>:

void Charging_Enable(CHG_EN chg_en)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	if (chg_en == CHG_ENABLE)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <Charging_Enable+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <Charging_Enable+0x34>)
 8001ce4:	f001 f992 	bl	800300c <HAL_GPIO_WritePin>
	}
	else //Disabling charging
	{
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
	}
}
 8001ce8:	e005      	b.n	8001cf6 <Charging_Enable+0x2a>
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <Charging_Enable+0x34>)
 8001cf2:	f001 f98b 	bl	800300c <HAL_GPIO_WritePin>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	48000400 	.word	0x48000400

08001d04 <Change_State>:

void Change_State(STATE new_state) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]

	currentState = new_state;
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <Change_State+0x58>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	7013      	strb	r3, [r2, #0]

	//IDLE
	if (currentState == IDLE) {
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <Change_State+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <Change_State+0x26>
		Charging_Enable(CHG_DISABLE);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff ffd5 	bl	8001ccc <Charging_Enable>
		Discharging_Set(0); //Set discharge current to 0A
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ff90 	bl	8001c48 <Discharging_Set>
		Charging_Enable(CHG_DISABLE);
		Discharging_Set(10); //Set discharge current to 10%
	} else {
		//HANDLE DEFAULT CASE - MISRA C
	}
}
 8001d28:	e014      	b.n	8001d54 <Change_State+0x50>
	else if (currentState == CHG) {
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <Change_State+0x58>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <Change_State+0x3c>
		Charging_Enable(CHG_ENABLE);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff ffca 	bl	8001ccc <Charging_Enable>
		Discharging_Set(0); //Set discharge current to 0A
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ff85 	bl	8001c48 <Discharging_Set>
}
 8001d3e:	e009      	b.n	8001d54 <Change_State+0x50>
	else if (currentState == DCHG) {
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <Change_State+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d105      	bne.n	8001d54 <Change_State+0x50>
		Charging_Enable(CHG_DISABLE);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff ffbf 	bl	8001ccc <Charging_Enable>
		Discharging_Set(10); //Set discharge current to 10%
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f7ff ff7a 	bl	8001c48 <Discharging_Set>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200009dc 	.word	0x200009dc

08001d60 <Safety_Loop>:
void Safety_Loop()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	//undervoltage
	if(lastReadBattV < 2.9)
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <Safety_Loop+0x88>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbf5 	bl	8000558 <__aeabi_f2d>
 8001d6e:	a31c      	add	r3, pc, #112	; (adr r3, 8001de0 <Safety_Loop+0x80>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe feba 	bl	8000aec <__aeabi_dcmplt>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <Safety_Loop+0x26>
	{
		//ssd1306_SetCursor(30,10);
		//ssd1306_WriteString("Under Voltage",Font_7x10,White);
		Change_State(IDLE);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff ffc0 	bl	8001d04 <Change_State>
		{
			//ssd1306_SetCursor(30,10);
			//ssd1306_WriteString("Over Current",Font_7x10,White);
			Change_State(IDLE);
		}
}
 8001d84:	e029      	b.n	8001dda <Safety_Loop+0x7a>
	else if(lastReadBattV > 5.5)
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <Safety_Loop+0x88>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 8001d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	dd03      	ble.n	8001da2 <Safety_Loop+0x42>
			Change_State(IDLE);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff ffb2 	bl	8001d04 <Change_State>
}
 8001da0:	e01b      	b.n	8001dda <Safety_Loop+0x7a>
	else if(lastReadTemp > 70.0)
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <Safety_Loop+0x8c>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001df0 <Safety_Loop+0x90>
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	dd03      	ble.n	8001dbe <Safety_Loop+0x5e>
		Change_State(IDLE);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff ffa4 	bl	8001d04 <Change_State>
}
 8001dbc:	e00d      	b.n	8001dda <Safety_Loop+0x7a>
	else if(lastCurrent > 1625)
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <Safety_Loop+0x94>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001df8 <Safety_Loop+0x98>
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	dc00      	bgt.n	8001dd4 <Safety_Loop+0x74>
}
 8001dd2:	e002      	b.n	8001dda <Safety_Loop+0x7a>
			Change_State(IDLE);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff ff95 	bl	8001d04 <Change_State>
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	33333333 	.word	0x33333333
 8001de4:	40073333 	.word	0x40073333
 8001de8:	200009e0 	.word	0x200009e0
 8001dec:	200009e4 	.word	0x200009e4
 8001df0:	428c0000 	.word	0x428c0000
 8001df4:	200009e8 	.word	0x200009e8
 8001df8:	44cb2000 	.word	0x44cb2000

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <Error_Handler+0x8>
	...

08001e08 <ssd1306_WriteCommand>:


static SSD1306_t SSD1306;

void ssd1306_WriteCommand(uint8_t command)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af04      	add	r7, sp, #16
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001e12:	230a      	movs	r3, #10
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	2200      	movs	r2, #0
 8001e22:	2178      	movs	r1, #120	; 0x78
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <ssd1306_WriteCommand+0x2c>)
 8001e26:	f001 f9cb 	bl	80031c0 <HAL_I2C_Mem_Write>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000e40 	.word	0x20000e40

08001e38 <ssd1306_Init>:

uint8_t ssd1306_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 8001e3c:	2064      	movs	r0, #100	; 0x64
 8001e3e:	f000 fcc1 	bl	80027c4 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001e42:	20ae      	movs	r0, #174	; 0xae
 8001e44:	f7ff ffe0 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e48:	2020      	movs	r0, #32
 8001e4a:	f7ff ffdd 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f7ff ffda 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e54:	20b0      	movs	r0, #176	; 0xb0
 8001e56:	f7ff ffd7 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e5a:	20c8      	movs	r0, #200	; 0xc8
 8001e5c:	f7ff ffd4 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff ffd1 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001e66:	2010      	movs	r0, #16
 8001e68:	f7ff ffce 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001e6c:	2040      	movs	r0, #64	; 0x40
 8001e6e:	f7ff ffcb 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001e72:	2081      	movs	r0, #129	; 0x81
 8001e74:	f7ff ffc8 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001e78:	20ff      	movs	r0, #255	; 0xff
 8001e7a:	f7ff ffc5 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001e7e:	20a1      	movs	r0, #161	; 0xa1
 8001e80:	f7ff ffc2 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001e84:	20a6      	movs	r0, #166	; 0xa6
 8001e86:	f7ff ffbf 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001e8a:	20a8      	movs	r0, #168	; 0xa8
 8001e8c:	f7ff ffbc 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001e90:	203f      	movs	r0, #63	; 0x3f
 8001e92:	f7ff ffb9 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e96:	20a4      	movs	r0, #164	; 0xa4
 8001e98:	f7ff ffb6 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001e9c:	20d3      	movs	r0, #211	; 0xd3
 8001e9e:	f7ff ffb3 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff ffb0 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ea8:	20d5      	movs	r0, #213	; 0xd5
 8001eaa:	f7ff ffad 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001eae:	20f0      	movs	r0, #240	; 0xf0
 8001eb0:	f7ff ffaa 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001eb4:	20d9      	movs	r0, #217	; 0xd9
 8001eb6:	f7ff ffa7 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001eba:	2022      	movs	r0, #34	; 0x22
 8001ebc:	f7ff ffa4 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001ec0:	20da      	movs	r0, #218	; 0xda
 8001ec2:	f7ff ffa1 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001ec6:	2012      	movs	r0, #18
 8001ec8:	f7ff ff9e 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ecc:	20db      	movs	r0, #219	; 0xdb
 8001ece:	f7ff ff9b 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ed2:	2020      	movs	r0, #32
 8001ed4:	f7ff ff98 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ed8:	208d      	movs	r0, #141	; 0x8d
 8001eda:	f7ff ff95 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001ede:	2014      	movs	r0, #20
 8001ee0:	f7ff ff92 	bl	8001e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001ee4:	20af      	movs	r0, #175	; 0xaf
 8001ee6:	f7ff ff8f 	bl	8001e08 <ssd1306_WriteCommand>


	ssd1306_Fill(Black);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f810 	bl	8001f10 <ssd1306_Fill>


	ssd1306_UpdateScreen();
 8001ef0:	f000 f832 	bl	8001f58 <ssd1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <ssd1306_Init+0xd4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <ssd1306_Init+0xd4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <ssd1306_Init+0xd4>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000dec 	.word	0x20000dec

08001f10 <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e00d      	b.n	8001f3c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <ssd1306_Fill+0x1a>
 8001f26:	2100      	movs	r1, #0
 8001f28:	e000      	b.n	8001f2c <ssd1306_Fill+0x1c>
 8001f2a:	21ff      	movs	r1, #255	; 0xff
 8001f2c:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <ssd1306_Fill+0x44>)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	460a      	mov	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f42:	d3ed      	bcc.n	8001f20 <ssd1306_Fill+0x10>
	}
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200009ec 	.word	0x200009ec

08001f58 <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	e01d      	b.n	8001fa0 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	3b50      	subs	r3, #80	; 0x50
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff4c 	bl	8001e08 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff ff49 	bl	8001e08 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001f76:	2010      	movs	r0, #16
 8001f78:	f7ff ff46 	bl	8001e08 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	01db      	lsls	r3, r3, #7
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <ssd1306_UpdateScreen+0x58>)
 8001f82:	4413      	add	r3, r2
 8001f84:	2264      	movs	r2, #100	; 0x64
 8001f86:	9202      	str	r2, [sp, #8]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	9201      	str	r2, [sp, #4]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2178      	movs	r1, #120	; 0x78
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <ssd1306_UpdateScreen+0x5c>)
 8001f96:	f001 f913 	bl	80031c0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b07      	cmp	r3, #7
 8001fa4:	d9de      	bls.n	8001f64 <ssd1306_UpdateScreen+0xc>
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200009ec 	.word	0x200009ec
 8001fb4:	20000e40 	.word	0x20000e40

08001fb8 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db48      	blt.n	8002064 <ssd1306_DrawPixel+0xac>
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	2b3f      	cmp	r3, #63	; 0x3f
 8001fd6:	d845      	bhi.n	8002064 <ssd1306_DrawPixel+0xac>
	{
		return;
	}

	if (SSD1306.Inverted)
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <ssd1306_DrawPixel+0xb8>)
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001fe0:	797b      	ldrb	r3, [r7, #5]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	717b      	strb	r3, [r7, #5]
	}

	if (color == White)
 8001fee:	797b      	ldrb	r3, [r7, #5]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11a      	bne.n	800202a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	01db      	lsls	r3, r3, #7
 8002000:	4413      	add	r3, r2
 8002002:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <ssd1306_DrawPixel+0xbc>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	b25a      	sxtb	r2, r3
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	b25b      	sxtb	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b259      	sxtb	r1, r3
 800201a:	79fa      	ldrb	r2, [r7, #7]
 800201c:	4603      	mov	r3, r0
 800201e:	01db      	lsls	r3, r3, #7
 8002020:	4413      	add	r3, r2
 8002022:	b2c9      	uxtb	r1, r1
 8002024:	4a13      	ldr	r2, [pc, #76]	; (8002074 <ssd1306_DrawPixel+0xbc>)
 8002026:	54d1      	strb	r1, [r2, r3]
 8002028:	e01d      	b.n	8002066 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	79bb      	ldrb	r3, [r7, #6]
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	b2d8      	uxtb	r0, r3
 8002032:	4603      	mov	r3, r0
 8002034:	01db      	lsls	r3, r3, #7
 8002036:	4413      	add	r3, r2
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <ssd1306_DrawPixel+0xbc>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	b25a      	sxtb	r2, r3
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	b25b      	sxtb	r3, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	b25b      	sxtb	r3, r3
 8002050:	4013      	ands	r3, r2
 8002052:	b259      	sxtb	r1, r3
 8002054:	79fa      	ldrb	r2, [r7, #7]
 8002056:	4603      	mov	r3, r0
 8002058:	01db      	lsls	r3, r3, #7
 800205a:	4413      	add	r3, r2
 800205c:	b2c9      	uxtb	r1, r1
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <ssd1306_DrawPixel+0xbc>)
 8002060:	54d1      	strb	r1, [r2, r3]
 8002062:	e000      	b.n	8002066 <ssd1306_DrawPixel+0xae>
		return;
 8002064:	bf00      	nop
	}
}
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000dec 	.word	0x20000dec
 8002074:	200009ec 	.word	0x200009ec

08002078 <ssd1306_WriteChar>:

//	color 	=> Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	4604      	mov	r4, r0
 8002080:	1d38      	adds	r0, r7, #4
 8002082:	e880 0006 	stmia.w	r0, {r1, r2}
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	4613      	mov	r3, r2
 800208e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <ssd1306_WriteChar+0xfc>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	793b      	ldrb	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	2b7f      	cmp	r3, #127	; 0x7f
 800209c:	dc06      	bgt.n	80020ac <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <ssd1306_WriteChar+0xfc>)
 80020a0:	885b      	ldrh	r3, [r3, #2]
 80020a2:	461a      	mov	r2, r3
 80020a4:	797b      	ldrb	r3, [r7, #5]
 80020a6:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80020a8:	2b3f      	cmp	r3, #63	; 0x3f
 80020aa:	dd01      	ble.n	80020b0 <ssd1306_WriteChar+0x38>
	{
		return 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e05d      	b.n	800216c <ssd1306_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	e04c      	b.n	8002150 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3b20      	subs	r3, #32
 80020bc:	7979      	ldrb	r1, [r7, #5]
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4619      	mov	r1, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	440b      	add	r3, r1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	e034      	b.n	8002140 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <ssd1306_WriteChar+0xfc>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b2d8      	uxtb	r0, r3
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <ssd1306_WriteChar+0xfc>)
 80020f6:	885b      	ldrh	r3, [r3, #2]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4413      	add	r3, r2
 8002100:	b2db      	uxtb	r3, r3
 8002102:	7bba      	ldrb	r2, [r7, #14]
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff ff57 	bl	8001fb8 <ssd1306_DrawPixel>
 800210a:	e016      	b.n	800213a <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <ssd1306_WriteChar+0xfc>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4413      	add	r3, r2
 8002118:	b2d8      	uxtb	r0, r3
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <ssd1306_WriteChar+0xfc>)
 800211c:	885b      	ldrh	r3, [r3, #2]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4413      	add	r3, r2
 8002126:	b2d9      	uxtb	r1, r3
 8002128:	7bbb      	ldrb	r3, [r7, #14]
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	f7ff ff3f 	bl	8001fb8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	3301      	adds	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	793b      	ldrb	r3, [r7, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	4293      	cmp	r3, r2
 8002148:	d3c5      	bcc.n	80020d6 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	797b      	ldrb	r3, [r7, #5]
 8002152:	461a      	mov	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4293      	cmp	r3, r2
 8002158:	d3ad      	bcc.n	80020b6 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	SSD1306.CurrentX += Font.FontWidth;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <ssd1306_WriteChar+0xfc>)
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	793b      	ldrb	r3, [r7, #4]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4413      	add	r3, r2
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b03      	ldr	r3, [pc, #12]	; (8002174 <ssd1306_WriteChar+0xfc>)
 8002168:	801a      	strh	r2, [r3, #0]


	return ch;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3724      	adds	r7, #36	; 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	20000dec 	.word	0x20000dec

08002178 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	1d38      	adds	r0, r7, #4
 8002182:	e880 0006 	stmia.w	r0, {r1, r2}
 8002186:	70fb      	strb	r3, [r7, #3]

	while (*str)
 8002188:	e012      	b.n	80021b0 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	7818      	ldrb	r0, [r3, #0]
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	1d3a      	adds	r2, r7, #4
 8002192:	ca06      	ldmia	r2, {r1, r2}
 8002194:	f7ff ff70 	bl	8002078 <ssd1306_WriteChar>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d002      	beq.n	80021aa <ssd1306_WriteString+0x32>
		{

			return *str;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	e008      	b.n	80021bc <ssd1306_WriteString+0x44>
		}


		str++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3301      	adds	r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
	while (*str)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e8      	bne.n	800218a <ssd1306_WriteString+0x12>
	}


	return *str;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	460a      	mov	r2, r1
 80021ce:	71fb      	strb	r3, [r7, #7]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <ssd1306_SetCursor+0x2c>)
 80021da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <ssd1306_SetCursor+0x2c>)
 80021e2:	805a      	strh	r2, [r3, #2]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000dec 	.word	0x20000dec

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_MspInit+0x44>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_MspInit+0x44>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6193      	str	r3, [r2, #24]
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_MspInit+0x44>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_MspInit+0x44>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_MspInit+0x44>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	61d3      	str	r3, [r2, #28]
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_MspInit+0x44>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800222a:	2007      	movs	r0, #7
 800222c:	f000 fbbe 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_DAC_MspInit+0x84>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12c      	bne.n	80022b8 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_DAC_MspInit+0x88>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_DAC_MspInit+0x88>)
 8002264:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002268:	61d3      	str	r3, [r2, #28]
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_DAC_MspInit+0x88>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_DAC_MspInit+0x88>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_DAC_MspInit+0x88>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6153      	str	r3, [r2, #20]
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_DAC_MspInit+0x88>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
 800228e:	2310      	movs	r3, #16
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002292:	2303      	movs	r3, #3
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a4:	f000 fd10 	bl	8002cc8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2036      	movs	r0, #54	; 0x36
 80022ae:	f000 fb88 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b2:	2036      	movs	r0, #54	; 0x36
 80022b4:	f000 fba1 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40007400 	.word	0x40007400
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_I2C_MspInit+0x7c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d128      	bne.n	800233c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_I2C_MspInit+0x80>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_I2C_MspInit+0x80>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6153      	str	r3, [r2, #20]
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_I2C_MspInit+0x80>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002308:	2312      	movs	r3, #18
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002314:	2304      	movs	r3, #4
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	480b      	ldr	r0, [pc, #44]	; (800234c <HAL_I2C_MspInit+0x84>)
 8002320:	f000 fcd2 	bl	8002cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_I2C_MspInit+0x80>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_I2C_MspInit+0x80>)
 800232a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_I2C_MspInit+0x80>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40005400 	.word	0x40005400
 8002348:	40021000 	.word	0x40021000
 800234c:	48000400 	.word	0x48000400

08002350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_TIM_Base_MspInit+0x78>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d114      	bne.n	800238c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2036      	movs	r0, #54	; 0x36
 8002380:	f000 fb1f 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002384:	2036      	movs	r0, #54	; 0x36
 8002386:	f000 fb38 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800238a:	e018      	b.n	80023be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_TIM_Base_MspInit+0x80>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2037      	movs	r0, #55	; 0x37
 80023b4:	f000 fb05 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023b8:	2037      	movs	r0, #55	; 0x37
 80023ba:	f000 fb1e 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40001000 	.word	0x40001000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40001400 	.word	0x40001400

080023d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_UART_MspInit+0x7c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d128      	bne.n	8002448 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_UART_MspInit+0x80>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_UART_MspInit+0x80>)
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_UART_MspInit+0x80>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_UART_MspInit+0x80>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_UART_MspInit+0x80>)
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	6153      	str	r3, [r2, #20]
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_UART_MspInit+0x80>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002426:	230c      	movs	r3, #12
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002436:	2307      	movs	r3, #7
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002444:	f000 fc40 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40004400 	.word	0x40004400
 8002454:	40021000 	.word	0x40021000

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 f96e 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80024b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024b4:	f000 fddc 	bl	8003070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80024b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024bc:	f000 fdd8 	bl	8003070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <TIM6_DAC_IRQHandler+0x14>)
 80024ca:	f002 ffbc 	bl	8005446 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80024ce:	4803      	ldr	r0, [pc, #12]	; (80024dc <TIM6_DAC_IRQHandler+0x18>)
 80024d0:	f000 fb49 	bl	8002b66 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000e8c 	.word	0x20000e8c
 80024dc:	20000e2c 	.word	0x20000e2c

080024e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM7_IRQHandler+0x10>)
 80024e6:	f002 ffae 	bl	8005446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000f5c 	.word	0x20000f5c

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800250e:	f003 fdb5 	bl	800607c <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
	return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002536:	e7fe      	b.n	8002536 <_exit+0x12>

08002538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e00a      	b.n	8002560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800254a:	f3af 8000 	nop.w
 800254e:	4601      	mov	r1, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf0      	blt.n	800254a <_read+0x12>
	}

return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e009      	b.n	8002598 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	dbf1      	blt.n	8002584 <_write+0x12>
	}
	return len;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_close>:

int _close(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d2:	605a      	str	r2, [r3, #4]
	return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_isatty>:

int _isatty(int file)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
	return 1;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
	return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f003 fd1a 	bl	800607c <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20010000 	.word	0x20010000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000df4 	.word	0x20000df4
 800267c:	20000fc0 	.word	0x20000fc0

08002680 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480d      	ldr	r0, [pc, #52]	; (80026e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490e      	ldr	r1, [pc, #56]	; (80026e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0b      	ldr	r4, [pc, #44]	; (80026f0 <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026ce:	f7ff ffd7 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f003 fcd9 	bl	8006088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026d6:	f7fe fed7 	bl	8001488 <main>

080026da <LoopForever>:

LoopForever:
    b LoopForever
 80026da:	e7fe      	b.n	80026da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	200009c0 	.word	0x200009c0
  ldr r2, =_sidata
 80026e8:	0800b698 	.word	0x0800b698
  ldr r2, =_sbss
 80026ec:	200009c0 	.word	0x200009c0
  ldr r4, =_ebss
 80026f0:	20000fbc 	.word	0x20000fbc

080026f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC1_2_IRQHandler>
	...

080026f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_Init+0x28>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_Init+0x28>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f94f 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	2000      	movs	r0, #0
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7ff fd6e 	bl	80021f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000

08002724 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f967 	bl	8002a16 <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f000 f92f 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000008 	.word	0x20000008
 800277c:	20000010 	.word	0x20000010
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000010 	.word	0x20000010
 80027a8:	20000fa8 	.word	0x20000fa8

080027ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000fa8 	.word	0x20000fa8

080027c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000010 	.word	0x20000010

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff29 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff3e 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff31 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e014      	b.n	8002a6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fbf3 	bl	800223c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3308      	adds	r3, #8
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e004      	b.n	8002aba <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	461a      	mov	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	795b      	ldrb	r3, [r3, #5]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DAC_Start+0x16>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e039      	b.n	8002b5a <HAL_DAC_Start+0x8a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6819      	ldr	r1, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	409a      	lsls	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002b16:	2b3c      	cmp	r3, #60	; 0x3c
 8002b18:	d118      	bne.n	8002b4c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e00f      	b.n	8002b4c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b36:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8002b3a:	d107      	bne.n	8002b4c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0202 	orr.w	r2, r2, #2
 8002b4a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7c:	d120      	bne.n	8002bc0 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d118      	bne.n	8002bc0 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bb8:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff59 	bl	8002a72 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bce:	d120      	bne.n	8002c12 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bde:	d118      	bne.n	8002c12 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f851 	bl	8002cb4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	795b      	ldrb	r3, [r3, #5]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_DAC_ConfigChannel+0x20>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e036      	b.n	8002ca8 <HAL_DAC_ConfigChannel+0x8e>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2202      	movs	r2, #2
 8002c44:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002c4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	22c0      	movs	r2, #192	; 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd6:	e160      	b.n	8002f9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8152 	beq.w	8002f94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d00b      	beq.n	8002d10 <HAL_GPIO_Init+0x48>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d007      	beq.n	8002d10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d04:	2b11      	cmp	r3, #17
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b12      	cmp	r3, #18
 8002d0e:	d130      	bne.n	8002d72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0201 	and.w	r2, r3, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0xea>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b12      	cmp	r3, #18
 8002db0:	d123      	bne.n	8002dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	08da      	lsrs	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3208      	adds	r2, #8
 8002df4:	6939      	ldr	r1, [r7, #16]
 8002df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80ac 	beq.w	8002f94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <HAL_GPIO_Init+0x2f0>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <HAL_GPIO_Init+0x2f0>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_GPIO_Init+0x2f0>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e54:	4a59      	ldr	r2, [pc, #356]	; (8002fbc <HAL_GPIO_Init+0x2f4>)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e7e:	d025      	beq.n	8002ecc <HAL_GPIO_Init+0x204>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_GPIO_Init+0x2f8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01f      	beq.n	8002ec8 <HAL_GPIO_Init+0x200>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4e      	ldr	r2, [pc, #312]	; (8002fc4 <HAL_GPIO_Init+0x2fc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d019      	beq.n	8002ec4 <HAL_GPIO_Init+0x1fc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4d      	ldr	r2, [pc, #308]	; (8002fc8 <HAL_GPIO_Init+0x300>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_GPIO_Init+0x1f8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00d      	beq.n	8002ebc <HAL_GPIO_Init+0x1f4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a4b      	ldr	r2, [pc, #300]	; (8002fd0 <HAL_GPIO_Init+0x308>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <HAL_GPIO_Init+0x1f0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_GPIO_Init+0x1ec>
 8002eb0:	2306      	movs	r3, #6
 8002eb2:	e00c      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	e00a      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002eb8:	2305      	movs	r3, #5
 8002eba:	e008      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e006      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e004      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e002      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_GPIO_Init+0x206>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	f002 0203 	and.w	r2, r2, #3
 8002ed4:	0092      	lsls	r2, r2, #2
 8002ed6:	4093      	lsls	r3, r2
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ede:	4937      	ldr	r1, [pc, #220]	; (8002fbc <HAL_GPIO_Init+0x2f4>)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eec:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f10:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f ae97 	bne.w	8002cd8 <HAL_GPIO_Init+0x10>
  }
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	48000400 	.word	0x48000400
 8002fc4:	48000800 	.word	0x48000800
 8002fc8:	48000c00 	.word	0x48000c00
 8002fcc:	48001000 	.word	0x48001000
 8002fd0:	48001400 	.word	0x48001400
 8002fd4:	48001800 	.word	0x48001800
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e001      	b.n	8002ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003028:	e002      	b.n	8003030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4013      	ands	r3, r2
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	43d9      	mvns	r1, r3
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	400b      	ands	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fdc2 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e081      	b.n	80031b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff f8fe 	bl	80022c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2224      	movs	r2, #36	; 0x24
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003100:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	e006      	b.n	8003128 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003126:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d104      	bne.n	800313a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800315c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	ea42 0103 	orr.w	r1, r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	f040 80f9 	bne.w	80033da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x34>
 80031ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ed      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_I2C_Mem_Write+0x4e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0e6      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003216:	f7ff fac9 	bl	80027ac <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fac3 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d1      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2221      	movs	r2, #33	; 0x21
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003260:	88f8      	ldrh	r0, [r7, #6]
 8003262:	893a      	ldrh	r2, [r7, #8]
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4603      	mov	r3, r0
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f9d3 	bl	800361c <I2C_RequestMemoryWrite>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0a9      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2bff      	cmp	r3, #255	; 0xff
 8003290:	d90e      	bls.n	80032b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fba5 	bl	80039f8 <I2C_TransferConfig>
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fb94 	bl	80039f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 faad 	bl	8003834 <I2C_WaitOnTXISFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e07b      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d034      	beq.n	8003388 <HAL_I2C_Mem_Write+0x1c8>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d130      	bne.n	8003388 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa3f 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04d      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d90e      	bls.n	8003368 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fb49 	bl	80039f8 <I2C_TransferConfig>
 8003366:	e00f      	b.n	8003388 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fb38 	bl	80039f8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d19e      	bne.n	80032d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa8c 	bl	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01a      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_I2C_Mem_Write+0x224>)
 80033ba:	400b      	ands	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	fe00e800 	.word	0xfe00e800

080033e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80fd 	bne.w	800360a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_I2C_Mem_Read+0x34>
 8003416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0f1      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Read+0x4e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0ea      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800343e:	f7ff f9b5 	bl	80027ac <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f9af 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0d5      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2222      	movs	r2, #34	; 0x22
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	; 0x40
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003488:	88f8      	ldrh	r0, [r7, #6]
 800348a:	893a      	ldrh	r2, [r7, #8]
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4603      	mov	r3, r0
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f913 	bl	80036c4 <I2C_RequestMemoryRead>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0ad      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2bff      	cmp	r3, #255	; 0xff
 80034b8:	d90e      	bls.n	80034d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	4b52      	ldr	r3, [pc, #328]	; (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fa91 	bl	80039f8 <I2C_TransferConfig>
 80034d6:	e00f      	b.n	80034f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fa80 	bl	80039f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	2200      	movs	r2, #0
 8003500:	2104      	movs	r1, #4
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f956 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07c      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d034      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d130      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f927 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04d      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2bff      	cmp	r3, #255	; 0xff
 8003578:	d90e      	bls.n	8003598 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	22ff      	movs	r2, #255	; 0xff
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fa31 	bl	80039f8 <I2C_TransferConfig>
 8003596:	e00f      	b.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fa20 	bl	80039f8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d19a      	bne.n	80034f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f974 	bl	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e01a      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_I2C_Mem_Read+0x230>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	80002400 	.word	0x80002400
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	8979      	ldrh	r1, [r7, #10]
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <I2C_RequestMemoryWrite+0xa4>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f9d7 	bl	80039f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8f0 	bl	8003834 <I2C_WaitOnTXISFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e02c      	b.n	80036b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
 800366e:	e015      	b.n	800369c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003670:	893b      	ldrh	r3, [r7, #8]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	b29b      	uxth	r3, r3
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f8d6 	bl	8003834 <I2C_WaitOnTXISFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e012      	b.n	80036b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f884 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	80002000 	.word	0x80002000

080036c4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	817b      	strh	r3, [r7, #10]
 80036d6:	460b      	mov	r3, r1
 80036d8:	813b      	strh	r3, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	4b20      	ldr	r3, [pc, #128]	; (8003768 <I2C_RequestMemoryRead+0xa4>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f984 	bl	80039f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f89d 	bl	8003834 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e02c      	b.n	800375e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370a:	893b      	ldrh	r3, [r7, #8]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
 8003714:	e015      	b.n	8003742 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	b29b      	uxth	r3, r3
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f883 	bl	8003834 <I2C_WaitOnTXISFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e012      	b.n	800375e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f831 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	80002000 	.word	0x80002000

0800376c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d103      	bne.n	800378a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d007      	beq.n	80037a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	619a      	str	r2, [r3, #24]
  }
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c4:	e022      	b.n	800380c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d01e      	beq.n	800380c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe ffed 	bl	80027ac <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d113      	bne.n	800380c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e00f      	b.n	800382c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	429a      	cmp	r2, r3
 8003828:	d0cd      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003840:	e02c      	b.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f870 	bl	800392c <I2C_IsAcknowledgeFailed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e02a      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d01e      	beq.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe ffa5 	bl	80027ac <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d113      	bne.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e007      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d1cb      	bne.n	8003842 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c0:	e028      	b.n	8003914 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f830 	bl	800392c <I2C_IsAcknowledgeFailed>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e026      	b.n	8003924 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe ff69 	bl	80027ac <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d113      	bne.n	8003914 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b20      	cmp	r3, #32
 8003920:	d1cf      	bne.n	80038c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b10      	cmp	r3, #16
 8003944:	d151      	bne.n	80039ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003946:	e022      	b.n	800398e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d01e      	beq.n	800398e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fe ff2c 	bl	80027ac <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <I2C_IsAcknowledgeFailed+0x3a>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e02e      	b.n	80039ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b20      	cmp	r3, #32
 800399a:	d1d5      	bne.n	8003948 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2210      	movs	r2, #16
 80039a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2220      	movs	r2, #32
 80039aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fedd 	bl	800376c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80039be:	400b      	ands	r3, r1
 80039c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	fe00e800 	.word	0xfe00e800

080039f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	4613      	mov	r3, r2
 8003a08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	0d5b      	lsrs	r3, r3, #21
 8003a14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <I2C_TransferConfig+0x58>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	ea02 0103 	and.w	r1, r2, r3
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a28:	7a7b      	ldrb	r3, [r7, #9]
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	03ff63ff 	.word	0x03ff63ff

08003a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d138      	bne.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e032      	b.n	8003ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d139      	bne.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e033      	b.n	8003b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2224      	movs	r2, #36	; 0x24
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f000 bf01 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8160 	beq.w	8003e6e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bae:	4bae      	ldr	r3, [pc, #696]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bba:	4bab      	ldr	r3, [pc, #684]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d159      	bne.n	8003c7a <HAL_RCC_OscConfig+0xf6>
 8003bc6:	4ba8      	ldr	r3, [pc, #672]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd2:	d152      	bne.n	8003c7a <HAL_RCC_OscConfig+0xf6>
 8003bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003be8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_OscConfig+0x82>
 8003c00:	4b99      	ldr	r3, [pc, #612]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	e015      	b.n	8003c32 <HAL_RCC_OscConfig+0xae>
 8003c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c2e:	4b8e      	ldr	r3, [pc, #568]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c36:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003c3a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003c3e:	fa92 f2a2 	rbit	r2, r2
 8003c42:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003c46:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8102 	beq.w	8003e6c <HAL_RCC_OscConfig+0x2e8>
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 80fc 	bne.w	8003e6c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f000 be93 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d106      	bne.n	8003c94 <HAL_RCC_OscConfig+0x110>
 8003c86:	4b78      	ldr	r3, [pc, #480]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a77      	ldr	r2, [pc, #476]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e030      	b.n	8003cf6 <HAL_RCC_OscConfig+0x172>
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x134>
 8003c9e:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a71      	ldr	r2, [pc, #452]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01e      	b.n	8003cf6 <HAL_RCC_OscConfig+0x172>
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_OscConfig+0x15a>
 8003cc4:	4b68      	ldr	r3, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a67      	ldr	r2, [pc, #412]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a64      	ldr	r2, [pc, #400]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e00b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x172>
 8003cde:	4b62      	ldr	r3, [pc, #392]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5e      	ldr	r2, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d059      	beq.n	8003db4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe fd54 	bl	80027ac <HAL_GetTick>
 8003d04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d0a:	f7fe fd4f 	bl	80027ac <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d902      	bls.n	8003d20 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	f000 be40 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>
 8003d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d24:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003d34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d102      	bne.n	8003d52 <HAL_RCC_OscConfig+0x1ce>
 8003d4c:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x1fa>
 8003d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003d6e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d82:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003d86:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003d8a:	fa92 f2a2 	rbit	r2, r2
 8003d8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003d92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003d96:	fab2 f282 	clz	r2, r2
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	f042 0220 	orr.w	r2, r2, #32
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	f002 021f 	and.w	r2, r2, #31
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ab      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
 8003db2:	e05c      	b.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fcfa 	bl	80027ac <HAL_GetTick>
 8003db8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbe:	f7fe fcf5 	bl	80027ac <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d902      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	f000 bde6 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>
 8003dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003de8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_OscConfig+0x282>
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x2ae>
 8003e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_RCC_OscConfig+0x2e4>)
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e36:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003e3a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003e3e:	fa92 f2a2 	rbit	r2, r2
 8003e42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003e46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003e4a:	fab2 f282 	clz	r2, r2
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f042 0220 	orr.w	r2, r2, #32
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f002 021f 	and.w	r2, r2, #31
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ab      	bne.n	8003dbe <HAL_RCC_OscConfig+0x23a>
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
 8003e68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8170 	beq.w	800415e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e7e:	4bd0      	ldr	r3, [pc, #832]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e8a:	4bcd      	ldr	r3, [pc, #820]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d16d      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3ee>
 8003e96:	4bca      	ldr	r3, [pc, #808]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	d166      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3ee>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003eb6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x350>
 8003ece:	4bbc      	ldr	r3, [pc, #752]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	e013      	b.n	8003efc <HAL_RCC_OscConfig+0x378>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003eec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ef8:	4bb1      	ldr	r3, [pc, #708]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2202      	movs	r2, #2
 8003efe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003f02:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003f06:	fa92 f2a2 	rbit	r2, r2
 8003f0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003f0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f12:	fab2 f282 	clz	r2, r2
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f042 0220 	orr.w	r2, r2, #32
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	f002 021f 	and.w	r2, r2, #31
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f202 	lsl.w	r2, r1, r2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3ba>
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d002      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f000 bd31 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	21f8      	movs	r1, #248	; 0xf8
 8003f4e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003f56:	fa91 f1a1 	rbit	r1, r1
 8003f5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003f5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003f62:	fab1 f181 	clz	r1, r1
 8003f66:	b2c9      	uxtb	r1, r1
 8003f68:	408b      	lsls	r3, r1
 8003f6a:	4995      	ldr	r1, [pc, #596]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f70:	e0f5      	b.n	800415e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8085 	beq.w	8004088 <HAL_RCC_OscConfig+0x504>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003f90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fe fbff 	bl	80027ac <HAL_GetTick>
 8003fae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fe fbfa 	bl	80027ac <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d902      	bls.n	8003fca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	f000 bceb 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003fdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_OscConfig+0x476>
 8003ff4:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	e013      	b.n	8004022 <HAL_RCC_OscConfig+0x49e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800400c:	2302      	movs	r3, #2
 800400e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004012:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800401e:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2202      	movs	r2, #2
 8004024:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004028:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800402c:	fa92 f2a2 	rbit	r2, r2
 8004030:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004034:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f042 0220 	orr.w	r2, r2, #32
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f002 021f 	and.w	r2, r2, #31
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0af      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	21f8      	movs	r1, #248	; 0xf8
 8004064:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800406c:	fa91 f1a1 	rbit	r1, r1
 8004070:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004074:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004078:	fab1 f181 	clz	r1, r1
 800407c:	b2c9      	uxtb	r1, r1
 800407e:	408b      	lsls	r3, r1
 8004080:	494f      	ldr	r1, [pc, #316]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]
 8004086:	e06a      	b.n	800415e <HAL_RCC_OscConfig+0x5da>
 8004088:	2301      	movs	r3, #1
 800408a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800409a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	461a      	mov	r2, r3
 80040b0:	2300      	movs	r3, #0
 80040b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fb7a 	bl	80027ac <HAL_GetTick>
 80040b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040be:	f7fe fb75 	bl	80027ac <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d902      	bls.n	80040d4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	f000 bc66 	b.w	80049a0 <HAL_RCC_OscConfig+0xe1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80040e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0x580>
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	e013      	b.n	800412c <HAL_RCC_OscConfig+0x5a8>
 8004104:	2302      	movs	r3, #2
 8004106:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004116:	2302      	movs	r3, #2
 8004118:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800411c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x63c>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2202      	movs	r2, #2
 800412e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004132:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004136:	fa92 f2a2 	rbit	r2, r2
 800413a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800413e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004142:	fab2 f282 	clz	r2, r2
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	f042 0220 	orr.w	r2, r2, #32
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	f002 021f 	and.w	r2, r2, #31
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f202 	lsl.w	r2, r1, r2
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1af      	bne.n	80040be <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80da 	beq.w	8004322 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d069      	beq.n	800424c <HAL_RCC_OscConfig+0x6c8>
 8004178:	2301      	movs	r3, #1
 800417a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800418a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_OscConfig+0x640>)
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	461a      	mov	r2, r3
 800419e:	2301      	movs	r3, #1
 80041a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fe fb03 	bl	80027ac <HAL_GetTick>
 80041a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	e00d      	b.n	80041c8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fe fafe 	bl	80027ac <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d905      	bls.n	80041c8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e3ef      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	10908120 	.word	0x10908120
 80041c8:	2302      	movs	r3, #2
 80041ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	fa93 f2a3 	rbit	r2, r3
 80041d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80041e0:	2202      	movs	r2, #2
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fa93 f2a3 	rbit	r2, r3
 80041ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80041f8:	2202      	movs	r2, #2
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800420a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420c:	4ba4      	ldr	r3, [pc, #656]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800420e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004210:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004214:	2102      	movs	r1, #2
 8004216:	6019      	str	r1, [r3, #0]
 8004218:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f1a3 	rbit	r1, r3
 8004222:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004226:	6019      	str	r1, [r3, #0]
  return result;
 8004228:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0b0      	beq.n	80041ac <HAL_RCC_OscConfig+0x628>
 800424a:	e06a      	b.n	8004322 <HAL_RCC_OscConfig+0x79e>
 800424c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004262:	601a      	str	r2, [r3, #0]
  return result;
 8004264:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004268:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <HAL_RCC_OscConfig+0x920>)
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	461a      	mov	r2, r3
 800427a:	2300      	movs	r3, #0
 800427c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fe fa95 	bl	80027ac <HAL_GetTick>
 8004282:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004286:	e009      	b.n	800429c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7fe fa90 	bl	80027ac <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e381      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 800429c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80042a0:	2202      	movs	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	fa93 f2a3 	rbit	r2, r3
 80042ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80042b8:	2202      	movs	r2, #2
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	fa93 f2a3 	rbit	r2, r3
 80042c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042d0:	2202      	movs	r2, #2
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80042e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b6e      	ldr	r3, [pc, #440]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80042e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042ec:	2102      	movs	r1, #2
 80042ee:	6019      	str	r1, [r3, #0]
 80042f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f1a3 	rbit	r1, r3
 80042fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80042fe:	6019      	str	r1, [r3, #0]
  return result;
 8004300:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1b2      	bne.n	8004288 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8157 	beq.w	80045e0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004338:	4b59      	ldr	r3, [pc, #356]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d112      	bne.n	800436a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4a55      	ldr	r2, [pc, #340]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434e:	61d3      	str	r3, [r2, #28]
 8004350:	4b53      	ldr	r3, [pc, #332]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	f107 030c 	add.w	r3, r7, #12
 8004362:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b4f      	ldr	r3, [pc, #316]	; (80044a8 <HAL_RCC_OscConfig+0x924>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11a      	bne.n	80043ac <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004376:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCC_OscConfig+0x924>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4b      	ldr	r2, [pc, #300]	; (80044a8 <HAL_RCC_OscConfig+0x924>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004382:	f7fe fa13 	bl	80027ac <HAL_GetTick>
 8004386:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	e009      	b.n	80043a0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fe fa0e 	bl	80027ac <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b64      	cmp	r3, #100	; 0x64
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e2ff      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_RCC_OscConfig+0x924>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ac:	1d3b      	adds	r3, r7, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d106      	bne.n	80043c4 <HAL_RCC_OscConfig+0x840>
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4a39      	ldr	r2, [pc, #228]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6213      	str	r3, [r2, #32]
 80043c2:	e02f      	b.n	8004424 <HAL_RCC_OscConfig+0x8a0>
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x864>
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a33      	ldr	r2, [pc, #204]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6213      	str	r3, [r2, #32]
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	6213      	str	r3, [r2, #32]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0x8a0>
 80043e8:	1d3b      	adds	r3, r7, #4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x888>
 80043f2:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4a2a      	ldr	r2, [pc, #168]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 80043f8:	f043 0304 	orr.w	r3, r3, #4
 80043fc:	6213      	str	r3, [r2, #32]
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6213      	str	r3, [r2, #32]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0x8a0>
 800440c:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	6213      	str	r3, [r2, #32]
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800441e:	f023 0304 	bic.w	r3, r3, #4
 8004422:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06a      	beq.n	8004504 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe f9bd 	bl	80027ac <HAL_GetTick>
 8004432:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fe f9b8 	bl	80027ac <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e2a7      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 8004450:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004454:	2202      	movs	r2, #2
 8004456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	fa93 f2a3 	rbit	r2, r3
 8004462:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800446c:	2202      	movs	r2, #2
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	fa93 f2a3 	rbit	r2, r3
 800447a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800447e:	601a      	str	r2, [r3, #0]
  return result;
 8004480:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004484:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d108      	bne.n	80044ac <HAL_RCC_OscConfig+0x928>
 800449a:	4b01      	ldr	r3, [pc, #4]	; (80044a0 <HAL_RCC_OscConfig+0x91c>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	e013      	b.n	80044c8 <HAL_RCC_OscConfig+0x944>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	10908120 	.word	0x10908120
 80044a8:	40007000 	.word	0x40007000
 80044ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80044b0:	2202      	movs	r2, #2
 80044b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	fa93 f2a3 	rbit	r2, r3
 80044be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	4bc0      	ldr	r3, [pc, #768]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80044cc:	2102      	movs	r1, #2
 80044ce:	6011      	str	r1, [r2, #0]
 80044d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	fa92 f1a2 	rbit	r1, r2
 80044da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80044de:	6011      	str	r1, [r2, #0]
  return result;
 80044e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	fab2 f282 	clz	r2, r2
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	f002 021f 	and.w	r2, r2, #31
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f202 	lsl.w	r2, r1, r2
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d09a      	beq.n	8004438 <HAL_RCC_OscConfig+0x8b4>
 8004502:	e063      	b.n	80045cc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7fe f952 	bl	80027ac <HAL_GetTick>
 8004508:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe f94d 	bl	80027ac <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e23c      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 8004526:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800452a:	2202      	movs	r2, #2
 800452c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004542:	2202      	movs	r2, #2
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	fa93 f2a3 	rbit	r2, r3
 8004550:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004554:	601a      	str	r2, [r3, #0]
  return result;
 8004556:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800455a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f043 0302 	orr.w	r3, r3, #2
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d102      	bne.n	8004576 <HAL_RCC_OscConfig+0x9f2>
 8004570:	4b95      	ldr	r3, [pc, #596]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	e00d      	b.n	8004592 <HAL_RCC_OscConfig+0xa0e>
 8004576:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800457a:	2202      	movs	r2, #2
 800457c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	fa93 f2a3 	rbit	r2, r3
 8004588:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	4b8e      	ldr	r3, [pc, #568]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004596:	2102      	movs	r1, #2
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	fa92 f1a2 	rbit	r1, r2
 80045a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045a8:	6011      	str	r1, [r2, #0]
  return result;
 80045aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	fab2 f282 	clz	r2, r2
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	f002 021f 	and.w	r2, r2, #31
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f202 	lsl.w	r2, r1, r2
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1a0      	bne.n	800450e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045cc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d4:	4b7c      	ldr	r3, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	4a7b      	ldr	r2, [pc, #492]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 80045da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 81d9 	beq.w	800499e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ec:	4b76      	ldr	r3, [pc, #472]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	f000 81a6 	beq.w	8004946 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b02      	cmp	r3, #2
 8004602:	f040 811e 	bne.w	8004842 <HAL_RCC_OscConfig+0xcbe>
 8004606:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800460a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800460e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	fa93 f2a3 	rbit	r2, r3
 800461a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800461e:	601a      	str	r2, [r3, #0]
  return result;
 8004620:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004624:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe f8b6 	bl	80027ac <HAL_GetTick>
 8004640:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004644:	e009      	b.n	800465a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe f8b1 	bl	80027ac <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1a2      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 800465a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800465e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	fa93 f2a3 	rbit	r2, r3
 800466e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004672:	601a      	str	r2, [r3, #0]
  return result;
 8004674:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d102      	bne.n	8004694 <HAL_RCC_OscConfig+0xb10>
 800468e:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	e01b      	b.n	80046cc <HAL_RCC_OscConfig+0xb48>
 8004694:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	fa93 f2a3 	rbit	r2, r3
 80046a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fa93 f2a3 	rbit	r2, r3
 80046c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	fa92 f1a2 	rbit	r1, r2
 80046e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046e4:	6011      	str	r1, [r2, #0]
  return result;
 80046e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	fab2 f282 	clz	r2, r2
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f042 0220 	orr.w	r2, r2, #32
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	f002 021f 	and.w	r2, r2, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d19e      	bne.n	8004646 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004708:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f023 020f 	bic.w	r2, r3, #15
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	492c      	ldr	r1, [pc, #176]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 8004718:	4313      	orrs	r3, r2
 800471a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a19      	ldr	r1, [r3, #32]
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	430b      	orrs	r3, r1
 8004732:	4925      	ldr	r1, [pc, #148]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
 8004738:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800473c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	fa93 f2a3 	rbit	r2, r3
 800474c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004750:	601a      	str	r2, [r3, #0]
  return result;
 8004752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004756:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004762:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	461a      	mov	r2, r3
 800476a:	2301      	movs	r3, #1
 800476c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fe f81d 	bl	80027ac <HAL_GetTick>
 8004772:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004776:	e009      	b.n	800478c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fe f818 	bl	80027ac <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e109      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 800478c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f2a3 	rbit	r2, r3
 80047a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80047a4:	601a      	str	r2, [r3, #0]
  return result;
 80047a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80047aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <HAL_RCC_OscConfig+0xc48>
 80047c0:	4b01      	ldr	r3, [pc, #4]	; (80047c8 <HAL_RCC_OscConfig+0xc44>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	e01e      	b.n	8004804 <HAL_RCC_OscConfig+0xc80>
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	fa93 f2a3 	rbit	r2, r3
 80047e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	fa93 f2a3 	rbit	r2, r3
 80047fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_OscConfig+0xe28>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004808:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800480c:	6011      	str	r1, [r2, #0]
 800480e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	fa92 f1a2 	rbit	r1, r2
 8004818:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800481c:	6011      	str	r1, [r2, #0]
  return result;
 800481e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	fab2 f282 	clz	r2, r2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	f042 0220 	orr.w	r2, r2, #32
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	f002 021f 	and.w	r2, r2, #31
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d09b      	beq.n	8004778 <HAL_RCC_OscConfig+0xbf4>
 8004840:	e0ad      	b.n	800499e <HAL_RCC_OscConfig+0xe1a>
 8004842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004846:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800484a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	fa93 f2a3 	rbit	r2, r3
 8004856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800485a:	601a      	str	r2, [r3, #0]
  return result;
 800485c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004860:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800486c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fd ff98 	bl	80027ac <HAL_GetTick>
 800487c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004880:	e009      	b.n	8004896 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fd ff93 	bl	80027ac <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e084      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
 8004896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800489a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800489e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	fa93 f2a3 	rbit	r2, r3
 80048aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048ae:	601a      	str	r2, [r3, #0]
  return result;
 80048b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d102      	bne.n	80048d0 <HAL_RCC_OscConfig+0xd4c>
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_RCC_OscConfig+0xe28>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	e01b      	b.n	8004908 <HAL_RCC_OscConfig+0xd84>
 80048d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	fa93 f2a3 	rbit	r2, r3
 80048e4:	f107 0320 	add.w	r3, r7, #32
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f107 031c 	add.w	r3, r7, #28
 80048ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f107 031c 	add.w	r3, r7, #28
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	fa93 f2a3 	rbit	r2, r3
 80048fe:	f107 0318 	add.w	r3, r7, #24
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_OscConfig+0xe28>)
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f107 0214 	add.w	r2, r7, #20
 800490c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004910:	6011      	str	r1, [r2, #0]
 8004912:	f107 0214 	add.w	r2, r7, #20
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	fa92 f1a2 	rbit	r1, r2
 800491c:	f107 0210 	add.w	r2, r7, #16
 8004920:	6011      	str	r1, [r2, #0]
  return result;
 8004922:	f107 0210 	add.w	r2, r7, #16
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	fab2 f282 	clz	r2, r2
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	f042 0220 	orr.w	r2, r2, #32
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	f002 021f 	and.w	r2, r2, #31
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f202 	lsl.w	r2, r1, r2
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d19e      	bne.n	8004882 <HAL_RCC_OscConfig+0xcfe>
 8004944:	e02b      	b.n	800499e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e025      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004954:	4b15      	ldr	r3, [pc, #84]	; (80049ac <HAL_RCC_OscConfig+0xe28>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCC_OscConfig+0xe28>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004968:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	429a      	cmp	r2, r3
 8004974:	d111      	bne.n	800499a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004976:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800497a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004984:	429a      	cmp	r2, r3
 8004986:	d108      	bne.n	800499a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004996:	429a      	cmp	r2, r3
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000

080049b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b09e      	sub	sp, #120	; 0x78
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e162      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b90      	ldr	r3, [pc, #576]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 0207 	bic.w	r2, r3, #7
 80049de:	498b      	ldr	r1, [pc, #556]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e14a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	497f      	ldr	r1, [pc, #508]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80dc 	beq.w	8004bdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d13c      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xf6>
 8004a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d102      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xa6>
 8004a50:	4b6f      	ldr	r3, [pc, #444]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	e00f      	b.n	8004a76 <HAL_RCC_ClockConfig+0xc6>
 8004a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	667b      	str	r3, [r7, #100]	; 0x64
 8004a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
 8004a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a72:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a7e:	fa92 f2a2 	rbit	r2, r2
 8004a82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a86:	fab2 f282 	clz	r2, r2
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f042 0220 	orr.w	r2, r2, #32
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	f002 021f 	and.w	r2, r2, #31
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d17b      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0f3      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d13c      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x178>
 8004aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d102      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x128>
 8004ad2:	4b4f      	ldr	r3, [pc, #316]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	e00f      	b.n	8004af8 <HAL_RCC_ClockConfig+0x148>
 8004ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aea:	643b      	str	r3, [r7, #64]	; 0x40
 8004aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af4:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8004afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b00:	fa92 f2a2 	rbit	r2, r2
 8004b04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b08:	fab2 f282 	clz	r2, r2
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	f042 0220 	orr.w	r2, r2, #32
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	f002 021f 	and.w	r2, r2, #31
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d13a      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0b2      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d102      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1a0>
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	e00d      	b.n	8004b6c <HAL_RCC_ClockConfig+0x1bc>
 8004b50:	2302      	movs	r3, #2
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	fa93 f3a3 	rbit	r3, r3
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	61ba      	str	r2, [r7, #24]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	fa92 f2a2 	rbit	r2, r2
 8004b76:	617a      	str	r2, [r7, #20]
  return result;
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	fab2 f282 	clz	r2, r2
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	f042 0220 	orr.w	r2, r2, #32
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	f002 021f 	and.w	r2, r2, #31
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e079      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f023 0203 	bic.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	491a      	ldr	r1, [pc, #104]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bac:	f7fd fdfe 	bl	80027ac <HAL_GetTick>
 8004bb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fd fdfa 	bl	80027ac <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e061      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 020c 	and.w	r2, r3, #12
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d1eb      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d214      	bcs.n	8004c14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	4906      	ldr	r1, [pc, #24]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e040      	b.n	8004c8e <HAL_RCC_ClockConfig+0x2de>
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCC_ClockConfig+0x2e8>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	491a      	ldr	r1, [pc, #104]	; (8004c98 <HAL_RCC_ClockConfig+0x2e8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c3e:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <HAL_RCC_ClockConfig+0x2e8>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4912      	ldr	r1, [pc, #72]	; (8004c98 <HAL_RCC_ClockConfig+0x2e8>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c52:	f000 f829 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004c56:	4601      	mov	r1, r0
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_RCC_ClockConfig+0x2e8>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c60:	22f0      	movs	r2, #240	; 0xf0
 8004c62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	fa92 f2a2 	rbit	r2, r2
 8004c6a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	fab2 f282 	clz	r2, r2
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	40d3      	lsrs	r3, r2
 8004c76:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <HAL_RCC_ClockConfig+0x2ec>)
 8004c78:	5cd3      	ldrb	r3, [r2, r3]
 8004c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_RCC_ClockConfig+0x2f0>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <HAL_RCC_ClockConfig+0x2f4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd fd4c 	bl	8002724 <HAL_InitTick>
  
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3778      	adds	r7, #120	; 0x78
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	0800b2ac 	.word	0x0800b2ac
 8004ca0:	20000008 	.word	0x20000008
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b08b      	sub	sp, #44	; 0x2c
 8004cac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d002      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x30>
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d003      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0x36>
 8004cd6:	e03f      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cda:	623b      	str	r3, [r7, #32]
      break;
 8004cdc:	e03f      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004ce4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ce8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	fa92 f2a2 	rbit	r2, r2
 8004cf0:	607a      	str	r2, [r7, #4]
  return result;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	fab2 f282 	clz	r2, r2
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	40d3      	lsrs	r3, r2
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cfe:	5cd3      	ldrb	r3, [r2, r3]
 8004d00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d02:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	220f      	movs	r2, #15
 8004d0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	fa92 f2a2 	rbit	r2, r2
 8004d14:	60fa      	str	r2, [r7, #12]
  return result;
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	40d3      	lsrs	r3, r2
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d30:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d40:	e007      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d42:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	623b      	str	r3, [r7, #32]
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d5a:	623b      	str	r3, [r7, #32]
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	372c      	adds	r7, #44	; 0x2c
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	007a1200 	.word	0x007a1200
 8004d74:	0800b2c4 	.word	0x0800b2c4
 8004d78:	0800b2d4 	.word	0x0800b2d4

08004d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000008 	.word	0x20000008

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d9a:	f7ff ffef 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004d9e:	4601      	mov	r1, r0
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004da8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	fa92 f2a2 	rbit	r2, r2
 8004db4:	603a      	str	r2, [r7, #0]
  return result;
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	fab2 f282 	clz	r2, r2
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	40d3      	lsrs	r3, r2
 8004dc0:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004dc2:	5cd3      	ldrb	r3, [r2, r3]
 8004dc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800b2bc 	.word	0x0800b2bc

08004dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004dde:	f7ff ffcd 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004de2:	4601      	mov	r1, r0
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004dec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	fa92 f2a2 	rbit	r2, r2
 8004df8:	603a      	str	r2, [r7, #0]
  return result;
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	fab2 f282 	clz	r2, r2
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	40d3      	lsrs	r3, r2
 8004e04:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004e06:	5cd3      	ldrb	r3, [r2, r3]
 8004e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	0800b2bc 	.word	0x0800b2bc

08004e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b092      	sub	sp, #72	; 0x48
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80d4 	beq.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e40:	4b4e      	ldr	r3, [pc, #312]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10e      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4c:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4a4a      	ldr	r2, [pc, #296]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	61d3      	str	r3, [r2, #28]
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d118      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e76:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a41      	ldr	r2, [pc, #260]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e82:	f7fd fc93 	bl	80027ac <HAL_GetTick>
 8004e86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	e008      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8a:	f7fd fc8f 	bl	80027ac <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b64      	cmp	r3, #100	; 0x64
 8004e96:	d901      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1d6      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ea8:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8084 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d07c      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec8:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	461a      	mov	r2, r3
 8004f16:	2300      	movs	r3, #0
 8004f18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04b      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd fc3f 	bl	80027ac <HAL_GetTick>
 8004f2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fd fc3b 	bl	80027ac <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e180      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	fa93 f3a3 	rbit	r3, r3
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	2302      	movs	r3, #2
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	61fb      	str	r3, [r7, #28]
  return result;
 8004f60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d108      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f76:	4b01      	ldr	r3, [pc, #4]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	e00d      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
 8004f84:	10908100 	.word	0x10908100
 8004f88:	2302      	movs	r3, #2
 8004f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	fa93 f3a3 	rbit	r3, r3
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	4ba0      	ldr	r3, [pc, #640]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2202      	movs	r2, #2
 8004f9a:	613a      	str	r2, [r7, #16]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	fa92 f2a2 	rbit	r2, r2
 8004fa2:	60fa      	str	r2, [r7, #12]
  return result;
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	fab2 f282 	clz	r2, r2
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	f002 021f 	and.w	r2, r2, #31
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0b7      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004fc2:	4b95      	ldr	r3, [pc, #596]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4992      	ldr	r1, [pc, #584]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b8e      	ldr	r3, [pc, #568]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	4a8d      	ldr	r2, [pc, #564]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ff4:	4b88      	ldr	r3, [pc, #544]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	f023 0203 	bic.w	r2, r3, #3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4985      	ldr	r1, [pc, #532]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005012:	4b81      	ldr	r3, [pc, #516]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	497e      	ldr	r1, [pc, #504]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005030:	4b79      	ldr	r3, [pc, #484]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	4976      	ldr	r1, [pc, #472]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800504e:	4b72      	ldr	r3, [pc, #456]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f023 0210 	bic.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	496f      	ldr	r1, [pc, #444]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800505c:	4313      	orrs	r3, r2
 800505e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800506c:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	4967      	ldr	r1, [pc, #412]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800508a:	4b63      	ldr	r3, [pc, #396]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	f023 0220 	bic.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4960      	ldr	r1, [pc, #384]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050a8:	4b5b      	ldr	r3, [pc, #364]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	4958      	ldr	r1, [pc, #352]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050c6:	4b54      	ldr	r3, [pc, #336]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	4951      	ldr	r1, [pc, #324]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050e4:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	4949      	ldr	r1, [pc, #292]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d008      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005102:	4b45      	ldr	r3, [pc, #276]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4942      	ldr	r1, [pc, #264]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005120:	4b3d      	ldr	r3, [pc, #244]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	493a      	ldr	r1, [pc, #232]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	4933      	ldr	r1, [pc, #204]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800515c:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	492b      	ldr	r1, [pc, #172]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800517a:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4924      	ldr	r1, [pc, #144]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005198:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	491c      	ldr	r1, [pc, #112]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80051b6:	4b18      	ldr	r3, [pc, #96]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	4915      	ldr	r1, [pc, #84]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	490d      	ldr	r1, [pc, #52]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d008      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fe:	4906      	ldr	r1, [pc, #24]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005200:	4313      	orrs	r3, r2
 8005202:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	490b      	ldr	r1, [pc, #44]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005226:	4313      	orrs	r3, r2
 8005228:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005244:	4313      	orrs	r3, r2
 8005246:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3748      	adds	r7, #72	; 0x48
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000

08005258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e049      	b.n	80052fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fd f866 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f000 fa1c 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d001      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e04f      	b.n	80053c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <HAL_TIM_Base_Start_IT+0xc4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <HAL_TIM_Base_Start_IT+0x76>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d018      	beq.n	800537e <HAL_TIM_Base_Start_IT+0x76>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_TIM_Base_Start_IT+0x76>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_TIM_Base_Start_IT+0x76>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_TIM_Base_Start_IT+0x76>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIM_Base_Start_IT+0x76>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d115      	bne.n	80053aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005386:	4013      	ands	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b06      	cmp	r3, #6
 800538e:	d015      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0xb4>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005396:	d011      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a8:	e008      	b.n	80053bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e000      	b.n	80053be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40015000 	.word	0x40015000
 80053e4:	00010007 	.word	0x00010007

080053e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	f241 1311 	movw	r3, #4369	; 0x1111
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10f      	bne.n	8005430 <HAL_TIM_Base_Stop_IT+0x48>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	f240 4344 	movw	r3, #1092	; 0x444
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d107      	bne.n	8005430 <HAL_TIM_Base_Stop_IT+0x48>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b02      	cmp	r3, #2
 800545a:	d122      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d11b      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0202 	mvn.w	r2, #2
 8005472:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f905 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 800548e:	e005      	b.n	800549c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8f7 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f908 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d122      	bne.n	80054f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d11b      	bne.n	80054f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0204 	mvn.w	r2, #4
 80054c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f8db 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 80054e2:	e005      	b.n	80054f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8cd 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8de 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d122      	bne.n	800554a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b08      	cmp	r3, #8
 8005510:	d11b      	bne.n	800554a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0208 	mvn.w	r2, #8
 800551a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2204      	movs	r2, #4
 8005520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8b1 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 8005536:	e005      	b.n	8005544 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8a3 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8b4 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d122      	bne.n	800559e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b10      	cmp	r3, #16
 8005564:	d11b      	bne.n	800559e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0210 	mvn.w	r2, #16
 800556e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2208      	movs	r2, #8
 8005574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f887 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 800558a:	e005      	b.n	8005598 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f879 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f88a 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d10e      	bne.n	80055ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0201 	mvn.w	r2, #1
 80055c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fc faa9 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b80      	cmp	r3, #128	; 0x80
 80055d6:	d10e      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9a3 	bl	800593c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005604:	d10e      	bne.n	8005624 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f996 	bl	8005950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f838 	bl	80056c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b20      	cmp	r3, #32
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0220 	mvn.w	r2, #32
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f956 	bl	8005928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a42      	ldr	r2, [pc, #264]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d00f      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3f      	ldr	r2, [pc, #252]	; (80057f4 <TIM_Base_SetConfig+0x120>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3e      	ldr	r2, [pc, #248]	; (80057f8 <TIM_Base_SetConfig+0x124>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3d      	ldr	r2, [pc, #244]	; (80057fc <TIM_Base_SetConfig+0x128>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <TIM_Base_SetConfig+0x12c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d108      	bne.n	8005726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a31      	ldr	r2, [pc, #196]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d01f      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d01b      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2e      	ldr	r2, [pc, #184]	; (80057f4 <TIM_Base_SetConfig+0x120>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d017      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <TIM_Base_SetConfig+0x124>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <TIM_Base_SetConfig+0x128>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <TIM_Base_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2b      	ldr	r2, [pc, #172]	; (8005808 <TIM_Base_SetConfig+0x134>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2a      	ldr	r2, [pc, #168]	; (800580c <TIM_Base_SetConfig+0x138>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <TIM_Base_SetConfig+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <TIM_Base_SetConfig+0x100>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a13      	ldr	r2, [pc, #76]	; (80057fc <TIM_Base_SetConfig+0x128>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00f      	beq.n	80057d4 <TIM_Base_SetConfig+0x100>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a13      	ldr	r2, [pc, #76]	; (8005804 <TIM_Base_SetConfig+0x130>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <TIM_Base_SetConfig+0x100>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a12      	ldr	r2, [pc, #72]	; (8005808 <TIM_Base_SetConfig+0x134>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d007      	beq.n	80057d4 <TIM_Base_SetConfig+0x100>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a11      	ldr	r2, [pc, #68]	; (800580c <TIM_Base_SetConfig+0x138>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0x100>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <TIM_Base_SetConfig+0x12c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40013400 	.word	0x40013400
 8005800:	40015000 	.word	0x40015000
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800

08005810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005824:	2302      	movs	r3, #2
 8005826:	e06d      	b.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a30      	ldr	r2, [pc, #192]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d108      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800586c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01d      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d018      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a15      	ldr	r2, [pc, #84]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a16      	ldr	r2, [pc, #88]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a11      	ldr	r2, [pc, #68]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40015000 	.word	0x40015000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40014000 	.word	0x40014000

08005928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e040      	b.n	80059f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc fd24 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2224      	movs	r2, #36	; 0x24
 8005990:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f82c 	bl	8005a00 <UART_SetConfig>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e022      	b.n	80059f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f9f6 	bl	8005dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa7d 	bl	8005ef0 <UART_CheckIdleState>
 80059f6:	4603      	mov	r3, r0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4bab      	ldr	r3, [pc, #684]	; (8005cd8 <UART_SetConfig+0x2d8>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a99      	ldr	r2, [pc, #612]	; (8005cdc <UART_SetConfig+0x2dc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d120      	bne.n	8005abe <UART_SetConfig+0xbe>
 8005a7c:	4b98      	ldr	r3, [pc, #608]	; (8005ce0 <UART_SetConfig+0x2e0>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d817      	bhi.n	8005ab8 <UART_SetConfig+0xb8>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x90>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab3 	.word	0x08005ab3
 8005a9c:	08005aa7 	.word	0x08005aa7
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e0b5      	b.n	8005c12 <UART_SetConfig+0x212>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e0b2      	b.n	8005c12 <UART_SetConfig+0x212>
 8005aac:	2304      	movs	r3, #4
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e0af      	b.n	8005c12 <UART_SetConfig+0x212>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e0ac      	b.n	8005c12 <UART_SetConfig+0x212>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e0a9      	b.n	8005c12 <UART_SetConfig+0x212>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a88      	ldr	r2, [pc, #544]	; (8005ce4 <UART_SetConfig+0x2e4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d124      	bne.n	8005b12 <UART_SetConfig+0x112>
 8005ac8:	4b85      	ldr	r3, [pc, #532]	; (8005ce0 <UART_SetConfig+0x2e0>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ad4:	d011      	beq.n	8005afa <UART_SetConfig+0xfa>
 8005ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ada:	d817      	bhi.n	8005b0c <UART_SetConfig+0x10c>
 8005adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae0:	d011      	beq.n	8005b06 <UART_SetConfig+0x106>
 8005ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae6:	d811      	bhi.n	8005b0c <UART_SetConfig+0x10c>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <UART_SetConfig+0xf4>
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af0:	d006      	beq.n	8005b00 <UART_SetConfig+0x100>
 8005af2:	e00b      	b.n	8005b0c <UART_SetConfig+0x10c>
 8005af4:	2300      	movs	r3, #0
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e08b      	b.n	8005c12 <UART_SetConfig+0x212>
 8005afa:	2302      	movs	r3, #2
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e088      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b00:	2304      	movs	r3, #4
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e085      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b06:	2308      	movs	r3, #8
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e082      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e07f      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a74      	ldr	r2, [pc, #464]	; (8005ce8 <UART_SetConfig+0x2e8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d124      	bne.n	8005b66 <UART_SetConfig+0x166>
 8005b1c:	4b70      	ldr	r3, [pc, #448]	; (8005ce0 <UART_SetConfig+0x2e0>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b28:	d011      	beq.n	8005b4e <UART_SetConfig+0x14e>
 8005b2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b2e:	d817      	bhi.n	8005b60 <UART_SetConfig+0x160>
 8005b30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b34:	d011      	beq.n	8005b5a <UART_SetConfig+0x15a>
 8005b36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b3a:	d811      	bhi.n	8005b60 <UART_SetConfig+0x160>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <UART_SetConfig+0x148>
 8005b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b44:	d006      	beq.n	8005b54 <UART_SetConfig+0x154>
 8005b46:	e00b      	b.n	8005b60 <UART_SetConfig+0x160>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e061      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e05e      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b54:	2304      	movs	r3, #4
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e05b      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e058      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b60:	2310      	movs	r3, #16
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e055      	b.n	8005c12 <UART_SetConfig+0x212>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a60      	ldr	r2, [pc, #384]	; (8005cec <UART_SetConfig+0x2ec>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d124      	bne.n	8005bba <UART_SetConfig+0x1ba>
 8005b70:	4b5b      	ldr	r3, [pc, #364]	; (8005ce0 <UART_SetConfig+0x2e0>)
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b7c:	d011      	beq.n	8005ba2 <UART_SetConfig+0x1a2>
 8005b7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b82:	d817      	bhi.n	8005bb4 <UART_SetConfig+0x1b4>
 8005b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b88:	d011      	beq.n	8005bae <UART_SetConfig+0x1ae>
 8005b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8e:	d811      	bhi.n	8005bb4 <UART_SetConfig+0x1b4>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <UART_SetConfig+0x19c>
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d006      	beq.n	8005ba8 <UART_SetConfig+0x1a8>
 8005b9a:	e00b      	b.n	8005bb4 <UART_SetConfig+0x1b4>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e037      	b.n	8005c12 <UART_SetConfig+0x212>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e034      	b.n	8005c12 <UART_SetConfig+0x212>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e031      	b.n	8005c12 <UART_SetConfig+0x212>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e02e      	b.n	8005c12 <UART_SetConfig+0x212>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e02b      	b.n	8005c12 <UART_SetConfig+0x212>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a4c      	ldr	r2, [pc, #304]	; (8005cf0 <UART_SetConfig+0x2f0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d124      	bne.n	8005c0e <UART_SetConfig+0x20e>
 8005bc4:	4b46      	ldr	r3, [pc, #280]	; (8005ce0 <UART_SetConfig+0x2e0>)
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005bcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bd0:	d011      	beq.n	8005bf6 <UART_SetConfig+0x1f6>
 8005bd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bd6:	d817      	bhi.n	8005c08 <UART_SetConfig+0x208>
 8005bd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bdc:	d011      	beq.n	8005c02 <UART_SetConfig+0x202>
 8005bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be2:	d811      	bhi.n	8005c08 <UART_SetConfig+0x208>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <UART_SetConfig+0x1f0>
 8005be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bec:	d006      	beq.n	8005bfc <UART_SetConfig+0x1fc>
 8005bee:	e00b      	b.n	8005c08 <UART_SetConfig+0x208>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e00d      	b.n	8005c12 <UART_SetConfig+0x212>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e00a      	b.n	8005c12 <UART_SetConfig+0x212>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e007      	b.n	8005c12 <UART_SetConfig+0x212>
 8005c02:	2308      	movs	r3, #8
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e004      	b.n	8005c12 <UART_SetConfig+0x212>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e001      	b.n	8005c12 <UART_SetConfig+0x212>
 8005c0e:	2310      	movs	r3, #16
 8005c10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d16d      	bne.n	8005cf8 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8005c1c:	7ffb      	ldrb	r3, [r7, #31]
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d827      	bhi.n	8005c72 <UART_SetConfig+0x272>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x228>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7ff f8a2 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8005c50:	61b8      	str	r0, [r7, #24]
        break;
 8005c52:	e013      	b.n	8005c7c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7ff f8c0 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8005c58:	61b8      	str	r0, [r7, #24]
        break;
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <UART_SetConfig+0x2f4>)
 8005c5e:	61bb      	str	r3, [r7, #24]
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7ff f821 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8005c66:	61b8      	str	r0, [r7, #24]
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	61bb      	str	r3, [r7, #24]
        break;
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77bb      	strb	r3, [r7, #30]
        break;
 8005c7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8086 	beq.w	8005d90 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	005a      	lsls	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d916      	bls.n	8005cd0 <UART_SetConfig+0x2d0>
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d212      	bcs.n	8005cd0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f023 030f 	bic.w	r3, r3, #15
 8005cb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	89fa      	ldrh	r2, [r7, #14]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	e05f      	b.n	8005d90 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77bb      	strb	r3, [r7, #30]
 8005cd4:	e05c      	b.n	8005d90 <UART_SetConfig+0x390>
 8005cd6:	bf00      	nop
 8005cd8:	efff69f3 	.word	0xefff69f3
 8005cdc:	40013800 	.word	0x40013800
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40004400 	.word	0x40004400
 8005ce8:	40004800 	.word	0x40004800
 8005cec:	40004c00 	.word	0x40004c00
 8005cf0:	40005000 	.word	0x40005000
 8005cf4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cf8:	7ffb      	ldrb	r3, [r7, #31]
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d827      	bhi.n	8005d4e <UART_SetConfig+0x34e>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x304>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	08005d4f 	.word	0x08005d4f
 8005d14:	08005d3f 	.word	0x08005d3f
 8005d18:	08005d4f 	.word	0x08005d4f
 8005d1c:	08005d4f 	.word	0x08005d4f
 8005d20:	08005d4f 	.word	0x08005d4f
 8005d24:	08005d47 	.word	0x08005d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7ff f834 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8005d2c:	61b8      	str	r0, [r7, #24]
        break;
 8005d2e:	e013      	b.n	8005d58 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7ff f852 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8005d34:	61b8      	str	r0, [r7, #24]
        break;
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <UART_SetConfig+0x3a8>)
 8005d3a:	61bb      	str	r3, [r7, #24]
        break;
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3e:	f7fe ffb3 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8005d42:	61b8      	str	r0, [r7, #24]
        break;
 8005d44:	e008      	b.n	8005d58 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	61bb      	str	r3, [r7, #24]
        break;
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	77bb      	strb	r3, [r7, #30]
        break;
 8005d56:	bf00      	nop
    }

    if (pclk != 0U)
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085a      	lsrs	r2, r3, #1
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	441a      	add	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d908      	bls.n	8005d8c <UART_SetConfig+0x38c>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d204      	bcs.n	8005d8c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	60da      	str	r2, [r3, #12]
 8005d8a:	e001      	b.n	8005d90 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	007a1200 	.word	0x007a1200

08005dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01a      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eaa:	d10a      	bne.n	8005ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f00:	f7fc fc54 	bl	80027ac <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d10e      	bne.n	8005f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f82d 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e023      	b.n	8005f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d10e      	bne.n	8005f5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f817 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e00d      	b.n	8005f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f92:	e05e      	b.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d05a      	beq.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9c:	f7fc fc06 	bl	80027ac <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11b      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fc0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e043      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02c      	beq.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006006:	d124      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006010:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006020:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e00f      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	429a      	cmp	r2, r3
 800606e:	d091      	beq.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <__errno>:
 800607c:	4b01      	ldr	r3, [pc, #4]	; (8006084 <__errno+0x8>)
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	20000014 	.word	0x20000014

08006088 <__libc_init_array>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	4d0d      	ldr	r5, [pc, #52]	; (80060c0 <__libc_init_array+0x38>)
 800608c:	4c0d      	ldr	r4, [pc, #52]	; (80060c4 <__libc_init_array+0x3c>)
 800608e:	1b64      	subs	r4, r4, r5
 8006090:	10a4      	asrs	r4, r4, #2
 8006092:	2600      	movs	r6, #0
 8006094:	42a6      	cmp	r6, r4
 8006096:	d109      	bne.n	80060ac <__libc_init_array+0x24>
 8006098:	4d0b      	ldr	r5, [pc, #44]	; (80060c8 <__libc_init_array+0x40>)
 800609a:	4c0c      	ldr	r4, [pc, #48]	; (80060cc <__libc_init_array+0x44>)
 800609c:	f004 fd18 	bl	800aad0 <_init>
 80060a0:	1b64      	subs	r4, r4, r5
 80060a2:	10a4      	asrs	r4, r4, #2
 80060a4:	2600      	movs	r6, #0
 80060a6:	42a6      	cmp	r6, r4
 80060a8:	d105      	bne.n	80060b6 <__libc_init_array+0x2e>
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b0:	4798      	blx	r3
 80060b2:	3601      	adds	r6, #1
 80060b4:	e7ee      	b.n	8006094 <__libc_init_array+0xc>
 80060b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ba:	4798      	blx	r3
 80060bc:	3601      	adds	r6, #1
 80060be:	e7f2      	b.n	80060a6 <__libc_init_array+0x1e>
 80060c0:	0800b68c 	.word	0x0800b68c
 80060c4:	0800b68c 	.word	0x0800b68c
 80060c8:	0800b68c 	.word	0x0800b68c
 80060cc:	0800b694 	.word	0x0800b694

080060d0 <memset>:
 80060d0:	4402      	add	r2, r0
 80060d2:	4603      	mov	r3, r0
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d100      	bne.n	80060da <memset+0xa>
 80060d8:	4770      	bx	lr
 80060da:	f803 1b01 	strb.w	r1, [r3], #1
 80060de:	e7f9      	b.n	80060d4 <memset+0x4>

080060e0 <sprintf>:
 80060e0:	b40e      	push	{r1, r2, r3}
 80060e2:	b500      	push	{lr}
 80060e4:	b09c      	sub	sp, #112	; 0x70
 80060e6:	ab1d      	add	r3, sp, #116	; 0x74
 80060e8:	9002      	str	r0, [sp, #8]
 80060ea:	9006      	str	r0, [sp, #24]
 80060ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060f0:	4809      	ldr	r0, [pc, #36]	; (8006118 <sprintf+0x38>)
 80060f2:	9107      	str	r1, [sp, #28]
 80060f4:	9104      	str	r1, [sp, #16]
 80060f6:	4909      	ldr	r1, [pc, #36]	; (800611c <sprintf+0x3c>)
 80060f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fc:	9105      	str	r1, [sp, #20]
 80060fe:	6800      	ldr	r0, [r0, #0]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	a902      	add	r1, sp, #8
 8006104:	f000 f80c 	bl	8006120 <_svfprintf_r>
 8006108:	9b02      	ldr	r3, [sp, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	b01c      	add	sp, #112	; 0x70
 8006110:	f85d eb04 	ldr.w	lr, [sp], #4
 8006114:	b003      	add	sp, #12
 8006116:	4770      	bx	lr
 8006118:	20000014 	.word	0x20000014
 800611c:	ffff0208 	.word	0xffff0208

08006120 <_svfprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	ed2d 8b04 	vpush	{d8-d9}
 8006128:	b0cf      	sub	sp, #316	; 0x13c
 800612a:	4689      	mov	r9, r1
 800612c:	4693      	mov	fp, r2
 800612e:	461e      	mov	r6, r3
 8006130:	4682      	mov	sl, r0
 8006132:	f002 f96d 	bl	8008410 <_localeconv_r>
 8006136:	6803      	ldr	r3, [r0, #0]
 8006138:	9313      	str	r3, [sp, #76]	; 0x4c
 800613a:	4618      	mov	r0, r3
 800613c:	f7fa f8a0 	bl	8000280 <strlen>
 8006140:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006144:	900e      	str	r0, [sp, #56]	; 0x38
 8006146:	0618      	lsls	r0, r3, #24
 8006148:	d51a      	bpl.n	8006180 <_svfprintf_r+0x60>
 800614a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800614e:	b9bb      	cbnz	r3, 8006180 <_svfprintf_r+0x60>
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4650      	mov	r0, sl
 8006154:	f002 f964 	bl	8008420 <_malloc_r>
 8006158:	f8c9 0000 	str.w	r0, [r9]
 800615c:	f8c9 0010 	str.w	r0, [r9, #16]
 8006160:	b958      	cbnz	r0, 800617a <_svfprintf_r+0x5a>
 8006162:	230c      	movs	r3, #12
 8006164:	f8ca 3000 	str.w	r3, [sl]
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	930f      	str	r3, [sp, #60]	; 0x3c
 800616e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006170:	b04f      	add	sp, #316	; 0x13c
 8006172:	ecbd 8b04 	vpop	{d8-d9}
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	f8c9 3014 	str.w	r3, [r9, #20]
 8006180:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80063d0 <_svfprintf_r+0x2b0>
 8006184:	2500      	movs	r5, #0
 8006186:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800618a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800618e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8006192:	ac25      	add	r4, sp, #148	; 0x94
 8006194:	9422      	str	r4, [sp, #136]	; 0x88
 8006196:	9505      	str	r5, [sp, #20]
 8006198:	950a      	str	r5, [sp, #40]	; 0x28
 800619a:	9512      	str	r5, [sp, #72]	; 0x48
 800619c:	9514      	str	r5, [sp, #80]	; 0x50
 800619e:	950f      	str	r5, [sp, #60]	; 0x3c
 80061a0:	465b      	mov	r3, fp
 80061a2:	461d      	mov	r5, r3
 80061a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a8:	b10a      	cbz	r2, 80061ae <_svfprintf_r+0x8e>
 80061aa:	2a25      	cmp	r2, #37	; 0x25
 80061ac:	d1f9      	bne.n	80061a2 <_svfprintf_r+0x82>
 80061ae:	ebb5 070b 	subs.w	r7, r5, fp
 80061b2:	d00d      	beq.n	80061d0 <_svfprintf_r+0xb0>
 80061b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80061b6:	443b      	add	r3, r7
 80061b8:	9324      	str	r3, [sp, #144]	; 0x90
 80061ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061bc:	3301      	adds	r3, #1
 80061be:	2b07      	cmp	r3, #7
 80061c0:	e9c4 b700 	strd	fp, r7, [r4]
 80061c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80061c6:	dc79      	bgt.n	80062bc <_svfprintf_r+0x19c>
 80061c8:	3408      	adds	r4, #8
 80061ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061cc:	443b      	add	r3, r7
 80061ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d0:	782b      	ldrb	r3, [r5, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f001 8140 	beq.w	8007458 <_svfprintf_r+0x1338>
 80061d8:	2300      	movs	r3, #0
 80061da:	f04f 32ff 	mov.w	r2, #4294967295
 80061de:	3501      	adds	r5, #1
 80061e0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80061e4:	9204      	str	r2, [sp, #16]
 80061e6:	9310      	str	r3, [sp, #64]	; 0x40
 80061e8:	4698      	mov	r8, r3
 80061ea:	270a      	movs	r7, #10
 80061ec:	212b      	movs	r1, #43	; 0x2b
 80061ee:	462a      	mov	r2, r5
 80061f0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80061f8:	9b07      	ldr	r3, [sp, #28]
 80061fa:	3b20      	subs	r3, #32
 80061fc:	2b5a      	cmp	r3, #90	; 0x5a
 80061fe:	f200 85b4 	bhi.w	8006d6a <_svfprintf_r+0xc4a>
 8006202:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006206:	007e      	.short	0x007e
 8006208:	05b205b2 	.word	0x05b205b2
 800620c:	05b20086 	.word	0x05b20086
 8006210:	05b205b2 	.word	0x05b205b2
 8006214:	05b20065 	.word	0x05b20065
 8006218:	008905b2 	.word	0x008905b2
 800621c:	05b20093 	.word	0x05b20093
 8006220:	00960090 	.word	0x00960090
 8006224:	00b305b2 	.word	0x00b305b2
 8006228:	00b600b6 	.word	0x00b600b6
 800622c:	00b600b6 	.word	0x00b600b6
 8006230:	00b600b6 	.word	0x00b600b6
 8006234:	00b600b6 	.word	0x00b600b6
 8006238:	05b200b6 	.word	0x05b200b6
 800623c:	05b205b2 	.word	0x05b205b2
 8006240:	05b205b2 	.word	0x05b205b2
 8006244:	05b205b2 	.word	0x05b205b2
 8006248:	05b20127 	.word	0x05b20127
 800624c:	00fc00e9 	.word	0x00fc00e9
 8006250:	01270127 	.word	0x01270127
 8006254:	05b20127 	.word	0x05b20127
 8006258:	05b205b2 	.word	0x05b205b2
 800625c:	00c605b2 	.word	0x00c605b2
 8006260:	05b205b2 	.word	0x05b205b2
 8006264:	05b20492 	.word	0x05b20492
 8006268:	05b205b2 	.word	0x05b205b2
 800626c:	05b204d9 	.word	0x05b204d9
 8006270:	05b204fa 	.word	0x05b204fa
 8006274:	051905b2 	.word	0x051905b2
 8006278:	05b205b2 	.word	0x05b205b2
 800627c:	05b205b2 	.word	0x05b205b2
 8006280:	05b205b2 	.word	0x05b205b2
 8006284:	05b205b2 	.word	0x05b205b2
 8006288:	05b20127 	.word	0x05b20127
 800628c:	00fe00e9 	.word	0x00fe00e9
 8006290:	01270127 	.word	0x01270127
 8006294:	00c90127 	.word	0x00c90127
 8006298:	00dd00fe 	.word	0x00dd00fe
 800629c:	00d605b2 	.word	0x00d605b2
 80062a0:	046f05b2 	.word	0x046f05b2
 80062a4:	04c80494 	.word	0x04c80494
 80062a8:	05b200dd 	.word	0x05b200dd
 80062ac:	007c04d9 	.word	0x007c04d9
 80062b0:	05b204fc 	.word	0x05b204fc
 80062b4:	053605b2 	.word	0x053605b2
 80062b8:	007c05b2 	.word	0x007c05b2
 80062bc:	aa22      	add	r2, sp, #136	; 0x88
 80062be:	4649      	mov	r1, r9
 80062c0:	4650      	mov	r0, sl
 80062c2:	f002 fe94 	bl	8008fee <__ssprint_r>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 8132 	bne.w	8006530 <_svfprintf_r+0x410>
 80062cc:	ac25      	add	r4, sp, #148	; 0x94
 80062ce:	e77c      	b.n	80061ca <_svfprintf_r+0xaa>
 80062d0:	4650      	mov	r0, sl
 80062d2:	f002 f89d 	bl	8008410 <_localeconv_r>
 80062d6:	6843      	ldr	r3, [r0, #4]
 80062d8:	9314      	str	r3, [sp, #80]	; 0x50
 80062da:	4618      	mov	r0, r3
 80062dc:	f7f9 ffd0 	bl	8000280 <strlen>
 80062e0:	9012      	str	r0, [sp, #72]	; 0x48
 80062e2:	4650      	mov	r0, sl
 80062e4:	f002 f894 	bl	8008410 <_localeconv_r>
 80062e8:	6883      	ldr	r3, [r0, #8]
 80062ea:	930a      	str	r3, [sp, #40]	; 0x28
 80062ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ee:	212b      	movs	r1, #43	; 0x2b
 80062f0:	b12b      	cbz	r3, 80062fe <_svfprintf_r+0x1de>
 80062f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f4:	b11b      	cbz	r3, 80062fe <_svfprintf_r+0x1de>
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b10b      	cbz	r3, 80062fe <_svfprintf_r+0x1de>
 80062fa:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 80062fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006300:	e775      	b.n	80061ee <_svfprintf_r+0xce>
 8006302:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f9      	bne.n	80062fe <_svfprintf_r+0x1de>
 800630a:	2320      	movs	r3, #32
 800630c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006310:	e7f5      	b.n	80062fe <_svfprintf_r+0x1de>
 8006312:	f048 0801 	orr.w	r8, r8, #1
 8006316:	e7f2      	b.n	80062fe <_svfprintf_r+0x1de>
 8006318:	f856 3b04 	ldr.w	r3, [r6], #4
 800631c:	9310      	str	r3, [sp, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	daed      	bge.n	80062fe <_svfprintf_r+0x1de>
 8006322:	425b      	negs	r3, r3
 8006324:	9310      	str	r3, [sp, #64]	; 0x40
 8006326:	f048 0804 	orr.w	r8, r8, #4
 800632a:	e7e8      	b.n	80062fe <_svfprintf_r+0x1de>
 800632c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8006330:	e7e5      	b.n	80062fe <_svfprintf_r+0x1de>
 8006332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006334:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006338:	9307      	str	r3, [sp, #28]
 800633a:	2b2a      	cmp	r3, #42	; 0x2a
 800633c:	d113      	bne.n	8006366 <_svfprintf_r+0x246>
 800633e:	f856 0b04 	ldr.w	r0, [r6], #4
 8006342:	920b      	str	r2, [sp, #44]	; 0x2c
 8006344:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006348:	9304      	str	r3, [sp, #16]
 800634a:	e7d8      	b.n	80062fe <_svfprintf_r+0x1de>
 800634c:	9804      	ldr	r0, [sp, #16]
 800634e:	fb07 3300 	mla	r3, r7, r0, r3
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006358:	9307      	str	r3, [sp, #28]
 800635a:	9b07      	ldr	r3, [sp, #28]
 800635c:	3b30      	subs	r3, #48	; 0x30
 800635e:	2b09      	cmp	r3, #9
 8006360:	d9f4      	bls.n	800634c <_svfprintf_r+0x22c>
 8006362:	920b      	str	r2, [sp, #44]	; 0x2c
 8006364:	e748      	b.n	80061f8 <_svfprintf_r+0xd8>
 8006366:	2300      	movs	r3, #0
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	e7f6      	b.n	800635a <_svfprintf_r+0x23a>
 800636c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8006370:	e7c5      	b.n	80062fe <_svfprintf_r+0x1de>
 8006372:	2300      	movs	r3, #0
 8006374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006376:	9310      	str	r3, [sp, #64]	; 0x40
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800637c:	3b30      	subs	r3, #48	; 0x30
 800637e:	fb07 3300 	mla	r3, r7, r0, r3
 8006382:	9310      	str	r3, [sp, #64]	; 0x40
 8006384:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006388:	9307      	str	r3, [sp, #28]
 800638a:	3b30      	subs	r3, #48	; 0x30
 800638c:	2b09      	cmp	r3, #9
 800638e:	d9f3      	bls.n	8006378 <_svfprintf_r+0x258>
 8006390:	e7e7      	b.n	8006362 <_svfprintf_r+0x242>
 8006392:	f048 0808 	orr.w	r8, r8, #8
 8006396:	e7b2      	b.n	80062fe <_svfprintf_r+0x1de>
 8006398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b68      	cmp	r3, #104	; 0x68
 800639e:	bf01      	itttt	eq
 80063a0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80063a2:	3301      	addeq	r3, #1
 80063a4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80063a6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80063aa:	bf18      	it	ne
 80063ac:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80063b0:	e7a5      	b.n	80062fe <_svfprintf_r+0x1de>
 80063b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b6c      	cmp	r3, #108	; 0x6c
 80063b8:	d105      	bne.n	80063c6 <_svfprintf_r+0x2a6>
 80063ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063bc:	3301      	adds	r3, #1
 80063be:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c0:	f048 0820 	orr.w	r8, r8, #32
 80063c4:	e79b      	b.n	80062fe <_svfprintf_r+0x1de>
 80063c6:	f048 0810 	orr.w	r8, r8, #16
 80063ca:	e798      	b.n	80062fe <_svfprintf_r+0x1de>
 80063cc:	f3af 8000 	nop.w
	...
 80063d8:	4632      	mov	r2, r6
 80063da:	2000      	movs	r0, #0
 80063dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80063e0:	9206      	str	r2, [sp, #24]
 80063e2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80063e6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80063ea:	2301      	movs	r3, #1
 80063ec:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80063f0:	9003      	str	r0, [sp, #12]
 80063f2:	9304      	str	r3, [sp, #16]
 80063f4:	4606      	mov	r6, r0
 80063f6:	4605      	mov	r5, r0
 80063f8:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 80063fc:	e1b8      	b.n	8006770 <_svfprintf_r+0x650>
 80063fe:	f048 0810 	orr.w	r8, r8, #16
 8006402:	f018 0f20 	tst.w	r8, #32
 8006406:	d012      	beq.n	800642e <_svfprintf_r+0x30e>
 8006408:	3607      	adds	r6, #7
 800640a:	f026 0307 	bic.w	r3, r6, #7
 800640e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006412:	9306      	str	r3, [sp, #24]
 8006414:	2e00      	cmp	r6, #0
 8006416:	f177 0300 	sbcs.w	r3, r7, #0
 800641a:	da06      	bge.n	800642a <_svfprintf_r+0x30a>
 800641c:	4276      	negs	r6, r6
 800641e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006422:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006426:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800642a:	2301      	movs	r3, #1
 800642c:	e38e      	b.n	8006b4c <_svfprintf_r+0xa2c>
 800642e:	1d33      	adds	r3, r6, #4
 8006430:	f018 0f10 	tst.w	r8, #16
 8006434:	9306      	str	r3, [sp, #24]
 8006436:	d002      	beq.n	800643e <_svfprintf_r+0x31e>
 8006438:	6836      	ldr	r6, [r6, #0]
 800643a:	17f7      	asrs	r7, r6, #31
 800643c:	e7ea      	b.n	8006414 <_svfprintf_r+0x2f4>
 800643e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006442:	6836      	ldr	r6, [r6, #0]
 8006444:	d001      	beq.n	800644a <_svfprintf_r+0x32a>
 8006446:	b236      	sxth	r6, r6
 8006448:	e7f7      	b.n	800643a <_svfprintf_r+0x31a>
 800644a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800644e:	bf18      	it	ne
 8006450:	b276      	sxtbne	r6, r6
 8006452:	e7f2      	b.n	800643a <_svfprintf_r+0x31a>
 8006454:	3607      	adds	r6, #7
 8006456:	f026 0307 	bic.w	r3, r6, #7
 800645a:	ecb3 7b02 	vldmia	r3!, {d7}
 800645e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006462:	9306      	str	r3, [sp, #24]
 8006464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006466:	ee09 3a10 	vmov	s18, r3
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006470:	ee09 3a90 	vmov	s19, r3
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	4b3a      	ldr	r3, [pc, #232]	; (8006564 <_svfprintf_r+0x444>)
 800647a:	ec51 0b19 	vmov	r0, r1, d9
 800647e:	f7fa fb5d 	bl	8000b3c <__aeabi_dcmpun>
 8006482:	bb10      	cbnz	r0, 80064ca <_svfprintf_r+0x3aa>
 8006484:	4b37      	ldr	r3, [pc, #220]	; (8006564 <_svfprintf_r+0x444>)
 8006486:	ec51 0b19 	vmov	r0, r1, d9
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	f7fa fb37 	bl	8000b00 <__aeabi_dcmple>
 8006492:	b9d0      	cbnz	r0, 80064ca <_svfprintf_r+0x3aa>
 8006494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	f7fa fb26 	bl	8000aec <__aeabi_dcmplt>
 80064a0:	b110      	cbz	r0, 80064a8 <_svfprintf_r+0x388>
 80064a2:	232d      	movs	r3, #45	; 0x2d
 80064a4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80064a8:	4a2f      	ldr	r2, [pc, #188]	; (8006568 <_svfprintf_r+0x448>)
 80064aa:	4830      	ldr	r0, [pc, #192]	; (800656c <_svfprintf_r+0x44c>)
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	2100      	movs	r1, #0
 80064b0:	2b47      	cmp	r3, #71	; 0x47
 80064b2:	bfd4      	ite	le
 80064b4:	4693      	movle	fp, r2
 80064b6:	4683      	movgt	fp, r0
 80064b8:	2303      	movs	r3, #3
 80064ba:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80064be:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80064c2:	2600      	movs	r6, #0
 80064c4:	4633      	mov	r3, r6
 80064c6:	f001 b802 	b.w	80074ce <_svfprintf_r+0x13ae>
 80064ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	f7fa fb33 	bl	8000b3c <__aeabi_dcmpun>
 80064d6:	b140      	cbz	r0, 80064ea <_svfprintf_r+0x3ca>
 80064d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064da:	4a25      	ldr	r2, [pc, #148]	; (8006570 <_svfprintf_r+0x450>)
 80064dc:	4825      	ldr	r0, [pc, #148]	; (8006574 <_svfprintf_r+0x454>)
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfbc      	itt	lt
 80064e2:	232d      	movlt	r3, #45	; 0x2d
 80064e4:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80064e8:	e7e0      	b.n	80064ac <_svfprintf_r+0x38c>
 80064ea:	9b07      	ldr	r3, [sp, #28]
 80064ec:	f023 0320 	bic.w	r3, r3, #32
 80064f0:	2b41      	cmp	r3, #65	; 0x41
 80064f2:	9308      	str	r3, [sp, #32]
 80064f4:	d125      	bne.n	8006542 <_svfprintf_r+0x422>
 80064f6:	2330      	movs	r3, #48	; 0x30
 80064f8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	2b61      	cmp	r3, #97	; 0x61
 8006500:	bf0c      	ite	eq
 8006502:	2378      	moveq	r3, #120	; 0x78
 8006504:	2358      	movne	r3, #88	; 0x58
 8006506:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800650a:	9b04      	ldr	r3, [sp, #16]
 800650c:	2b63      	cmp	r3, #99	; 0x63
 800650e:	f048 0802 	orr.w	r8, r8, #2
 8006512:	dd31      	ble.n	8006578 <_svfprintf_r+0x458>
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	4650      	mov	r0, sl
 8006518:	f001 ff82 	bl	8008420 <_malloc_r>
 800651c:	4683      	mov	fp, r0
 800651e:	2800      	cmp	r0, #0
 8006520:	f040 81fe 	bne.w	8006920 <_svfprintf_r+0x800>
 8006524:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006530:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006534:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800653a:	bf18      	it	ne
 800653c:	f04f 33ff 	movne.w	r3, #4294967295
 8006540:	e614      	b.n	800616c <_svfprintf_r+0x4c>
 8006542:	9b04      	ldr	r3, [sp, #16]
 8006544:	3301      	adds	r3, #1
 8006546:	f000 81ed 	beq.w	8006924 <_svfprintf_r+0x804>
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	2b47      	cmp	r3, #71	; 0x47
 800654e:	f040 81ec 	bne.w	800692a <_svfprintf_r+0x80a>
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 81e8 	bne.w	800692a <_svfprintf_r+0x80a>
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	2301      	movs	r3, #1
 800655e:	9304      	str	r3, [sp, #16]
 8006560:	e00d      	b.n	800657e <_svfprintf_r+0x45e>
 8006562:	bf00      	nop
 8006564:	7fefffff 	.word	0x7fefffff
 8006568:	0800b2e8 	.word	0x0800b2e8
 800656c:	0800b2ec 	.word	0x0800b2ec
 8006570:	0800b2f0 	.word	0x0800b2f0
 8006574:	0800b2f4 	.word	0x0800b2f4
 8006578:	9003      	str	r0, [sp, #12]
 800657a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800657e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8006582:	9311      	str	r3, [sp, #68]	; 0x44
 8006584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	f280 81d1 	bge.w	800692e <_svfprintf_r+0x80e>
 800658c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800658e:	ee08 3a10 	vmov	s16, r3
 8006592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006594:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006598:	ee08 3a90 	vmov	s17, r3
 800659c:	232d      	movs	r3, #45	; 0x2d
 800659e:	9318      	str	r3, [sp, #96]	; 0x60
 80065a0:	9b08      	ldr	r3, [sp, #32]
 80065a2:	2b41      	cmp	r3, #65	; 0x41
 80065a4:	f040 81e1 	bne.w	800696a <_svfprintf_r+0x84a>
 80065a8:	eeb0 0a48 	vmov.f32	s0, s16
 80065ac:	eef0 0a68 	vmov.f32	s1, s17
 80065b0:	a81c      	add	r0, sp, #112	; 0x70
 80065b2:	f002 fcc1 	bl	8008f38 <frexp>
 80065b6:	2200      	movs	r2, #0
 80065b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80065bc:	ec51 0b10 	vmov	r0, r1, d0
 80065c0:	f7fa f822 	bl	8000608 <__aeabi_dmul>
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	f7fa fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d0:	b108      	cbz	r0, 80065d6 <_svfprintf_r+0x4b6>
 80065d2:	2301      	movs	r3, #1
 80065d4:	931c      	str	r3, [sp, #112]	; 0x70
 80065d6:	4bb4      	ldr	r3, [pc, #720]	; (80068a8 <_svfprintf_r+0x788>)
 80065d8:	4ab4      	ldr	r2, [pc, #720]	; (80068ac <_svfprintf_r+0x78c>)
 80065da:	9907      	ldr	r1, [sp, #28]
 80065dc:	2961      	cmp	r1, #97	; 0x61
 80065de:	bf18      	it	ne
 80065e0:	461a      	movne	r2, r3
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80065e6:	3b01      	subs	r3, #1
 80065e8:	9305      	str	r3, [sp, #20]
 80065ea:	465d      	mov	r5, fp
 80065ec:	4bb0      	ldr	r3, [pc, #704]	; (80068b0 <_svfprintf_r+0x790>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	4630      	mov	r0, r6
 80065f2:	4639      	mov	r1, r7
 80065f4:	f7fa f808 	bl	8000608 <__aeabi_dmul>
 80065f8:	460f      	mov	r7, r1
 80065fa:	4606      	mov	r6, r0
 80065fc:	f7fa fab4 	bl	8000b68 <__aeabi_d2iz>
 8006600:	9019      	str	r0, [sp, #100]	; 0x64
 8006602:	f7f9 ff97 	bl	8000534 <__aeabi_i2d>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7f9 fe43 	bl	8000298 <__aeabi_dsub>
 8006612:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006616:	5c9b      	ldrb	r3, [r3, r2]
 8006618:	f805 3b01 	strb.w	r3, [r5], #1
 800661c:	9b05      	ldr	r3, [sp, #20]
 800661e:	9309      	str	r3, [sp, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	d007      	beq.n	8006638 <_svfprintf_r+0x518>
 8006628:	3b01      	subs	r3, #1
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	f7fa fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8006634:	2800      	cmp	r0, #0
 8006636:	d0d9      	beq.n	80065ec <_svfprintf_r+0x4cc>
 8006638:	4b9e      	ldr	r3, [pc, #632]	; (80068b4 <_svfprintf_r+0x794>)
 800663a:	2200      	movs	r2, #0
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	f7fa fa72 	bl	8000b28 <__aeabi_dcmpgt>
 8006644:	b960      	cbnz	r0, 8006660 <_svfprintf_r+0x540>
 8006646:	4b9b      	ldr	r3, [pc, #620]	; (80068b4 <_svfprintf_r+0x794>)
 8006648:	2200      	movs	r2, #0
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7fa fa43 	bl	8000ad8 <__aeabi_dcmpeq>
 8006652:	2800      	cmp	r0, #0
 8006654:	f000 8184 	beq.w	8006960 <_svfprintf_r+0x840>
 8006658:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800665a:	07df      	lsls	r7, r3, #31
 800665c:	f140 8180 	bpl.w	8006960 <_svfprintf_r+0x840>
 8006660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006662:	9520      	str	r5, [sp, #128]	; 0x80
 8006664:	7bd9      	ldrb	r1, [r3, #15]
 8006666:	2030      	movs	r0, #48	; 0x30
 8006668:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800666a:	1e53      	subs	r3, r2, #1
 800666c:	9320      	str	r3, [sp, #128]	; 0x80
 800666e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006672:	428b      	cmp	r3, r1
 8006674:	f000 8163 	beq.w	800693e <_svfprintf_r+0x81e>
 8006678:	2b39      	cmp	r3, #57	; 0x39
 800667a:	bf0b      	itete	eq
 800667c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800667e:	3301      	addne	r3, #1
 8006680:	7a9b      	ldrbeq	r3, [r3, #10]
 8006682:	b2db      	uxtbne	r3, r3
 8006684:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006688:	eba5 030b 	sub.w	r3, r5, fp
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006692:	2b47      	cmp	r3, #71	; 0x47
 8006694:	f040 81b1 	bne.w	80069fa <_svfprintf_r+0x8da>
 8006698:	1cee      	adds	r6, r5, #3
 800669a:	db03      	blt.n	80066a4 <_svfprintf_r+0x584>
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	42ab      	cmp	r3, r5
 80066a0:	f280 81d6 	bge.w	8006a50 <_svfprintf_r+0x930>
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	3b02      	subs	r3, #2
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	9907      	ldr	r1, [sp, #28]
 80066ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80066b0:	f021 0120 	bic.w	r1, r1, #32
 80066b4:	2941      	cmp	r1, #65	; 0x41
 80066b6:	bf08      	it	eq
 80066b8:	320f      	addeq	r2, #15
 80066ba:	f105 33ff 	add.w	r3, r5, #4294967295
 80066be:	bf06      	itte	eq
 80066c0:	b2d2      	uxtbeq	r2, r2
 80066c2:	2101      	moveq	r1, #1
 80066c4:	2100      	movne	r1, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	931c      	str	r3, [sp, #112]	; 0x70
 80066ca:	bfb8      	it	lt
 80066cc:	f1c5 0301 	rsblt	r3, r5, #1
 80066d0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80066d4:	bfb4      	ite	lt
 80066d6:	222d      	movlt	r2, #45	; 0x2d
 80066d8:	222b      	movge	r2, #43	; 0x2b
 80066da:	2b09      	cmp	r3, #9
 80066dc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80066e0:	f340 81a4 	ble.w	8006a2c <_svfprintf_r+0x90c>
 80066e4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80066e8:	260a      	movs	r6, #10
 80066ea:	4611      	mov	r1, r2
 80066ec:	fb93 f5f6 	sdiv	r5, r3, r6
 80066f0:	fb06 3015 	mls	r0, r6, r5, r3
 80066f4:	3030      	adds	r0, #48	; 0x30
 80066f6:	f801 0c01 	strb.w	r0, [r1, #-1]
 80066fa:	4618      	mov	r0, r3
 80066fc:	2863      	cmp	r0, #99	; 0x63
 80066fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8006702:	462b      	mov	r3, r5
 8006704:	dcf1      	bgt.n	80066ea <_svfprintf_r+0x5ca>
 8006706:	3330      	adds	r3, #48	; 0x30
 8006708:	1e88      	subs	r0, r1, #2
 800670a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800670e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8006712:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006716:	4603      	mov	r3, r0
 8006718:	42ab      	cmp	r3, r5
 800671a:	f0c0 8182 	bcc.w	8006a22 <_svfprintf_r+0x902>
 800671e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8006722:	1a52      	subs	r2, r2, r1
 8006724:	42a8      	cmp	r0, r5
 8006726:	bf88      	it	hi
 8006728:	2200      	movhi	r2, #0
 800672a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800672e:	441a      	add	r2, r3
 8006730:	ab1e      	add	r3, sp, #120	; 0x78
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	9a05      	ldr	r2, [sp, #20]
 8006736:	9315      	str	r3, [sp, #84]	; 0x54
 8006738:	2a01      	cmp	r2, #1
 800673a:	4413      	add	r3, r2
 800673c:	9304      	str	r3, [sp, #16]
 800673e:	dc02      	bgt.n	8006746 <_svfprintf_r+0x626>
 8006740:	f018 0f01 	tst.w	r8, #1
 8006744:	d003      	beq.n	800674e <_svfprintf_r+0x62e>
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800674a:	4413      	add	r3, r2
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8006752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006756:	9311      	str	r3, [sp, #68]	; 0x44
 8006758:	2300      	movs	r3, #0
 800675a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800675e:	461d      	mov	r5, r3
 8006760:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006762:	b113      	cbz	r3, 800676a <_svfprintf_r+0x64a>
 8006764:	232d      	movs	r3, #45	; 0x2d
 8006766:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800676a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800676e:	2600      	movs	r6, #0
 8006770:	9b04      	ldr	r3, [sp, #16]
 8006772:	42b3      	cmp	r3, r6
 8006774:	bfb8      	it	lt
 8006776:	4633      	movlt	r3, r6
 8006778:	9311      	str	r3, [sp, #68]	; 0x44
 800677a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800677e:	b113      	cbz	r3, 8006786 <_svfprintf_r+0x666>
 8006780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006782:	3301      	adds	r3, #1
 8006784:	9311      	str	r3, [sp, #68]	; 0x44
 8006786:	f018 0302 	ands.w	r3, r8, #2
 800678a:	9317      	str	r3, [sp, #92]	; 0x5c
 800678c:	bf1e      	ittt	ne
 800678e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8006790:	3302      	addne	r3, #2
 8006792:	9311      	strne	r3, [sp, #68]	; 0x44
 8006794:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8006798:	9318      	str	r3, [sp, #96]	; 0x60
 800679a:	d11f      	bne.n	80067dc <_svfprintf_r+0x6bc>
 800679c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80067a0:	1a9f      	subs	r7, r3, r2
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	dd1a      	ble.n	80067dc <_svfprintf_r+0x6bc>
 80067a6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80067aa:	4843      	ldr	r0, [pc, #268]	; (80068b8 <_svfprintf_r+0x798>)
 80067ac:	6020      	str	r0, [r4, #0]
 80067ae:	2f10      	cmp	r7, #16
 80067b0:	f103 0301 	add.w	r3, r3, #1
 80067b4:	f104 0108 	add.w	r1, r4, #8
 80067b8:	f300 82e6 	bgt.w	8006d88 <_svfprintf_r+0xc68>
 80067bc:	6067      	str	r7, [r4, #4]
 80067be:	2b07      	cmp	r3, #7
 80067c0:	4417      	add	r7, r2
 80067c2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80067c6:	f340 82f2 	ble.w	8006dae <_svfprintf_r+0xc8e>
 80067ca:	aa22      	add	r2, sp, #136	; 0x88
 80067cc:	4649      	mov	r1, r9
 80067ce:	4650      	mov	r0, sl
 80067d0:	f002 fc0d 	bl	8008fee <__ssprint_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f040 861d 	bne.w	8007414 <_svfprintf_r+0x12f4>
 80067da:	ac25      	add	r4, sp, #148	; 0x94
 80067dc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80067e0:	b173      	cbz	r3, 8006800 <_svfprintf_r+0x6e0>
 80067e2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	2301      	movs	r3, #1
 80067ea:	6063      	str	r3, [r4, #4]
 80067ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067ee:	3301      	adds	r3, #1
 80067f0:	9324      	str	r3, [sp, #144]	; 0x90
 80067f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f4:	3301      	adds	r3, #1
 80067f6:	2b07      	cmp	r3, #7
 80067f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80067fa:	f300 82da 	bgt.w	8006db2 <_svfprintf_r+0xc92>
 80067fe:	3408      	adds	r4, #8
 8006800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006802:	b16b      	cbz	r3, 8006820 <_svfprintf_r+0x700>
 8006804:	ab1b      	add	r3, sp, #108	; 0x6c
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	2302      	movs	r3, #2
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800680e:	3302      	adds	r3, #2
 8006810:	9324      	str	r3, [sp, #144]	; 0x90
 8006812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006814:	3301      	adds	r3, #1
 8006816:	2b07      	cmp	r3, #7
 8006818:	9323      	str	r3, [sp, #140]	; 0x8c
 800681a:	f300 82d4 	bgt.w	8006dc6 <_svfprintf_r+0xca6>
 800681e:	3408      	adds	r4, #8
 8006820:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d11f      	bne.n	8006866 <_svfprintf_r+0x746>
 8006826:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800682a:	1a9f      	subs	r7, r3, r2
 800682c:	2f00      	cmp	r7, #0
 800682e:	dd1a      	ble.n	8006866 <_svfprintf_r+0x746>
 8006830:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006834:	4821      	ldr	r0, [pc, #132]	; (80068bc <_svfprintf_r+0x79c>)
 8006836:	6020      	str	r0, [r4, #0]
 8006838:	2f10      	cmp	r7, #16
 800683a:	f103 0301 	add.w	r3, r3, #1
 800683e:	f104 0108 	add.w	r1, r4, #8
 8006842:	f300 82ca 	bgt.w	8006dda <_svfprintf_r+0xcba>
 8006846:	6067      	str	r7, [r4, #4]
 8006848:	2b07      	cmp	r3, #7
 800684a:	4417      	add	r7, r2
 800684c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006850:	f340 82d6 	ble.w	8006e00 <_svfprintf_r+0xce0>
 8006854:	aa22      	add	r2, sp, #136	; 0x88
 8006856:	4649      	mov	r1, r9
 8006858:	4650      	mov	r0, sl
 800685a:	f002 fbc8 	bl	8008fee <__ssprint_r>
 800685e:	2800      	cmp	r0, #0
 8006860:	f040 85d8 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006864:	ac25      	add	r4, sp, #148	; 0x94
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	1af6      	subs	r6, r6, r3
 800686a:	2e00      	cmp	r6, #0
 800686c:	dd28      	ble.n	80068c0 <_svfprintf_r+0x7a0>
 800686e:	4f13      	ldr	r7, [pc, #76]	; (80068bc <_svfprintf_r+0x79c>)
 8006870:	6027      	str	r7, [r4, #0]
 8006872:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006876:	2e10      	cmp	r6, #16
 8006878:	f103 0301 	add.w	r3, r3, #1
 800687c:	f104 0108 	add.w	r1, r4, #8
 8006880:	f300 82c0 	bgt.w	8006e04 <_svfprintf_r+0xce4>
 8006884:	6066      	str	r6, [r4, #4]
 8006886:	2b07      	cmp	r3, #7
 8006888:	4416      	add	r6, r2
 800688a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800688e:	f340 82cc 	ble.w	8006e2a <_svfprintf_r+0xd0a>
 8006892:	aa22      	add	r2, sp, #136	; 0x88
 8006894:	4649      	mov	r1, r9
 8006896:	4650      	mov	r0, sl
 8006898:	f002 fba9 	bl	8008fee <__ssprint_r>
 800689c:	2800      	cmp	r0, #0
 800689e:	f040 85b9 	bne.w	8007414 <_svfprintf_r+0x12f4>
 80068a2:	ac25      	add	r4, sp, #148	; 0x94
 80068a4:	e00c      	b.n	80068c0 <_svfprintf_r+0x7a0>
 80068a6:	bf00      	nop
 80068a8:	0800b309 	.word	0x0800b309
 80068ac:	0800b2f8 	.word	0x0800b2f8
 80068b0:	40300000 	.word	0x40300000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	0800b31c 	.word	0x0800b31c
 80068bc:	0800b32c 	.word	0x0800b32c
 80068c0:	f418 7f80 	tst.w	r8, #256	; 0x100
 80068c4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80068c6:	f040 82b7 	bne.w	8006e38 <_svfprintf_r+0xd18>
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	f8c4 b000 	str.w	fp, [r4]
 80068d0:	441e      	add	r6, r3
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	9624      	str	r6, [sp, #144]	; 0x90
 80068d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068d8:	3301      	adds	r3, #1
 80068da:	2b07      	cmp	r3, #7
 80068dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80068de:	f300 82f0 	bgt.w	8006ec2 <_svfprintf_r+0xda2>
 80068e2:	3408      	adds	r4, #8
 80068e4:	f018 0f04 	tst.w	r8, #4
 80068e8:	f040 8576 	bne.w	80073d8 <_svfprintf_r+0x12b8>
 80068ec:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80068f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80068f2:	428a      	cmp	r2, r1
 80068f4:	bfac      	ite	ge
 80068f6:	189b      	addge	r3, r3, r2
 80068f8:	185b      	addlt	r3, r3, r1
 80068fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80068fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068fe:	b13b      	cbz	r3, 8006910 <_svfprintf_r+0x7f0>
 8006900:	aa22      	add	r2, sp, #136	; 0x88
 8006902:	4649      	mov	r1, r9
 8006904:	4650      	mov	r0, sl
 8006906:	f002 fb72 	bl	8008fee <__ssprint_r>
 800690a:	2800      	cmp	r0, #0
 800690c:	f040 8582 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006910:	2300      	movs	r3, #0
 8006912:	9323      	str	r3, [sp, #140]	; 0x8c
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 8598 	bne.w	800744c <_svfprintf_r+0x132c>
 800691c:	ac25      	add	r4, sp, #148	; 0x94
 800691e:	e0ed      	b.n	8006afc <_svfprintf_r+0x9dc>
 8006920:	9003      	str	r0, [sp, #12]
 8006922:	e62c      	b.n	800657e <_svfprintf_r+0x45e>
 8006924:	9003      	str	r0, [sp, #12]
 8006926:	2306      	movs	r3, #6
 8006928:	e619      	b.n	800655e <_svfprintf_r+0x43e>
 800692a:	9003      	str	r0, [sp, #12]
 800692c:	e627      	b.n	800657e <_svfprintf_r+0x45e>
 800692e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8006932:	2300      	movs	r3, #0
 8006934:	eeb0 8a47 	vmov.f32	s16, s14
 8006938:	eef0 8a67 	vmov.f32	s17, s15
 800693c:	e62f      	b.n	800659e <_svfprintf_r+0x47e>
 800693e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006942:	e691      	b.n	8006668 <_svfprintf_r+0x548>
 8006944:	f803 0b01 	strb.w	r0, [r3], #1
 8006948:	1aca      	subs	r2, r1, r3
 800694a:	2a00      	cmp	r2, #0
 800694c:	dafa      	bge.n	8006944 <_svfprintf_r+0x824>
 800694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006952:	3201      	adds	r2, #1
 8006954:	f103 0301 	add.w	r3, r3, #1
 8006958:	bfb8      	it	lt
 800695a:	2300      	movlt	r3, #0
 800695c:	441d      	add	r5, r3
 800695e:	e693      	b.n	8006688 <_svfprintf_r+0x568>
 8006960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006962:	462b      	mov	r3, r5
 8006964:	18a9      	adds	r1, r5, r2
 8006966:	2030      	movs	r0, #48	; 0x30
 8006968:	e7ee      	b.n	8006948 <_svfprintf_r+0x828>
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	2b46      	cmp	r3, #70	; 0x46
 800696e:	d005      	beq.n	800697c <_svfprintf_r+0x85c>
 8006970:	2b45      	cmp	r3, #69	; 0x45
 8006972:	d11b      	bne.n	80069ac <_svfprintf_r+0x88c>
 8006974:	9b04      	ldr	r3, [sp, #16]
 8006976:	1c5d      	adds	r5, r3, #1
 8006978:	2102      	movs	r1, #2
 800697a:	e001      	b.n	8006980 <_svfprintf_r+0x860>
 800697c:	9d04      	ldr	r5, [sp, #16]
 800697e:	2103      	movs	r1, #3
 8006980:	ab20      	add	r3, sp, #128	; 0x80
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	ab1d      	add	r3, sp, #116	; 0x74
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	462a      	mov	r2, r5
 800698a:	ab1c      	add	r3, sp, #112	; 0x70
 800698c:	4650      	mov	r0, sl
 800698e:	eeb0 0a48 	vmov.f32	s0, s16
 8006992:	eef0 0a68 	vmov.f32	s1, s17
 8006996:	f000 fe3f 	bl	8007618 <_dtoa_r>
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	2b47      	cmp	r3, #71	; 0x47
 800699e:	4683      	mov	fp, r0
 80069a0:	d106      	bne.n	80069b0 <_svfprintf_r+0x890>
 80069a2:	f018 0f01 	tst.w	r8, #1
 80069a6:	d103      	bne.n	80069b0 <_svfprintf_r+0x890>
 80069a8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80069aa:	e66d      	b.n	8006688 <_svfprintf_r+0x568>
 80069ac:	9d04      	ldr	r5, [sp, #16]
 80069ae:	e7e3      	b.n	8006978 <_svfprintf_r+0x858>
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	2b46      	cmp	r3, #70	; 0x46
 80069b4:	eb0b 0605 	add.w	r6, fp, r5
 80069b8:	d10f      	bne.n	80069da <_svfprintf_r+0x8ba>
 80069ba:	f89b 3000 	ldrb.w	r3, [fp]
 80069be:	2b30      	cmp	r3, #48	; 0x30
 80069c0:	d109      	bne.n	80069d6 <_svfprintf_r+0x8b6>
 80069c2:	ec51 0b18 	vmov	r0, r1, d8
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	f7fa f885 	bl	8000ad8 <__aeabi_dcmpeq>
 80069ce:	b910      	cbnz	r0, 80069d6 <_svfprintf_r+0x8b6>
 80069d0:	f1c5 0501 	rsb	r5, r5, #1
 80069d4:	951c      	str	r5, [sp, #112]	; 0x70
 80069d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80069d8:	441e      	add	r6, r3
 80069da:	ec51 0b18 	vmov	r0, r1, d8
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	f7fa f879 	bl	8000ad8 <__aeabi_dcmpeq>
 80069e6:	b100      	cbz	r0, 80069ea <_svfprintf_r+0x8ca>
 80069e8:	9620      	str	r6, [sp, #128]	; 0x80
 80069ea:	2230      	movs	r2, #48	; 0x30
 80069ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069ee:	429e      	cmp	r6, r3
 80069f0:	d9da      	bls.n	80069a8 <_svfprintf_r+0x888>
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	9120      	str	r1, [sp, #128]	; 0x80
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e7f8      	b.n	80069ec <_svfprintf_r+0x8cc>
 80069fa:	9b08      	ldr	r3, [sp, #32]
 80069fc:	2b46      	cmp	r3, #70	; 0x46
 80069fe:	f47f ae54 	bne.w	80066aa <_svfprintf_r+0x58a>
 8006a02:	9a04      	ldr	r2, [sp, #16]
 8006a04:	f008 0301 	and.w	r3, r8, #1
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	ea43 0302 	orr.w	r3, r3, r2
 8006a0e:	dd1a      	ble.n	8006a46 <_svfprintf_r+0x926>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d034      	beq.n	8006a7e <_svfprintf_r+0x95e>
 8006a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a16:	18eb      	adds	r3, r5, r3
 8006a18:	441a      	add	r2, r3
 8006a1a:	9204      	str	r2, [sp, #16]
 8006a1c:	2366      	movs	r3, #102	; 0x66
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	e033      	b.n	8006a8a <_svfprintf_r+0x96a>
 8006a22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a26:	f802 6b01 	strb.w	r6, [r2], #1
 8006a2a:	e675      	b.n	8006718 <_svfprintf_r+0x5f8>
 8006a2c:	b941      	cbnz	r1, 8006a40 <_svfprintf_r+0x920>
 8006a2e:	2230      	movs	r2, #48	; 0x30
 8006a30:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006a34:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006a38:	3330      	adds	r3, #48	; 0x30
 8006a3a:	f802 3b01 	strb.w	r3, [r2], #1
 8006a3e:	e677      	b.n	8006730 <_svfprintf_r+0x610>
 8006a40:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006a44:	e7f8      	b.n	8006a38 <_svfprintf_r+0x918>
 8006a46:	b1e3      	cbz	r3, 8006a82 <_svfprintf_r+0x962>
 8006a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	e7e3      	b.n	8006a18 <_svfprintf_r+0x8f8>
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	429d      	cmp	r5, r3
 8006a54:	db07      	blt.n	8006a66 <_svfprintf_r+0x946>
 8006a56:	f018 0f01 	tst.w	r8, #1
 8006a5a:	d02d      	beq.n	8006ab8 <_svfprintf_r+0x998>
 8006a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a5e:	18eb      	adds	r3, r5, r3
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	2367      	movs	r3, #103	; 0x67
 8006a64:	e7db      	b.n	8006a1e <_svfprintf_r+0x8fe>
 8006a66:	9b05      	ldr	r3, [sp, #20]
 8006a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	4413      	add	r3, r2
 8006a6e:	9304      	str	r3, [sp, #16]
 8006a70:	dcf7      	bgt.n	8006a62 <_svfprintf_r+0x942>
 8006a72:	9a04      	ldr	r2, [sp, #16]
 8006a74:	f1c5 0301 	rsb	r3, r5, #1
 8006a78:	441a      	add	r2, r3
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	e7f0      	b.n	8006a60 <_svfprintf_r+0x940>
 8006a7e:	9504      	str	r5, [sp, #16]
 8006a80:	e7cc      	b.n	8006a1c <_svfprintf_r+0x8fc>
 8006a82:	2366      	movs	r3, #102	; 0x66
 8006a84:	9307      	str	r3, [sp, #28]
 8006a86:	2301      	movs	r3, #1
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8006a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a90:	d025      	beq.n	8006ade <_svfprintf_r+0x9be>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006a9a:	f77f ae61 	ble.w	8006760 <_svfprintf_r+0x640>
 8006a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2bff      	cmp	r3, #255	; 0xff
 8006aa4:	d10a      	bne.n	8006abc <_svfprintf_r+0x99c>
 8006aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aaa:	9904      	ldr	r1, [sp, #16]
 8006aac:	4413      	add	r3, r2
 8006aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ab0:	fb02 1303 	mla	r3, r2, r3, r1
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	e653      	b.n	8006760 <_svfprintf_r+0x640>
 8006ab8:	9504      	str	r5, [sp, #16]
 8006aba:	e7d2      	b.n	8006a62 <_svfprintf_r+0x942>
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	daf2      	bge.n	8006aa6 <_svfprintf_r+0x986>
 8006ac0:	1aed      	subs	r5, r5, r3
 8006ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	b133      	cbz	r3, 8006ad6 <_svfprintf_r+0x9b6>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	3301      	adds	r3, #1
 8006acc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad4:	e7e3      	b.n	8006a9e <_svfprintf_r+0x97e>
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	9308      	str	r3, [sp, #32]
 8006adc:	e7df      	b.n	8006a9e <_svfprintf_r+0x97e>
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	9308      	str	r3, [sp, #32]
 8006ae2:	e63d      	b.n	8006760 <_svfprintf_r+0x640>
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	f018 0f20 	tst.w	r8, #32
 8006aea:	f852 3b04 	ldr.w	r3, [r2], #4
 8006aee:	9206      	str	r2, [sp, #24]
 8006af0:	d009      	beq.n	8006b06 <_svfprintf_r+0x9e6>
 8006af2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006af4:	4610      	mov	r0, r2
 8006af6:	17d1      	asrs	r1, r2, #31
 8006af8:	e9c3 0100 	strd	r0, r1, [r3]
 8006afc:	9e06      	ldr	r6, [sp, #24]
 8006afe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006b02:	f7ff bb4d 	b.w	80061a0 <_svfprintf_r+0x80>
 8006b06:	f018 0f10 	tst.w	r8, #16
 8006b0a:	d002      	beq.n	8006b12 <_svfprintf_r+0x9f2>
 8006b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e7f4      	b.n	8006afc <_svfprintf_r+0x9dc>
 8006b12:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006b16:	d002      	beq.n	8006b1e <_svfprintf_r+0x9fe>
 8006b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e7ee      	b.n	8006afc <_svfprintf_r+0x9dc>
 8006b1e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006b22:	d0f3      	beq.n	8006b0c <_svfprintf_r+0x9ec>
 8006b24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e7e8      	b.n	8006afc <_svfprintf_r+0x9dc>
 8006b2a:	f048 0810 	orr.w	r8, r8, #16
 8006b2e:	f018 0f20 	tst.w	r8, #32
 8006b32:	d01e      	beq.n	8006b72 <_svfprintf_r+0xa52>
 8006b34:	3607      	adds	r6, #7
 8006b36:	f026 0307 	bic.w	r3, r6, #7
 8006b3a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006b3e:	9306      	str	r3, [sp, #24]
 8006b40:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8006b44:	2300      	movs	r3, #0
 8006b46:	2200      	movs	r2, #0
 8006b48:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006b4c:	9a04      	ldr	r2, [sp, #16]
 8006b4e:	3201      	adds	r2, #1
 8006b50:	f000 848d 	beq.w	800746e <_svfprintf_r+0x134e>
 8006b54:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8006b58:	9203      	str	r2, [sp, #12]
 8006b5a:	ea56 0207 	orrs.w	r2, r6, r7
 8006b5e:	f040 848c 	bne.w	800747a <_svfprintf_r+0x135a>
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	f000 80f5 	beq.w	8006d54 <_svfprintf_r+0xc34>
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	f040 8488 	bne.w	8007480 <_svfprintf_r+0x1360>
 8006b70:	e097      	b.n	8006ca2 <_svfprintf_r+0xb82>
 8006b72:	1d33      	adds	r3, r6, #4
 8006b74:	f018 0f10 	tst.w	r8, #16
 8006b78:	9306      	str	r3, [sp, #24]
 8006b7a:	d001      	beq.n	8006b80 <_svfprintf_r+0xa60>
 8006b7c:	6836      	ldr	r6, [r6, #0]
 8006b7e:	e003      	b.n	8006b88 <_svfprintf_r+0xa68>
 8006b80:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006b84:	d002      	beq.n	8006b8c <_svfprintf_r+0xa6c>
 8006b86:	8836      	ldrh	r6, [r6, #0]
 8006b88:	2700      	movs	r7, #0
 8006b8a:	e7d9      	b.n	8006b40 <_svfprintf_r+0xa20>
 8006b8c:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006b90:	d0f4      	beq.n	8006b7c <_svfprintf_r+0xa5c>
 8006b92:	7836      	ldrb	r6, [r6, #0]
 8006b94:	e7f8      	b.n	8006b88 <_svfprintf_r+0xa68>
 8006b96:	4633      	mov	r3, r6
 8006b98:	2278      	movs	r2, #120	; 0x78
 8006b9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006b9e:	9306      	str	r3, [sp, #24]
 8006ba0:	f647 0330 	movw	r3, #30768	; 0x7830
 8006ba4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8006ba8:	4ba1      	ldr	r3, [pc, #644]	; (8006e30 <_svfprintf_r+0xd10>)
 8006baa:	9316      	str	r3, [sp, #88]	; 0x58
 8006bac:	2700      	movs	r7, #0
 8006bae:	f048 0802 	orr.w	r8, r8, #2
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	9207      	str	r2, [sp, #28]
 8006bb6:	e7c6      	b.n	8006b46 <_svfprintf_r+0xa26>
 8006bb8:	4633      	mov	r3, r6
 8006bba:	2500      	movs	r5, #0
 8006bbc:	f853 bb04 	ldr.w	fp, [r3], #4
 8006bc0:	9306      	str	r3, [sp, #24]
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8006bc8:	1c59      	adds	r1, r3, #1
 8006bca:	d010      	beq.n	8006bee <_svfprintf_r+0xace>
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	f7f9 fb05 	bl	80001e0 <memchr>
 8006bd6:	9003      	str	r0, [sp, #12]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f000 80d2 	beq.w	8006d82 <_svfprintf_r+0xc62>
 8006bde:	eba0 030b 	sub.w	r3, r0, fp
 8006be2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8006be6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8006bea:	462e      	mov	r6, r5
 8006bec:	e5c0      	b.n	8006770 <_svfprintf_r+0x650>
 8006bee:	4658      	mov	r0, fp
 8006bf0:	f7f9 fb46 	bl	8000280 <strlen>
 8006bf4:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8006bf8:	e463      	b.n	80064c2 <_svfprintf_r+0x3a2>
 8006bfa:	f048 0810 	orr.w	r8, r8, #16
 8006bfe:	f018 0f20 	tst.w	r8, #32
 8006c02:	d007      	beq.n	8006c14 <_svfprintf_r+0xaf4>
 8006c04:	3607      	adds	r6, #7
 8006c06:	f026 0307 	bic.w	r3, r6, #7
 8006c0a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006c0e:	9306      	str	r3, [sp, #24]
 8006c10:	2301      	movs	r3, #1
 8006c12:	e798      	b.n	8006b46 <_svfprintf_r+0xa26>
 8006c14:	1d33      	adds	r3, r6, #4
 8006c16:	f018 0f10 	tst.w	r8, #16
 8006c1a:	9306      	str	r3, [sp, #24]
 8006c1c:	d001      	beq.n	8006c22 <_svfprintf_r+0xb02>
 8006c1e:	6836      	ldr	r6, [r6, #0]
 8006c20:	e003      	b.n	8006c2a <_svfprintf_r+0xb0a>
 8006c22:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006c26:	d002      	beq.n	8006c2e <_svfprintf_r+0xb0e>
 8006c28:	8836      	ldrh	r6, [r6, #0]
 8006c2a:	2700      	movs	r7, #0
 8006c2c:	e7f0      	b.n	8006c10 <_svfprintf_r+0xaf0>
 8006c2e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006c32:	d0f4      	beq.n	8006c1e <_svfprintf_r+0xafe>
 8006c34:	7836      	ldrb	r6, [r6, #0]
 8006c36:	e7f8      	b.n	8006c2a <_svfprintf_r+0xb0a>
 8006c38:	4b7e      	ldr	r3, [pc, #504]	; (8006e34 <_svfprintf_r+0xd14>)
 8006c3a:	9316      	str	r3, [sp, #88]	; 0x58
 8006c3c:	f018 0f20 	tst.w	r8, #32
 8006c40:	d019      	beq.n	8006c76 <_svfprintf_r+0xb56>
 8006c42:	3607      	adds	r6, #7
 8006c44:	f026 0307 	bic.w	r3, r6, #7
 8006c48:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006c4c:	9306      	str	r3, [sp, #24]
 8006c4e:	f018 0f01 	tst.w	r8, #1
 8006c52:	d00a      	beq.n	8006c6a <_svfprintf_r+0xb4a>
 8006c54:	ea56 0307 	orrs.w	r3, r6, r7
 8006c58:	d007      	beq.n	8006c6a <_svfprintf_r+0xb4a>
 8006c5a:	2330      	movs	r3, #48	; 0x30
 8006c5c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006c66:	f048 0802 	orr.w	r8, r8, #2
 8006c6a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e769      	b.n	8006b46 <_svfprintf_r+0xa26>
 8006c72:	4b6f      	ldr	r3, [pc, #444]	; (8006e30 <_svfprintf_r+0xd10>)
 8006c74:	e7e1      	b.n	8006c3a <_svfprintf_r+0xb1a>
 8006c76:	1d33      	adds	r3, r6, #4
 8006c78:	f018 0f10 	tst.w	r8, #16
 8006c7c:	9306      	str	r3, [sp, #24]
 8006c7e:	d001      	beq.n	8006c84 <_svfprintf_r+0xb64>
 8006c80:	6836      	ldr	r6, [r6, #0]
 8006c82:	e003      	b.n	8006c8c <_svfprintf_r+0xb6c>
 8006c84:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006c88:	d002      	beq.n	8006c90 <_svfprintf_r+0xb70>
 8006c8a:	8836      	ldrh	r6, [r6, #0]
 8006c8c:	2700      	movs	r7, #0
 8006c8e:	e7de      	b.n	8006c4e <_svfprintf_r+0xb2e>
 8006c90:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006c94:	d0f4      	beq.n	8006c80 <_svfprintf_r+0xb60>
 8006c96:	7836      	ldrb	r6, [r6, #0]
 8006c98:	e7f8      	b.n	8006c8c <_svfprintf_r+0xb6c>
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	bf08      	it	eq
 8006c9e:	2e0a      	cmpeq	r6, #10
 8006ca0:	d206      	bcs.n	8006cb0 <_svfprintf_r+0xb90>
 8006ca2:	3630      	adds	r6, #48	; 0x30
 8006ca4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8006ca8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 8006cac:	f000 bc06 	b.w	80074bc <_svfprintf_r+0x139c>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9305      	str	r3, [sp, #20]
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	ad4e      	add	r5, sp, #312	; 0x138
 8006cb8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 ffe8 	bl	8000c98 <__aeabi_uldivmod>
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	3230      	adds	r2, #48	; 0x30
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f105 3bff 	add.w	fp, r5, #4294967295
 8006cd2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006cd6:	9305      	str	r3, [sp, #20]
 8006cd8:	f1b8 0f00 	cmp.w	r8, #0
 8006cdc:	d019      	beq.n	8006d12 <_svfprintf_r+0xbf2>
 8006cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce0:	9a05      	ldr	r2, [sp, #20]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d114      	bne.n	8006d12 <_svfprintf_r+0xbf2>
 8006ce8:	2aff      	cmp	r2, #255	; 0xff
 8006cea:	d012      	beq.n	8006d12 <_svfprintf_r+0xbf2>
 8006cec:	2f00      	cmp	r7, #0
 8006cee:	bf08      	it	eq
 8006cf0:	2e0a      	cmpeq	r6, #10
 8006cf2:	d30e      	bcc.n	8006d12 <_svfprintf_r+0xbf2>
 8006cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cf6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006cf8:	ebab 0b03 	sub.w	fp, fp, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f002 f962 	bl	8008fc8 <strncpy>
 8006d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d06:	785d      	ldrb	r5, [r3, #1]
 8006d08:	b195      	cbz	r5, 8006d30 <_svfprintf_r+0xc10>
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	220a      	movs	r2, #10
 8006d14:	2300      	movs	r3, #0
 8006d16:	4630      	mov	r0, r6
 8006d18:	4639      	mov	r1, r7
 8006d1a:	f7f9 ffbd 	bl	8000c98 <__aeabi_uldivmod>
 8006d1e:	2f00      	cmp	r7, #0
 8006d20:	bf08      	it	eq
 8006d22:	2e0a      	cmpeq	r6, #10
 8006d24:	f0c0 83ca 	bcc.w	80074bc <_svfprintf_r+0x139c>
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	465d      	mov	r5, fp
 8006d2e:	e7c5      	b.n	8006cbc <_svfprintf_r+0xb9c>
 8006d30:	9505      	str	r5, [sp, #20]
 8006d32:	e7ee      	b.n	8006d12 <_svfprintf_r+0xbf2>
 8006d34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d36:	f006 030f 	and.w	r3, r6, #15
 8006d3a:	5cd3      	ldrb	r3, [r2, r3]
 8006d3c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006d40:	0933      	lsrs	r3, r6, #4
 8006d42:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006d46:	093a      	lsrs	r2, r7, #4
 8006d48:	461e      	mov	r6, r3
 8006d4a:	4617      	mov	r7, r2
 8006d4c:	ea56 0307 	orrs.w	r3, r6, r7
 8006d50:	d1f0      	bne.n	8006d34 <_svfprintf_r+0xc14>
 8006d52:	e3b3      	b.n	80074bc <_svfprintf_r+0x139c>
 8006d54:	b933      	cbnz	r3, 8006d64 <_svfprintf_r+0xc44>
 8006d56:	f018 0f01 	tst.w	r8, #1
 8006d5a:	d003      	beq.n	8006d64 <_svfprintf_r+0xc44>
 8006d5c:	2330      	movs	r3, #48	; 0x30
 8006d5e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8006d62:	e7a1      	b.n	8006ca8 <_svfprintf_r+0xb88>
 8006d64:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8006d68:	e3a8      	b.n	80074bc <_svfprintf_r+0x139c>
 8006d6a:	9b07      	ldr	r3, [sp, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8373 	beq.w	8007458 <_svfprintf_r+0x1338>
 8006d72:	2000      	movs	r0, #0
 8006d74:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006d78:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006d7c:	9606      	str	r6, [sp, #24]
 8006d7e:	f7ff bb34 	b.w	80063ea <_svfprintf_r+0x2ca>
 8006d82:	9e03      	ldr	r6, [sp, #12]
 8006d84:	f7ff bb9e 	b.w	80064c4 <_svfprintf_r+0x3a4>
 8006d88:	2010      	movs	r0, #16
 8006d8a:	4402      	add	r2, r0
 8006d8c:	2b07      	cmp	r3, #7
 8006d8e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	dd08      	ble.n	8006da8 <_svfprintf_r+0xc88>
 8006d96:	aa22      	add	r2, sp, #136	; 0x88
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	f002 f927 	bl	8008fee <__ssprint_r>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f040 8337 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006da6:	a925      	add	r1, sp, #148	; 0x94
 8006da8:	3f10      	subs	r7, #16
 8006daa:	460c      	mov	r4, r1
 8006dac:	e4fb      	b.n	80067a6 <_svfprintf_r+0x686>
 8006dae:	460c      	mov	r4, r1
 8006db0:	e514      	b.n	80067dc <_svfprintf_r+0x6bc>
 8006db2:	aa22      	add	r2, sp, #136	; 0x88
 8006db4:	4649      	mov	r1, r9
 8006db6:	4650      	mov	r0, sl
 8006db8:	f002 f919 	bl	8008fee <__ssprint_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 8329 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006dc2:	ac25      	add	r4, sp, #148	; 0x94
 8006dc4:	e51c      	b.n	8006800 <_svfprintf_r+0x6e0>
 8006dc6:	aa22      	add	r2, sp, #136	; 0x88
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4650      	mov	r0, sl
 8006dcc:	f002 f90f 	bl	8008fee <__ssprint_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f040 831f 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006dd6:	ac25      	add	r4, sp, #148	; 0x94
 8006dd8:	e522      	b.n	8006820 <_svfprintf_r+0x700>
 8006dda:	2010      	movs	r0, #16
 8006ddc:	4402      	add	r2, r0
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006de4:	6060      	str	r0, [r4, #4]
 8006de6:	dd08      	ble.n	8006dfa <_svfprintf_r+0xcda>
 8006de8:	aa22      	add	r2, sp, #136	; 0x88
 8006dea:	4649      	mov	r1, r9
 8006dec:	4650      	mov	r0, sl
 8006dee:	f002 f8fe 	bl	8008fee <__ssprint_r>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f040 830e 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006df8:	a925      	add	r1, sp, #148	; 0x94
 8006dfa:	3f10      	subs	r7, #16
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	e517      	b.n	8006830 <_svfprintf_r+0x710>
 8006e00:	460c      	mov	r4, r1
 8006e02:	e530      	b.n	8006866 <_svfprintf_r+0x746>
 8006e04:	2010      	movs	r0, #16
 8006e06:	4402      	add	r2, r0
 8006e08:	2b07      	cmp	r3, #7
 8006e0a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006e0e:	6060      	str	r0, [r4, #4]
 8006e10:	dd08      	ble.n	8006e24 <_svfprintf_r+0xd04>
 8006e12:	aa22      	add	r2, sp, #136	; 0x88
 8006e14:	4649      	mov	r1, r9
 8006e16:	4650      	mov	r0, sl
 8006e18:	f002 f8e9 	bl	8008fee <__ssprint_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f040 82f9 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006e22:	a925      	add	r1, sp, #148	; 0x94
 8006e24:	3e10      	subs	r6, #16
 8006e26:	460c      	mov	r4, r1
 8006e28:	e522      	b.n	8006870 <_svfprintf_r+0x750>
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	e548      	b.n	80068c0 <_svfprintf_r+0x7a0>
 8006e2e:	bf00      	nop
 8006e30:	0800b2f8 	.word	0x0800b2f8
 8006e34:	0800b309 	.word	0x0800b309
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	2b65      	cmp	r3, #101	; 0x65
 8006e3c:	f340 8232 	ble.w	80072a4 <_svfprintf_r+0x1184>
 8006e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	f7f9 fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d068      	beq.n	8006f22 <_svfprintf_r+0xe02>
 8006e50:	4b6d      	ldr	r3, [pc, #436]	; (8007008 <_svfprintf_r+0xee8>)
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	2301      	movs	r3, #1
 8006e56:	441e      	add	r6, r3
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e5c:	9624      	str	r6, [sp, #144]	; 0x90
 8006e5e:	3301      	adds	r3, #1
 8006e60:	2b07      	cmp	r3, #7
 8006e62:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e64:	dc37      	bgt.n	8006ed6 <_svfprintf_r+0xdb6>
 8006e66:	3408      	adds	r4, #8
 8006e68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006e6a:	9a05      	ldr	r2, [sp, #20]
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	db03      	blt.n	8006e78 <_svfprintf_r+0xd58>
 8006e70:	f018 0f01 	tst.w	r8, #1
 8006e74:	f43f ad36 	beq.w	80068e4 <_svfprintf_r+0x7c4>
 8006e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e84:	4413      	add	r3, r2
 8006e86:	9324      	str	r3, [sp, #144]	; 0x90
 8006e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e90:	dc2b      	bgt.n	8006eea <_svfprintf_r+0xdca>
 8006e92:	3408      	adds	r4, #8
 8006e94:	9b05      	ldr	r3, [sp, #20]
 8006e96:	1e5d      	subs	r5, r3, #1
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	f77f ad23 	ble.w	80068e4 <_svfprintf_r+0x7c4>
 8006e9e:	4e5b      	ldr	r6, [pc, #364]	; (800700c <_svfprintf_r+0xeec>)
 8006ea0:	2710      	movs	r7, #16
 8006ea2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006ea6:	2d10      	cmp	r5, #16
 8006ea8:	f103 0301 	add.w	r3, r3, #1
 8006eac:	f104 0108 	add.w	r1, r4, #8
 8006eb0:	6026      	str	r6, [r4, #0]
 8006eb2:	dc24      	bgt.n	8006efe <_svfprintf_r+0xdde>
 8006eb4:	6065      	str	r5, [r4, #4]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	4415      	add	r5, r2
 8006eba:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8006ebe:	f340 8288 	ble.w	80073d2 <_svfprintf_r+0x12b2>
 8006ec2:	aa22      	add	r2, sp, #136	; 0x88
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	f002 f891 	bl	8008fee <__ssprint_r>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f040 82a1 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006ed2:	ac25      	add	r4, sp, #148	; 0x94
 8006ed4:	e506      	b.n	80068e4 <_svfprintf_r+0x7c4>
 8006ed6:	aa22      	add	r2, sp, #136	; 0x88
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4650      	mov	r0, sl
 8006edc:	f002 f887 	bl	8008fee <__ssprint_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	f040 8297 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006ee6:	ac25      	add	r4, sp, #148	; 0x94
 8006ee8:	e7be      	b.n	8006e68 <_svfprintf_r+0xd48>
 8006eea:	aa22      	add	r2, sp, #136	; 0x88
 8006eec:	4649      	mov	r1, r9
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f002 f87d 	bl	8008fee <__ssprint_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f040 828d 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006efa:	ac25      	add	r4, sp, #148	; 0x94
 8006efc:	e7ca      	b.n	8006e94 <_svfprintf_r+0xd74>
 8006efe:	3210      	adds	r2, #16
 8006f00:	2b07      	cmp	r3, #7
 8006f02:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006f06:	6067      	str	r7, [r4, #4]
 8006f08:	dd08      	ble.n	8006f1c <_svfprintf_r+0xdfc>
 8006f0a:	aa22      	add	r2, sp, #136	; 0x88
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f002 f86d 	bl	8008fee <__ssprint_r>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f040 827d 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006f1a:	a925      	add	r1, sp, #148	; 0x94
 8006f1c:	3d10      	subs	r5, #16
 8006f1e:	460c      	mov	r4, r1
 8006f20:	e7bf      	b.n	8006ea2 <_svfprintf_r+0xd82>
 8006f22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dc73      	bgt.n	8007010 <_svfprintf_r+0xef0>
 8006f28:	4b37      	ldr	r3, [pc, #220]	; (8007008 <_svfprintf_r+0xee8>)
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	441e      	add	r6, r3
 8006f30:	6063      	str	r3, [r4, #4]
 8006f32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f34:	9624      	str	r6, [sp, #144]	; 0x90
 8006f36:	3301      	adds	r3, #1
 8006f38:	2b07      	cmp	r3, #7
 8006f3a:	9323      	str	r3, [sp, #140]	; 0x8c
 8006f3c:	dc3d      	bgt.n	8006fba <_svfprintf_r+0xe9a>
 8006f3e:	3408      	adds	r4, #8
 8006f40:	9905      	ldr	r1, [sp, #20]
 8006f42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f46:	430a      	orrs	r2, r1
 8006f48:	f008 0101 	and.w	r1, r8, #1
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	f43f acc9 	beq.w	80068e4 <_svfprintf_r+0x7c4>
 8006f52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f58:	6062      	str	r2, [r4, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	9324      	str	r3, [sp, #144]	; 0x90
 8006f5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f60:	3301      	adds	r3, #1
 8006f62:	2b07      	cmp	r3, #7
 8006f64:	9323      	str	r3, [sp, #140]	; 0x8c
 8006f66:	dc32      	bgt.n	8006fce <_svfprintf_r+0xeae>
 8006f68:	3408      	adds	r4, #8
 8006f6a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	da1b      	bge.n	8006fa8 <_svfprintf_r+0xe88>
 8006f70:	4e26      	ldr	r6, [pc, #152]	; (800700c <_svfprintf_r+0xeec>)
 8006f72:	426d      	negs	r5, r5
 8006f74:	4623      	mov	r3, r4
 8006f76:	2710      	movs	r7, #16
 8006f78:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8006f7c:	2d10      	cmp	r5, #16
 8006f7e:	f102 0201 	add.w	r2, r2, #1
 8006f82:	f104 0408 	add.w	r4, r4, #8
 8006f86:	601e      	str	r6, [r3, #0]
 8006f88:	dc2b      	bgt.n	8006fe2 <_svfprintf_r+0xec2>
 8006f8a:	605d      	str	r5, [r3, #4]
 8006f8c:	2a07      	cmp	r2, #7
 8006f8e:	440d      	add	r5, r1
 8006f90:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8006f94:	dd08      	ble.n	8006fa8 <_svfprintf_r+0xe88>
 8006f96:	aa22      	add	r2, sp, #136	; 0x88
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4650      	mov	r0, sl
 8006f9c:	f002 f827 	bl	8008fee <__ssprint_r>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	f040 8237 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006fa6:	ac25      	add	r4, sp, #148	; 0x94
 8006fa8:	9b05      	ldr	r3, [sp, #20]
 8006faa:	9a05      	ldr	r2, [sp, #20]
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006fb0:	f8c4 b000 	str.w	fp, [r4]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	9324      	str	r3, [sp, #144]	; 0x90
 8006fb8:	e48d      	b.n	80068d6 <_svfprintf_r+0x7b6>
 8006fba:	aa22      	add	r2, sp, #136	; 0x88
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	f002 f815 	bl	8008fee <__ssprint_r>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f040 8225 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006fca:	ac25      	add	r4, sp, #148	; 0x94
 8006fcc:	e7b8      	b.n	8006f40 <_svfprintf_r+0xe20>
 8006fce:	aa22      	add	r2, sp, #136	; 0x88
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	f002 f80b 	bl	8008fee <__ssprint_r>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	f040 821b 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006fde:	ac25      	add	r4, sp, #148	; 0x94
 8006fe0:	e7c3      	b.n	8006f6a <_svfprintf_r+0xe4a>
 8006fe2:	3110      	adds	r1, #16
 8006fe4:	2a07      	cmp	r2, #7
 8006fe6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8006fea:	605f      	str	r7, [r3, #4]
 8006fec:	dd08      	ble.n	8007000 <_svfprintf_r+0xee0>
 8006fee:	aa22      	add	r2, sp, #136	; 0x88
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f001 fffb 	bl	8008fee <__ssprint_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f040 820b 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8006ffe:	ac25      	add	r4, sp, #148	; 0x94
 8007000:	3d10      	subs	r5, #16
 8007002:	4623      	mov	r3, r4
 8007004:	e7b8      	b.n	8006f78 <_svfprintf_r+0xe58>
 8007006:	bf00      	nop
 8007008:	0800b31a 	.word	0x0800b31a
 800700c:	0800b32c 	.word	0x0800b32c
 8007010:	9b05      	ldr	r3, [sp, #20]
 8007012:	42ab      	cmp	r3, r5
 8007014:	bfa8      	it	ge
 8007016:	462b      	movge	r3, r5
 8007018:	2b00      	cmp	r3, #0
 800701a:	461f      	mov	r7, r3
 800701c:	dd0a      	ble.n	8007034 <_svfprintf_r+0xf14>
 800701e:	441e      	add	r6, r3
 8007020:	e9c4 b300 	strd	fp, r3, [r4]
 8007024:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007026:	9624      	str	r6, [sp, #144]	; 0x90
 8007028:	3301      	adds	r3, #1
 800702a:	2b07      	cmp	r3, #7
 800702c:	9323      	str	r3, [sp, #140]	; 0x8c
 800702e:	f300 8086 	bgt.w	800713e <_svfprintf_r+0x101e>
 8007032:	3408      	adds	r4, #8
 8007034:	2f00      	cmp	r7, #0
 8007036:	bfac      	ite	ge
 8007038:	1bee      	subge	r6, r5, r7
 800703a:	462e      	movlt	r6, r5
 800703c:	2e00      	cmp	r6, #0
 800703e:	dd19      	ble.n	8007074 <_svfprintf_r+0xf54>
 8007040:	4f97      	ldr	r7, [pc, #604]	; (80072a0 <_svfprintf_r+0x1180>)
 8007042:	6027      	str	r7, [r4, #0]
 8007044:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007048:	2e10      	cmp	r6, #16
 800704a:	f103 0301 	add.w	r3, r3, #1
 800704e:	f104 0108 	add.w	r1, r4, #8
 8007052:	dc7e      	bgt.n	8007152 <_svfprintf_r+0x1032>
 8007054:	6066      	str	r6, [r4, #4]
 8007056:	2b07      	cmp	r3, #7
 8007058:	4416      	add	r6, r2
 800705a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800705e:	f340 808b 	ble.w	8007178 <_svfprintf_r+0x1058>
 8007062:	aa22      	add	r2, sp, #136	; 0x88
 8007064:	4649      	mov	r1, r9
 8007066:	4650      	mov	r0, sl
 8007068:	f001 ffc1 	bl	8008fee <__ssprint_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	f040 81d1 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8007072:	ac25      	add	r4, sp, #148	; 0x94
 8007074:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8007078:	445d      	add	r5, fp
 800707a:	d00b      	beq.n	8007094 <_svfprintf_r+0xf74>
 800707c:	4e88      	ldr	r6, [pc, #544]	; (80072a0 <_svfprintf_r+0x1180>)
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d17b      	bne.n	800717c <_svfprintf_r+0x105c>
 8007084:	9b08      	ldr	r3, [sp, #32]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d17b      	bne.n	8007182 <_svfprintf_r+0x1062>
 800708a:	9b05      	ldr	r3, [sp, #20]
 800708c:	445b      	add	r3, fp
 800708e:	429d      	cmp	r5, r3
 8007090:	bf28      	it	cs
 8007092:	461d      	movcs	r5, r3
 8007094:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007096:	9a05      	ldr	r2, [sp, #20]
 8007098:	4293      	cmp	r3, r2
 800709a:	db02      	blt.n	80070a2 <_svfprintf_r+0xf82>
 800709c:	f018 0f01 	tst.w	r8, #1
 80070a0:	d00e      	beq.n	80070c0 <_svfprintf_r+0xfa0>
 80070a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070aa:	6063      	str	r3, [r4, #4]
 80070ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070ae:	4413      	add	r3, r2
 80070b0:	9324      	str	r3, [sp, #144]	; 0x90
 80070b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070b4:	3301      	adds	r3, #1
 80070b6:	2b07      	cmp	r3, #7
 80070b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80070ba:	f300 80dd 	bgt.w	8007278 <_svfprintf_r+0x1158>
 80070be:	3408      	adds	r4, #8
 80070c0:	9b05      	ldr	r3, [sp, #20]
 80070c2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80070c4:	eb0b 0203 	add.w	r2, fp, r3
 80070c8:	1b9e      	subs	r6, r3, r6
 80070ca:	1b52      	subs	r2, r2, r5
 80070cc:	4296      	cmp	r6, r2
 80070ce:	bfa8      	it	ge
 80070d0:	4616      	movge	r6, r2
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	dd0b      	ble.n	80070ee <_svfprintf_r+0xfce>
 80070d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070d8:	4433      	add	r3, r6
 80070da:	9324      	str	r3, [sp, #144]	; 0x90
 80070dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070de:	3301      	adds	r3, #1
 80070e0:	2b07      	cmp	r3, #7
 80070e2:	e9c4 5600 	strd	r5, r6, [r4]
 80070e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80070e8:	f300 80d0 	bgt.w	800728c <_svfprintf_r+0x116c>
 80070ec:	3408      	adds	r4, #8
 80070ee:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80070f0:	9b05      	ldr	r3, [sp, #20]
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	eba3 0505 	sub.w	r5, r3, r5
 80070f8:	bfa8      	it	ge
 80070fa:	1bad      	subge	r5, r5, r6
 80070fc:	2d00      	cmp	r5, #0
 80070fe:	f77f abf1 	ble.w	80068e4 <_svfprintf_r+0x7c4>
 8007102:	4e67      	ldr	r6, [pc, #412]	; (80072a0 <_svfprintf_r+0x1180>)
 8007104:	2710      	movs	r7, #16
 8007106:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800710a:	2d10      	cmp	r5, #16
 800710c:	f103 0301 	add.w	r3, r3, #1
 8007110:	f104 0108 	add.w	r1, r4, #8
 8007114:	6026      	str	r6, [r4, #0]
 8007116:	f77f aecd 	ble.w	8006eb4 <_svfprintf_r+0xd94>
 800711a:	3210      	adds	r2, #16
 800711c:	2b07      	cmp	r3, #7
 800711e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007122:	6067      	str	r7, [r4, #4]
 8007124:	dd08      	ble.n	8007138 <_svfprintf_r+0x1018>
 8007126:	aa22      	add	r2, sp, #136	; 0x88
 8007128:	4649      	mov	r1, r9
 800712a:	4650      	mov	r0, sl
 800712c:	f001 ff5f 	bl	8008fee <__ssprint_r>
 8007130:	2800      	cmp	r0, #0
 8007132:	f040 816f 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8007136:	a925      	add	r1, sp, #148	; 0x94
 8007138:	3d10      	subs	r5, #16
 800713a:	460c      	mov	r4, r1
 800713c:	e7e3      	b.n	8007106 <_svfprintf_r+0xfe6>
 800713e:	aa22      	add	r2, sp, #136	; 0x88
 8007140:	4649      	mov	r1, r9
 8007142:	4650      	mov	r0, sl
 8007144:	f001 ff53 	bl	8008fee <__ssprint_r>
 8007148:	2800      	cmp	r0, #0
 800714a:	f040 8163 	bne.w	8007414 <_svfprintf_r+0x12f4>
 800714e:	ac25      	add	r4, sp, #148	; 0x94
 8007150:	e770      	b.n	8007034 <_svfprintf_r+0xf14>
 8007152:	2010      	movs	r0, #16
 8007154:	4402      	add	r2, r0
 8007156:	2b07      	cmp	r3, #7
 8007158:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800715c:	6060      	str	r0, [r4, #4]
 800715e:	dd08      	ble.n	8007172 <_svfprintf_r+0x1052>
 8007160:	aa22      	add	r2, sp, #136	; 0x88
 8007162:	4649      	mov	r1, r9
 8007164:	4650      	mov	r0, sl
 8007166:	f001 ff42 	bl	8008fee <__ssprint_r>
 800716a:	2800      	cmp	r0, #0
 800716c:	f040 8152 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8007170:	a925      	add	r1, sp, #148	; 0x94
 8007172:	3e10      	subs	r6, #16
 8007174:	460c      	mov	r4, r1
 8007176:	e764      	b.n	8007042 <_svfprintf_r+0xf22>
 8007178:	460c      	mov	r4, r1
 800717a:	e77b      	b.n	8007074 <_svfprintf_r+0xf54>
 800717c:	9b08      	ldr	r3, [sp, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d04a      	beq.n	8007218 <_svfprintf_r+0x10f8>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	3b01      	subs	r3, #1
 8007186:	9308      	str	r3, [sp, #32]
 8007188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800718e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007194:	4413      	add	r3, r2
 8007196:	9324      	str	r3, [sp, #144]	; 0x90
 8007198:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800719a:	3301      	adds	r3, #1
 800719c:	2b07      	cmp	r3, #7
 800719e:	9323      	str	r3, [sp, #140]	; 0x8c
 80071a0:	dc41      	bgt.n	8007226 <_svfprintf_r+0x1106>
 80071a2:	3408      	adds	r4, #8
 80071a4:	9b05      	ldr	r3, [sp, #20]
 80071a6:	445b      	add	r3, fp
 80071a8:	1b5a      	subs	r2, r3, r5
 80071aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	bfa8      	it	ge
 80071b2:	4613      	movge	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	461f      	mov	r7, r3
 80071b8:	dd0a      	ble.n	80071d0 <_svfprintf_r+0x10b0>
 80071ba:	e9c4 5300 	strd	r5, r3, [r4]
 80071be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80071c0:	443b      	add	r3, r7
 80071c2:	9324      	str	r3, [sp, #144]	; 0x90
 80071c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071c6:	3301      	adds	r3, #1
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80071cc:	dc35      	bgt.n	800723a <_svfprintf_r+0x111a>
 80071ce:	3408      	adds	r4, #8
 80071d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2f00      	cmp	r7, #0
 80071d6:	bfac      	ite	ge
 80071d8:	1bdf      	subge	r7, r3, r7
 80071da:	461f      	movlt	r7, r3
 80071dc:	2f00      	cmp	r7, #0
 80071de:	dd17      	ble.n	8007210 <_svfprintf_r+0x10f0>
 80071e0:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80071e4:	2f10      	cmp	r7, #16
 80071e6:	f102 0201 	add.w	r2, r2, #1
 80071ea:	f104 0108 	add.w	r1, r4, #8
 80071ee:	6026      	str	r6, [r4, #0]
 80071f0:	dc2d      	bgt.n	800724e <_svfprintf_r+0x112e>
 80071f2:	443b      	add	r3, r7
 80071f4:	2a07      	cmp	r2, #7
 80071f6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80071fa:	6067      	str	r7, [r4, #4]
 80071fc:	dd3a      	ble.n	8007274 <_svfprintf_r+0x1154>
 80071fe:	aa22      	add	r2, sp, #136	; 0x88
 8007200:	4649      	mov	r1, r9
 8007202:	4650      	mov	r0, sl
 8007204:	f001 fef3 	bl	8008fee <__ssprint_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	f040 8103 	bne.w	8007414 <_svfprintf_r+0x12f4>
 800720e:	ac25      	add	r4, sp, #148	; 0x94
 8007210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	441d      	add	r5, r3
 8007216:	e732      	b.n	800707e <_svfprintf_r+0xf5e>
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	3b01      	subs	r3, #1
 800721c:	930a      	str	r3, [sp, #40]	; 0x28
 800721e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007220:	3b01      	subs	r3, #1
 8007222:	9309      	str	r3, [sp, #36]	; 0x24
 8007224:	e7b0      	b.n	8007188 <_svfprintf_r+0x1068>
 8007226:	aa22      	add	r2, sp, #136	; 0x88
 8007228:	4649      	mov	r1, r9
 800722a:	4650      	mov	r0, sl
 800722c:	f001 fedf 	bl	8008fee <__ssprint_r>
 8007230:	2800      	cmp	r0, #0
 8007232:	f040 80ef 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8007236:	ac25      	add	r4, sp, #148	; 0x94
 8007238:	e7b4      	b.n	80071a4 <_svfprintf_r+0x1084>
 800723a:	aa22      	add	r2, sp, #136	; 0x88
 800723c:	4649      	mov	r1, r9
 800723e:	4650      	mov	r0, sl
 8007240:	f001 fed5 	bl	8008fee <__ssprint_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	f040 80e5 	bne.w	8007414 <_svfprintf_r+0x12f4>
 800724a:	ac25      	add	r4, sp, #148	; 0x94
 800724c:	e7c0      	b.n	80071d0 <_svfprintf_r+0x10b0>
 800724e:	2010      	movs	r0, #16
 8007250:	4403      	add	r3, r0
 8007252:	2a07      	cmp	r2, #7
 8007254:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007258:	6060      	str	r0, [r4, #4]
 800725a:	dd08      	ble.n	800726e <_svfprintf_r+0x114e>
 800725c:	aa22      	add	r2, sp, #136	; 0x88
 800725e:	4649      	mov	r1, r9
 8007260:	4650      	mov	r0, sl
 8007262:	f001 fec4 	bl	8008fee <__ssprint_r>
 8007266:	2800      	cmp	r0, #0
 8007268:	f040 80d4 	bne.w	8007414 <_svfprintf_r+0x12f4>
 800726c:	a925      	add	r1, sp, #148	; 0x94
 800726e:	3f10      	subs	r7, #16
 8007270:	460c      	mov	r4, r1
 8007272:	e7b5      	b.n	80071e0 <_svfprintf_r+0x10c0>
 8007274:	460c      	mov	r4, r1
 8007276:	e7cb      	b.n	8007210 <_svfprintf_r+0x10f0>
 8007278:	aa22      	add	r2, sp, #136	; 0x88
 800727a:	4649      	mov	r1, r9
 800727c:	4650      	mov	r0, sl
 800727e:	f001 feb6 	bl	8008fee <__ssprint_r>
 8007282:	2800      	cmp	r0, #0
 8007284:	f040 80c6 	bne.w	8007414 <_svfprintf_r+0x12f4>
 8007288:	ac25      	add	r4, sp, #148	; 0x94
 800728a:	e719      	b.n	80070c0 <_svfprintf_r+0xfa0>
 800728c:	aa22      	add	r2, sp, #136	; 0x88
 800728e:	4649      	mov	r1, r9
 8007290:	4650      	mov	r0, sl
 8007292:	f001 feac 	bl	8008fee <__ssprint_r>
 8007296:	2800      	cmp	r0, #0
 8007298:	f040 80bc 	bne.w	8007414 <_svfprintf_r+0x12f4>
 800729c:	ac25      	add	r4, sp, #148	; 0x94
 800729e:	e726      	b.n	80070ee <_svfprintf_r+0xfce>
 80072a0:	0800b32c 	.word	0x0800b32c
 80072a4:	9a05      	ldr	r2, [sp, #20]
 80072a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072a8:	2a01      	cmp	r2, #1
 80072aa:	f106 0601 	add.w	r6, r6, #1
 80072ae:	f103 0301 	add.w	r3, r3, #1
 80072b2:	f104 0508 	add.w	r5, r4, #8
 80072b6:	dc02      	bgt.n	80072be <_svfprintf_r+0x119e>
 80072b8:	f018 0f01 	tst.w	r8, #1
 80072bc:	d07e      	beq.n	80073bc <_svfprintf_r+0x129c>
 80072be:	2201      	movs	r2, #1
 80072c0:	2b07      	cmp	r3, #7
 80072c2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80072c6:	f8c4 b000 	str.w	fp, [r4]
 80072ca:	6062      	str	r2, [r4, #4]
 80072cc:	dd08      	ble.n	80072e0 <_svfprintf_r+0x11c0>
 80072ce:	aa22      	add	r2, sp, #136	; 0x88
 80072d0:	4649      	mov	r1, r9
 80072d2:	4650      	mov	r0, sl
 80072d4:	f001 fe8b 	bl	8008fee <__ssprint_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	f040 809b 	bne.w	8007414 <_svfprintf_r+0x12f4>
 80072de:	ad25      	add	r5, sp, #148	; 0x94
 80072e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072e8:	606b      	str	r3, [r5, #4]
 80072ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072ec:	4413      	add	r3, r2
 80072ee:	9324      	str	r3, [sp, #144]	; 0x90
 80072f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072f2:	3301      	adds	r3, #1
 80072f4:	2b07      	cmp	r3, #7
 80072f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80072f8:	dc32      	bgt.n	8007360 <_svfprintf_r+0x1240>
 80072fa:	3508      	adds	r5, #8
 80072fc:	9b05      	ldr	r3, [sp, #20]
 80072fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007302:	1e5c      	subs	r4, r3, #1
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	f7f9 fbe6 	bl	8000ad8 <__aeabi_dcmpeq>
 800730c:	2800      	cmp	r0, #0
 800730e:	d130      	bne.n	8007372 <_svfprintf_r+0x1252>
 8007310:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007312:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007314:	9a05      	ldr	r2, [sp, #20]
 8007316:	3101      	adds	r1, #1
 8007318:	3b01      	subs	r3, #1
 800731a:	f10b 0001 	add.w	r0, fp, #1
 800731e:	4413      	add	r3, r2
 8007320:	2907      	cmp	r1, #7
 8007322:	e9c5 0400 	strd	r0, r4, [r5]
 8007326:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800732a:	dd50      	ble.n	80073ce <_svfprintf_r+0x12ae>
 800732c:	aa22      	add	r2, sp, #136	; 0x88
 800732e:	4649      	mov	r1, r9
 8007330:	4650      	mov	r0, sl
 8007332:	f001 fe5c 	bl	8008fee <__ssprint_r>
 8007336:	2800      	cmp	r0, #0
 8007338:	d16c      	bne.n	8007414 <_svfprintf_r+0x12f4>
 800733a:	ad25      	add	r5, sp, #148	; 0x94
 800733c:	ab1e      	add	r3, sp, #120	; 0x78
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007342:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007344:	606b      	str	r3, [r5, #4]
 8007346:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007348:	4413      	add	r3, r2
 800734a:	9324      	str	r3, [sp, #144]	; 0x90
 800734c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800734e:	3301      	adds	r3, #1
 8007350:	2b07      	cmp	r3, #7
 8007352:	9323      	str	r3, [sp, #140]	; 0x8c
 8007354:	f73f adb5 	bgt.w	8006ec2 <_svfprintf_r+0xda2>
 8007358:	f105 0408 	add.w	r4, r5, #8
 800735c:	f7ff bac2 	b.w	80068e4 <_svfprintf_r+0x7c4>
 8007360:	aa22      	add	r2, sp, #136	; 0x88
 8007362:	4649      	mov	r1, r9
 8007364:	4650      	mov	r0, sl
 8007366:	f001 fe42 	bl	8008fee <__ssprint_r>
 800736a:	2800      	cmp	r0, #0
 800736c:	d152      	bne.n	8007414 <_svfprintf_r+0x12f4>
 800736e:	ad25      	add	r5, sp, #148	; 0x94
 8007370:	e7c4      	b.n	80072fc <_svfprintf_r+0x11dc>
 8007372:	2c00      	cmp	r4, #0
 8007374:	dde2      	ble.n	800733c <_svfprintf_r+0x121c>
 8007376:	4e58      	ldr	r6, [pc, #352]	; (80074d8 <_svfprintf_r+0x13b8>)
 8007378:	2710      	movs	r7, #16
 800737a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800737e:	2c10      	cmp	r4, #16
 8007380:	f103 0301 	add.w	r3, r3, #1
 8007384:	f105 0108 	add.w	r1, r5, #8
 8007388:	602e      	str	r6, [r5, #0]
 800738a:	dc07      	bgt.n	800739c <_svfprintf_r+0x127c>
 800738c:	606c      	str	r4, [r5, #4]
 800738e:	2b07      	cmp	r3, #7
 8007390:	4414      	add	r4, r2
 8007392:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8007396:	dcc9      	bgt.n	800732c <_svfprintf_r+0x120c>
 8007398:	460d      	mov	r5, r1
 800739a:	e7cf      	b.n	800733c <_svfprintf_r+0x121c>
 800739c:	3210      	adds	r2, #16
 800739e:	2b07      	cmp	r3, #7
 80073a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80073a4:	606f      	str	r7, [r5, #4]
 80073a6:	dd06      	ble.n	80073b6 <_svfprintf_r+0x1296>
 80073a8:	aa22      	add	r2, sp, #136	; 0x88
 80073aa:	4649      	mov	r1, r9
 80073ac:	4650      	mov	r0, sl
 80073ae:	f001 fe1e 	bl	8008fee <__ssprint_r>
 80073b2:	bb78      	cbnz	r0, 8007414 <_svfprintf_r+0x12f4>
 80073b4:	a925      	add	r1, sp, #148	; 0x94
 80073b6:	3c10      	subs	r4, #16
 80073b8:	460d      	mov	r5, r1
 80073ba:	e7de      	b.n	800737a <_svfprintf_r+0x125a>
 80073bc:	2201      	movs	r2, #1
 80073be:	2b07      	cmp	r3, #7
 80073c0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80073c4:	f8c4 b000 	str.w	fp, [r4]
 80073c8:	6062      	str	r2, [r4, #4]
 80073ca:	ddb7      	ble.n	800733c <_svfprintf_r+0x121c>
 80073cc:	e7ae      	b.n	800732c <_svfprintf_r+0x120c>
 80073ce:	3508      	adds	r5, #8
 80073d0:	e7b4      	b.n	800733c <_svfprintf_r+0x121c>
 80073d2:	460c      	mov	r4, r1
 80073d4:	f7ff ba86 	b.w	80068e4 <_svfprintf_r+0x7c4>
 80073d8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80073dc:	1a9d      	subs	r5, r3, r2
 80073de:	2d00      	cmp	r5, #0
 80073e0:	f77f aa84 	ble.w	80068ec <_svfprintf_r+0x7cc>
 80073e4:	4e3d      	ldr	r6, [pc, #244]	; (80074dc <_svfprintf_r+0x13bc>)
 80073e6:	2710      	movs	r7, #16
 80073e8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80073ec:	2d10      	cmp	r5, #16
 80073ee:	f103 0301 	add.w	r3, r3, #1
 80073f2:	6026      	str	r6, [r4, #0]
 80073f4:	dc18      	bgt.n	8007428 <_svfprintf_r+0x1308>
 80073f6:	6065      	str	r5, [r4, #4]
 80073f8:	2b07      	cmp	r3, #7
 80073fa:	4415      	add	r5, r2
 80073fc:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007400:	f77f aa74 	ble.w	80068ec <_svfprintf_r+0x7cc>
 8007404:	aa22      	add	r2, sp, #136	; 0x88
 8007406:	4649      	mov	r1, r9
 8007408:	4650      	mov	r0, sl
 800740a:	f001 fdf0 	bl	8008fee <__ssprint_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	f43f aa6c 	beq.w	80068ec <_svfprintf_r+0x7cc>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f43f a88a 	beq.w	8006530 <_svfprintf_r+0x410>
 800741c:	4619      	mov	r1, r3
 800741e:	4650      	mov	r0, sl
 8007420:	f000 ff36 	bl	8008290 <_free_r>
 8007424:	f7ff b884 	b.w	8006530 <_svfprintf_r+0x410>
 8007428:	3210      	adds	r2, #16
 800742a:	2b07      	cmp	r3, #7
 800742c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007430:	6067      	str	r7, [r4, #4]
 8007432:	dc02      	bgt.n	800743a <_svfprintf_r+0x131a>
 8007434:	3408      	adds	r4, #8
 8007436:	3d10      	subs	r5, #16
 8007438:	e7d6      	b.n	80073e8 <_svfprintf_r+0x12c8>
 800743a:	aa22      	add	r2, sp, #136	; 0x88
 800743c:	4649      	mov	r1, r9
 800743e:	4650      	mov	r0, sl
 8007440:	f001 fdd5 	bl	8008fee <__ssprint_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	d1e5      	bne.n	8007414 <_svfprintf_r+0x12f4>
 8007448:	ac25      	add	r4, sp, #148	; 0x94
 800744a:	e7f4      	b.n	8007436 <_svfprintf_r+0x1316>
 800744c:	9903      	ldr	r1, [sp, #12]
 800744e:	4650      	mov	r0, sl
 8007450:	f000 ff1e 	bl	8008290 <_free_r>
 8007454:	f7ff ba62 	b.w	800691c <_svfprintf_r+0x7fc>
 8007458:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800745a:	2b00      	cmp	r3, #0
 800745c:	f43f a868 	beq.w	8006530 <_svfprintf_r+0x410>
 8007460:	aa22      	add	r2, sp, #136	; 0x88
 8007462:	4649      	mov	r1, r9
 8007464:	4650      	mov	r0, sl
 8007466:	f001 fdc2 	bl	8008fee <__ssprint_r>
 800746a:	f7ff b861 	b.w	8006530 <_svfprintf_r+0x410>
 800746e:	ea56 0207 	orrs.w	r2, r6, r7
 8007472:	f8cd 800c 	str.w	r8, [sp, #12]
 8007476:	f43f ab78 	beq.w	8006b6a <_svfprintf_r+0xa4a>
 800747a:	2b01      	cmp	r3, #1
 800747c:	f43f ac0d 	beq.w	8006c9a <_svfprintf_r+0xb7a>
 8007480:	2b02      	cmp	r3, #2
 8007482:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8007486:	f43f ac55 	beq.w	8006d34 <_svfprintf_r+0xc14>
 800748a:	08f2      	lsrs	r2, r6, #3
 800748c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8007490:	08f8      	lsrs	r0, r7, #3
 8007492:	f006 0307 	and.w	r3, r6, #7
 8007496:	4607      	mov	r7, r0
 8007498:	4616      	mov	r6, r2
 800749a:	3330      	adds	r3, #48	; 0x30
 800749c:	ea56 0207 	orrs.w	r2, r6, r7
 80074a0:	4659      	mov	r1, fp
 80074a2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80074a6:	d1f0      	bne.n	800748a <_svfprintf_r+0x136a>
 80074a8:	9a03      	ldr	r2, [sp, #12]
 80074aa:	07d2      	lsls	r2, r2, #31
 80074ac:	d506      	bpl.n	80074bc <_svfprintf_r+0x139c>
 80074ae:	2b30      	cmp	r3, #48	; 0x30
 80074b0:	d004      	beq.n	80074bc <_svfprintf_r+0x139c>
 80074b2:	2330      	movs	r3, #48	; 0x30
 80074b4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80074b8:	f1a1 0b02 	sub.w	fp, r1, #2
 80074bc:	ab4e      	add	r3, sp, #312	; 0x138
 80074be:	eba3 030b 	sub.w	r3, r3, fp
 80074c2:	9e04      	ldr	r6, [sp, #16]
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	2300      	movs	r3, #0
 80074c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074cc:	9303      	str	r3, [sp, #12]
 80074ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80074d2:	461d      	mov	r5, r3
 80074d4:	f7ff b94c 	b.w	8006770 <_svfprintf_r+0x650>
 80074d8:	0800b32c 	.word	0x0800b32c
 80074dc:	0800b31c 	.word	0x0800b31c

080074e0 <register_fini>:
 80074e0:	4b02      	ldr	r3, [pc, #8]	; (80074ec <register_fini+0xc>)
 80074e2:	b113      	cbz	r3, 80074ea <register_fini+0xa>
 80074e4:	4802      	ldr	r0, [pc, #8]	; (80074f0 <register_fini+0x10>)
 80074e6:	f000 b805 	b.w	80074f4 <atexit>
 80074ea:	4770      	bx	lr
 80074ec:	00000000 	.word	0x00000000
 80074f0:	080081c1 	.word	0x080081c1

080074f4 <atexit>:
 80074f4:	2300      	movs	r3, #0
 80074f6:	4601      	mov	r1, r0
 80074f8:	461a      	mov	r2, r3
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 be00 	b.w	8009100 <__register_exitproc>

08007500 <quorem>:
 8007500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	6903      	ldr	r3, [r0, #16]
 8007506:	690c      	ldr	r4, [r1, #16]
 8007508:	42a3      	cmp	r3, r4
 800750a:	4607      	mov	r7, r0
 800750c:	f2c0 8081 	blt.w	8007612 <quorem+0x112>
 8007510:	3c01      	subs	r4, #1
 8007512:	f101 0814 	add.w	r8, r1, #20
 8007516:	f100 0514 	add.w	r5, r0, #20
 800751a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007528:	3301      	adds	r3, #1
 800752a:	429a      	cmp	r2, r3
 800752c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007534:	fbb2 f6f3 	udiv	r6, r2, r3
 8007538:	d331      	bcc.n	800759e <quorem+0x9e>
 800753a:	f04f 0e00 	mov.w	lr, #0
 800753e:	4640      	mov	r0, r8
 8007540:	46ac      	mov	ip, r5
 8007542:	46f2      	mov	sl, lr
 8007544:	f850 2b04 	ldr.w	r2, [r0], #4
 8007548:	b293      	uxth	r3, r2
 800754a:	fb06 e303 	mla	r3, r6, r3, lr
 800754e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007552:	b29b      	uxth	r3, r3
 8007554:	ebaa 0303 	sub.w	r3, sl, r3
 8007558:	0c12      	lsrs	r2, r2, #16
 800755a:	f8dc a000 	ldr.w	sl, [ip]
 800755e:	fb06 e202 	mla	r2, r6, r2, lr
 8007562:	fa13 f38a 	uxtah	r3, r3, sl
 8007566:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800756a:	fa1f fa82 	uxth.w	sl, r2
 800756e:	f8dc 2000 	ldr.w	r2, [ip]
 8007572:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800757a:	b29b      	uxth	r3, r3
 800757c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007580:	4581      	cmp	r9, r0
 8007582:	f84c 3b04 	str.w	r3, [ip], #4
 8007586:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800758a:	d2db      	bcs.n	8007544 <quorem+0x44>
 800758c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007590:	b92b      	cbnz	r3, 800759e <quorem+0x9e>
 8007592:	9b01      	ldr	r3, [sp, #4]
 8007594:	3b04      	subs	r3, #4
 8007596:	429d      	cmp	r5, r3
 8007598:	461a      	mov	r2, r3
 800759a:	d32e      	bcc.n	80075fa <quorem+0xfa>
 800759c:	613c      	str	r4, [r7, #16]
 800759e:	4638      	mov	r0, r7
 80075a0:	f001 fbca 	bl	8008d38 <__mcmp>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	db24      	blt.n	80075f2 <quorem+0xf2>
 80075a8:	3601      	adds	r6, #1
 80075aa:	4628      	mov	r0, r5
 80075ac:	f04f 0c00 	mov.w	ip, #0
 80075b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80075b4:	f8d0 e000 	ldr.w	lr, [r0]
 80075b8:	b293      	uxth	r3, r2
 80075ba:	ebac 0303 	sub.w	r3, ip, r3
 80075be:	0c12      	lsrs	r2, r2, #16
 80075c0:	fa13 f38e 	uxtah	r3, r3, lr
 80075c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075d2:	45c1      	cmp	r9, r8
 80075d4:	f840 3b04 	str.w	r3, [r0], #4
 80075d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075dc:	d2e8      	bcs.n	80075b0 <quorem+0xb0>
 80075de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075e6:	b922      	cbnz	r2, 80075f2 <quorem+0xf2>
 80075e8:	3b04      	subs	r3, #4
 80075ea:	429d      	cmp	r5, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	d30a      	bcc.n	8007606 <quorem+0x106>
 80075f0:	613c      	str	r4, [r7, #16]
 80075f2:	4630      	mov	r0, r6
 80075f4:	b003      	add	sp, #12
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	2a00      	cmp	r2, #0
 8007600:	d1cc      	bne.n	800759c <quorem+0x9c>
 8007602:	3c01      	subs	r4, #1
 8007604:	e7c7      	b.n	8007596 <quorem+0x96>
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	3b04      	subs	r3, #4
 800760a:	2a00      	cmp	r2, #0
 800760c:	d1f0      	bne.n	80075f0 <quorem+0xf0>
 800760e:	3c01      	subs	r4, #1
 8007610:	e7eb      	b.n	80075ea <quorem+0xea>
 8007612:	2000      	movs	r0, #0
 8007614:	e7ee      	b.n	80075f4 <quorem+0xf4>
	...

08007618 <_dtoa_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	ed2d 8b02 	vpush	{d8}
 8007620:	b095      	sub	sp, #84	; 0x54
 8007622:	ec57 6b10 	vmov	r6, r7, d0
 8007626:	9105      	str	r1, [sp, #20]
 8007628:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800762a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800762c:	9209      	str	r2, [sp, #36]	; 0x24
 800762e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007632:	4604      	mov	r4, r0
 8007634:	930f      	str	r3, [sp, #60]	; 0x3c
 8007636:	b141      	cbz	r1, 800764a <_dtoa_r+0x32>
 8007638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800763a:	604a      	str	r2, [r1, #4]
 800763c:	2301      	movs	r3, #1
 800763e:	4093      	lsls	r3, r2
 8007640:	608b      	str	r3, [r1, #8]
 8007642:	f001 f96e 	bl	8008922 <_Bfree>
 8007646:	2300      	movs	r3, #0
 8007648:	6423      	str	r3, [r4, #64]	; 0x40
 800764a:	1e3b      	subs	r3, r7, #0
 800764c:	bfb9      	ittee	lt
 800764e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007652:	9303      	strlt	r3, [sp, #12]
 8007654:	2300      	movge	r3, #0
 8007656:	602b      	strge	r3, [r5, #0]
 8007658:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800765c:	4ba2      	ldr	r3, [pc, #648]	; (80078e8 <_dtoa_r+0x2d0>)
 800765e:	bfbc      	itt	lt
 8007660:	2201      	movlt	r2, #1
 8007662:	602a      	strlt	r2, [r5, #0]
 8007664:	ea33 0309 	bics.w	r3, r3, r9
 8007668:	d11b      	bne.n	80076a2 <_dtoa_r+0x8a>
 800766a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800766c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007676:	4333      	orrs	r3, r6
 8007678:	f000 8578 	beq.w	800816c <_dtoa_r+0xb54>
 800767c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800767e:	b90b      	cbnz	r3, 8007684 <_dtoa_r+0x6c>
 8007680:	4b9a      	ldr	r3, [pc, #616]	; (80078ec <_dtoa_r+0x2d4>)
 8007682:	e024      	b.n	80076ce <_dtoa_r+0xb6>
 8007684:	4b99      	ldr	r3, [pc, #612]	; (80078ec <_dtoa_r+0x2d4>)
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	3303      	adds	r3, #3
 800768a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	9800      	ldr	r0, [sp, #0]
 8007690:	b015      	add	sp, #84	; 0x54
 8007692:	ecbd 8b02 	vpop	{d8}
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	4b95      	ldr	r3, [pc, #596]	; (80078f0 <_dtoa_r+0x2d8>)
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	3308      	adds	r3, #8
 80076a0:	e7f3      	b.n	800768a <_dtoa_r+0x72>
 80076a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	ec51 0b17 	vmov	r0, r1, d7
 80076ac:	2300      	movs	r3, #0
 80076ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80076b2:	f7f9 fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b6:	4680      	mov	r8, r0
 80076b8:	b158      	cbz	r0, 80076d2 <_dtoa_r+0xba>
 80076ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076bc:	2301      	movs	r3, #1
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 854f 	beq.w	8008166 <_dtoa_r+0xb4e>
 80076c8:	488a      	ldr	r0, [pc, #552]	; (80078f4 <_dtoa_r+0x2dc>)
 80076ca:	6018      	str	r0, [r3, #0]
 80076cc:	1e43      	subs	r3, r0, #1
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	e7dd      	b.n	800768e <_dtoa_r+0x76>
 80076d2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80076d6:	aa12      	add	r2, sp, #72	; 0x48
 80076d8:	a913      	add	r1, sp, #76	; 0x4c
 80076da:	4620      	mov	r0, r4
 80076dc:	f001 fbd0 	bl	8008e80 <__d2b>
 80076e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076e4:	4683      	mov	fp, r0
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	d07c      	beq.n	80077e4 <_dtoa_r+0x1cc>
 80076ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ec:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80076f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80076f8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076fc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007700:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007704:	4b7c      	ldr	r3, [pc, #496]	; (80078f8 <_dtoa_r+0x2e0>)
 8007706:	2200      	movs	r2, #0
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f8 fdc4 	bl	8000298 <__aeabi_dsub>
 8007710:	a36f      	add	r3, pc, #444	; (adr r3, 80078d0 <_dtoa_r+0x2b8>)
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	f7f8 ff77 	bl	8000608 <__aeabi_dmul>
 800771a:	a36f      	add	r3, pc, #444	; (adr r3, 80078d8 <_dtoa_r+0x2c0>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 fdbc 	bl	800029c <__adddf3>
 8007724:	4606      	mov	r6, r0
 8007726:	4628      	mov	r0, r5
 8007728:	460f      	mov	r7, r1
 800772a:	f7f8 ff03 	bl	8000534 <__aeabi_i2d>
 800772e:	a36c      	add	r3, pc, #432	; (adr r3, 80078e0 <_dtoa_r+0x2c8>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f7f8 ff68 	bl	8000608 <__aeabi_dmul>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4630      	mov	r0, r6
 800773e:	4639      	mov	r1, r7
 8007740:	f7f8 fdac 	bl	800029c <__adddf3>
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	f7f9 fa0e 	bl	8000b68 <__aeabi_d2iz>
 800774c:	2200      	movs	r2, #0
 800774e:	4682      	mov	sl, r0
 8007750:	2300      	movs	r3, #0
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f9 f9c9 	bl	8000aec <__aeabi_dcmplt>
 800775a:	b148      	cbz	r0, 8007770 <_dtoa_r+0x158>
 800775c:	4650      	mov	r0, sl
 800775e:	f7f8 fee9 	bl	8000534 <__aeabi_i2d>
 8007762:	4632      	mov	r2, r6
 8007764:	463b      	mov	r3, r7
 8007766:	f7f9 f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800776a:	b908      	cbnz	r0, 8007770 <_dtoa_r+0x158>
 800776c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007770:	f1ba 0f16 	cmp.w	sl, #22
 8007774:	d854      	bhi.n	8007820 <_dtoa_r+0x208>
 8007776:	4b61      	ldr	r3, [pc, #388]	; (80078fc <_dtoa_r+0x2e4>)
 8007778:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007784:	f7f9 f9b2 	bl	8000aec <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d04b      	beq.n	8007824 <_dtoa_r+0x20c>
 800778c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007790:	2300      	movs	r3, #0
 8007792:	930e      	str	r3, [sp, #56]	; 0x38
 8007794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007796:	1b5d      	subs	r5, r3, r5
 8007798:	1e6b      	subs	r3, r5, #1
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	bf43      	ittte	mi
 800779e:	2300      	movmi	r3, #0
 80077a0:	f1c5 0801 	rsbmi	r8, r5, #1
 80077a4:	9304      	strmi	r3, [sp, #16]
 80077a6:	f04f 0800 	movpl.w	r8, #0
 80077aa:	f1ba 0f00 	cmp.w	sl, #0
 80077ae:	db3b      	blt.n	8007828 <_dtoa_r+0x210>
 80077b0:	9b04      	ldr	r3, [sp, #16]
 80077b2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80077b6:	4453      	add	r3, sl
 80077b8:	9304      	str	r3, [sp, #16]
 80077ba:	2300      	movs	r3, #0
 80077bc:	9306      	str	r3, [sp, #24]
 80077be:	9b05      	ldr	r3, [sp, #20]
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d86a      	bhi.n	800789a <_dtoa_r+0x282>
 80077c4:	2b05      	cmp	r3, #5
 80077c6:	bfc4      	itt	gt
 80077c8:	3b04      	subgt	r3, #4
 80077ca:	9305      	strgt	r3, [sp, #20]
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	f1a3 0302 	sub.w	r3, r3, #2
 80077d2:	bfcc      	ite	gt
 80077d4:	2500      	movgt	r5, #0
 80077d6:	2501      	movle	r5, #1
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d86a      	bhi.n	80078b2 <_dtoa_r+0x29a>
 80077dc:	e8df f003 	tbb	[pc, r3]
 80077e0:	5b4d4f2c 	.word	0x5b4d4f2c
 80077e4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80077e8:	441d      	add	r5, r3
 80077ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	bfc1      	itttt	gt
 80077f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077fa:	fa09 f303 	lslgt.w	r3, r9, r3
 80077fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007802:	bfda      	itte	le
 8007804:	f1c3 0320 	rsble	r3, r3, #32
 8007808:	fa06 f003 	lslle.w	r0, r6, r3
 800780c:	4318      	orrgt	r0, r3
 800780e:	f7f8 fe81 	bl	8000514 <__aeabi_ui2d>
 8007812:	2301      	movs	r3, #1
 8007814:	4606      	mov	r6, r0
 8007816:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800781a:	3d01      	subs	r5, #1
 800781c:	9310      	str	r3, [sp, #64]	; 0x40
 800781e:	e771      	b.n	8007704 <_dtoa_r+0xec>
 8007820:	2301      	movs	r3, #1
 8007822:	e7b6      	b.n	8007792 <_dtoa_r+0x17a>
 8007824:	900e      	str	r0, [sp, #56]	; 0x38
 8007826:	e7b5      	b.n	8007794 <_dtoa_r+0x17c>
 8007828:	f1ca 0300 	rsb	r3, sl, #0
 800782c:	9306      	str	r3, [sp, #24]
 800782e:	2300      	movs	r3, #0
 8007830:	eba8 080a 	sub.w	r8, r8, sl
 8007834:	930d      	str	r3, [sp, #52]	; 0x34
 8007836:	e7c2      	b.n	80077be <_dtoa_r+0x1a6>
 8007838:	2300      	movs	r3, #0
 800783a:	9308      	str	r3, [sp, #32]
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc3a      	bgt.n	80078b8 <_dtoa_r+0x2a0>
 8007842:	f04f 0901 	mov.w	r9, #1
 8007846:	f8cd 9004 	str.w	r9, [sp, #4]
 800784a:	464b      	mov	r3, r9
 800784c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007850:	2200      	movs	r2, #0
 8007852:	6462      	str	r2, [r4, #68]	; 0x44
 8007854:	2204      	movs	r2, #4
 8007856:	f102 0014 	add.w	r0, r2, #20
 800785a:	4298      	cmp	r0, r3
 800785c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800785e:	d931      	bls.n	80078c4 <_dtoa_r+0x2ac>
 8007860:	4620      	mov	r0, r4
 8007862:	f001 f839 	bl	80088d8 <_Balloc>
 8007866:	9000      	str	r0, [sp, #0]
 8007868:	2800      	cmp	r0, #0
 800786a:	d14d      	bne.n	8007908 <_dtoa_r+0x2f0>
 800786c:	4b24      	ldr	r3, [pc, #144]	; (8007900 <_dtoa_r+0x2e8>)
 800786e:	4602      	mov	r2, r0
 8007870:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007874:	4823      	ldr	r0, [pc, #140]	; (8007904 <_dtoa_r+0x2ec>)
 8007876:	f001 fc83 	bl	8009180 <__assert_func>
 800787a:	2301      	movs	r3, #1
 800787c:	e7dd      	b.n	800783a <_dtoa_r+0x222>
 800787e:	2300      	movs	r3, #0
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	eb0a 0903 	add.w	r9, sl, r3
 8007888:	f109 0301 	add.w	r3, r9, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	bfb8      	it	lt
 8007892:	2301      	movlt	r3, #1
 8007894:	e7dc      	b.n	8007850 <_dtoa_r+0x238>
 8007896:	2301      	movs	r3, #1
 8007898:	e7f2      	b.n	8007880 <_dtoa_r+0x268>
 800789a:	2501      	movs	r5, #1
 800789c:	2300      	movs	r3, #0
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	9508      	str	r5, [sp, #32]
 80078a2:	f04f 39ff 	mov.w	r9, #4294967295
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80078ac:	2312      	movs	r3, #18
 80078ae:	9209      	str	r2, [sp, #36]	; 0x24
 80078b0:	e7ce      	b.n	8007850 <_dtoa_r+0x238>
 80078b2:	2301      	movs	r3, #1
 80078b4:	9308      	str	r3, [sp, #32]
 80078b6:	e7f4      	b.n	80078a2 <_dtoa_r+0x28a>
 80078b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80078bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80078c0:	464b      	mov	r3, r9
 80078c2:	e7c5      	b.n	8007850 <_dtoa_r+0x238>
 80078c4:	3101      	adds	r1, #1
 80078c6:	6461      	str	r1, [r4, #68]	; 0x44
 80078c8:	0052      	lsls	r2, r2, #1
 80078ca:	e7c4      	b.n	8007856 <_dtoa_r+0x23e>
 80078cc:	f3af 8000 	nop.w
 80078d0:	636f4361 	.word	0x636f4361
 80078d4:	3fd287a7 	.word	0x3fd287a7
 80078d8:	8b60c8b3 	.word	0x8b60c8b3
 80078dc:	3fc68a28 	.word	0x3fc68a28
 80078e0:	509f79fb 	.word	0x509f79fb
 80078e4:	3fd34413 	.word	0x3fd34413
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	0800b33c 	.word	0x0800b33c
 80078f0:	0800b340 	.word	0x0800b340
 80078f4:	0800b31b 	.word	0x0800b31b
 80078f8:	3ff80000 	.word	0x3ff80000
 80078fc:	0800b448 	.word	0x0800b448
 8007900:	0800b349 	.word	0x0800b349
 8007904:	0800b35a 	.word	0x0800b35a
 8007908:	9b00      	ldr	r3, [sp, #0]
 800790a:	6423      	str	r3, [r4, #64]	; 0x40
 800790c:	9b01      	ldr	r3, [sp, #4]
 800790e:	2b0e      	cmp	r3, #14
 8007910:	f200 80ad 	bhi.w	8007a6e <_dtoa_r+0x456>
 8007914:	2d00      	cmp	r5, #0
 8007916:	f000 80aa 	beq.w	8007a6e <_dtoa_r+0x456>
 800791a:	f1ba 0f00 	cmp.w	sl, #0
 800791e:	dd36      	ble.n	800798e <_dtoa_r+0x376>
 8007920:	4ac2      	ldr	r2, [pc, #776]	; (8007c2c <_dtoa_r+0x614>)
 8007922:	f00a 030f 	and.w	r3, sl, #15
 8007926:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800792a:	ed93 7b00 	vldr	d7, [r3]
 800792e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007932:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007936:	eeb0 8a47 	vmov.f32	s16, s14
 800793a:	eef0 8a67 	vmov.f32	s17, s15
 800793e:	d016      	beq.n	800796e <_dtoa_r+0x356>
 8007940:	4bbb      	ldr	r3, [pc, #748]	; (8007c30 <_dtoa_r+0x618>)
 8007942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007946:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800794a:	f7f8 ff87 	bl	800085c <__aeabi_ddiv>
 800794e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007952:	f007 070f 	and.w	r7, r7, #15
 8007956:	2503      	movs	r5, #3
 8007958:	4eb5      	ldr	r6, [pc, #724]	; (8007c30 <_dtoa_r+0x618>)
 800795a:	b957      	cbnz	r7, 8007972 <_dtoa_r+0x35a>
 800795c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007960:	ec53 2b18 	vmov	r2, r3, d8
 8007964:	f7f8 ff7a 	bl	800085c <__aeabi_ddiv>
 8007968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800796c:	e029      	b.n	80079c2 <_dtoa_r+0x3aa>
 800796e:	2502      	movs	r5, #2
 8007970:	e7f2      	b.n	8007958 <_dtoa_r+0x340>
 8007972:	07f9      	lsls	r1, r7, #31
 8007974:	d508      	bpl.n	8007988 <_dtoa_r+0x370>
 8007976:	ec51 0b18 	vmov	r0, r1, d8
 800797a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800797e:	f7f8 fe43 	bl	8000608 <__aeabi_dmul>
 8007982:	ec41 0b18 	vmov	d8, r0, r1
 8007986:	3501      	adds	r5, #1
 8007988:	107f      	asrs	r7, r7, #1
 800798a:	3608      	adds	r6, #8
 800798c:	e7e5      	b.n	800795a <_dtoa_r+0x342>
 800798e:	f000 80a6 	beq.w	8007ade <_dtoa_r+0x4c6>
 8007992:	f1ca 0600 	rsb	r6, sl, #0
 8007996:	4ba5      	ldr	r3, [pc, #660]	; (8007c2c <_dtoa_r+0x614>)
 8007998:	4fa5      	ldr	r7, [pc, #660]	; (8007c30 <_dtoa_r+0x618>)
 800799a:	f006 020f 	and.w	r2, r6, #15
 800799e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079aa:	f7f8 fe2d 	bl	8000608 <__aeabi_dmul>
 80079ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b2:	1136      	asrs	r6, r6, #4
 80079b4:	2300      	movs	r3, #0
 80079b6:	2502      	movs	r5, #2
 80079b8:	2e00      	cmp	r6, #0
 80079ba:	f040 8085 	bne.w	8007ac8 <_dtoa_r+0x4b0>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1d2      	bne.n	8007968 <_dtoa_r+0x350>
 80079c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 808c 	beq.w	8007ae2 <_dtoa_r+0x4ca>
 80079ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079ce:	4b99      	ldr	r3, [pc, #612]	; (8007c34 <_dtoa_r+0x61c>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	f7f9 f889 	bl	8000aec <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f000 8081 	beq.w	8007ae2 <_dtoa_r+0x4ca>
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d07d      	beq.n	8007ae2 <_dtoa_r+0x4ca>
 80079e6:	f1b9 0f00 	cmp.w	r9, #0
 80079ea:	dd3c      	ble.n	8007a66 <_dtoa_r+0x44e>
 80079ec:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079f0:	9307      	str	r3, [sp, #28]
 80079f2:	2200      	movs	r2, #0
 80079f4:	4b90      	ldr	r3, [pc, #576]	; (8007c38 <_dtoa_r+0x620>)
 80079f6:	4630      	mov	r0, r6
 80079f8:	4639      	mov	r1, r7
 80079fa:	f7f8 fe05 	bl	8000608 <__aeabi_dmul>
 80079fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a02:	3501      	adds	r5, #1
 8007a04:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007a08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f7f8 fd91 	bl	8000534 <__aeabi_i2d>
 8007a12:	4632      	mov	r2, r6
 8007a14:	463b      	mov	r3, r7
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	4b88      	ldr	r3, [pc, #544]	; (8007c3c <_dtoa_r+0x624>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f7f8 fc3d 	bl	800029c <__adddf3>
 8007a22:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d15c      	bne.n	8007aec <_dtoa_r+0x4d4>
 8007a32:	4b83      	ldr	r3, [pc, #524]	; (8007c40 <_dtoa_r+0x628>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 fc2d 	bl	8000298 <__aeabi_dsub>
 8007a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	f7f9 f86f 	bl	8000b28 <__aeabi_dcmpgt>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f040 8295 	bne.w	8007f7a <_dtoa_r+0x962>
 8007a50:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a54:	4630      	mov	r0, r6
 8007a56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f9 f846 	bl	8000aec <__aeabi_dcmplt>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f040 8287 	bne.w	8007f74 <_dtoa_r+0x95c>
 8007a66:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f2c0 8157 	blt.w	8007d24 <_dtoa_r+0x70c>
 8007a76:	f1ba 0f0e 	cmp.w	sl, #14
 8007a7a:	f300 8153 	bgt.w	8007d24 <_dtoa_r+0x70c>
 8007a7e:	4b6b      	ldr	r3, [pc, #428]	; (8007c2c <_dtoa_r+0x614>)
 8007a80:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f280 80e2 	bge.w	8007c54 <_dtoa_r+0x63c>
 8007a90:	9b01      	ldr	r3, [sp, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f300 80de 	bgt.w	8007c54 <_dtoa_r+0x63c>
 8007a98:	f040 826c 	bne.w	8007f74 <_dtoa_r+0x95c>
 8007a9c:	4b68      	ldr	r3, [pc, #416]	; (8007c40 <_dtoa_r+0x628>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fdb0 	bl	8000608 <__aeabi_dmul>
 8007aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aac:	f7f9 f832 	bl	8000b14 <__aeabi_dcmpge>
 8007ab0:	9e01      	ldr	r6, [sp, #4]
 8007ab2:	4637      	mov	r7, r6
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 8242 	bne.w	8007f3e <_dtoa_r+0x926>
 8007aba:	9d00      	ldr	r5, [sp, #0]
 8007abc:	2331      	movs	r3, #49	; 0x31
 8007abe:	f805 3b01 	strb.w	r3, [r5], #1
 8007ac2:	f10a 0a01 	add.w	sl, sl, #1
 8007ac6:	e23e      	b.n	8007f46 <_dtoa_r+0x92e>
 8007ac8:	07f2      	lsls	r2, r6, #31
 8007aca:	d505      	bpl.n	8007ad8 <_dtoa_r+0x4c0>
 8007acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad0:	f7f8 fd9a 	bl	8000608 <__aeabi_dmul>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	1076      	asrs	r6, r6, #1
 8007ada:	3708      	adds	r7, #8
 8007adc:	e76c      	b.n	80079b8 <_dtoa_r+0x3a0>
 8007ade:	2502      	movs	r5, #2
 8007ae0:	e76f      	b.n	80079c2 <_dtoa_r+0x3aa>
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8007aea:	e78d      	b.n	8007a08 <_dtoa_r+0x3f0>
 8007aec:	9900      	ldr	r1, [sp, #0]
 8007aee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af2:	4b4e      	ldr	r3, [pc, #312]	; (8007c2c <_dtoa_r+0x614>)
 8007af4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007af8:	4401      	add	r1, r0
 8007afa:	9102      	str	r1, [sp, #8]
 8007afc:	9908      	ldr	r1, [sp, #32]
 8007afe:	eeb0 8a47 	vmov.f32	s16, s14
 8007b02:	eef0 8a67 	vmov.f32	s17, s15
 8007b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	d045      	beq.n	8007b9e <_dtoa_r+0x586>
 8007b12:	494c      	ldr	r1, [pc, #304]	; (8007c44 <_dtoa_r+0x62c>)
 8007b14:	2000      	movs	r0, #0
 8007b16:	f7f8 fea1 	bl	800085c <__aeabi_ddiv>
 8007b1a:	ec53 2b18 	vmov	r2, r3, d8
 8007b1e:	f7f8 fbbb 	bl	8000298 <__aeabi_dsub>
 8007b22:	9d00      	ldr	r5, [sp, #0]
 8007b24:	ec41 0b18 	vmov	d8, r0, r1
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7f9 f81c 	bl	8000b68 <__aeabi_d2iz>
 8007b30:	900c      	str	r0, [sp, #48]	; 0x30
 8007b32:	f7f8 fcff 	bl	8000534 <__aeabi_i2d>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 fbab 	bl	8000298 <__aeabi_dsub>
 8007b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b44:	3330      	adds	r3, #48	; 0x30
 8007b46:	f805 3b01 	strb.w	r3, [r5], #1
 8007b4a:	ec53 2b18 	vmov	r2, r3, d8
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460f      	mov	r7, r1
 8007b52:	f7f8 ffcb 	bl	8000aec <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d165      	bne.n	8007c26 <_dtoa_r+0x60e>
 8007b5a:	4632      	mov	r2, r6
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	4935      	ldr	r1, [pc, #212]	; (8007c34 <_dtoa_r+0x61c>)
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7f8 fb99 	bl	8000298 <__aeabi_dsub>
 8007b66:	ec53 2b18 	vmov	r2, r3, d8
 8007b6a:	f7f8 ffbf 	bl	8000aec <__aeabi_dcmplt>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f040 80b8 	bne.w	8007ce4 <_dtoa_r+0x6cc>
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	429d      	cmp	r5, r3
 8007b78:	f43f af75 	beq.w	8007a66 <_dtoa_r+0x44e>
 8007b7c:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <_dtoa_r+0x620>)
 8007b7e:	ec51 0b18 	vmov	r0, r1, d8
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fd40 	bl	8000608 <__aeabi_dmul>
 8007b88:	4b2b      	ldr	r3, [pc, #172]	; (8007c38 <_dtoa_r+0x620>)
 8007b8a:	ec41 0b18 	vmov	d8, r0, r1
 8007b8e:	2200      	movs	r2, #0
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 fd38 	bl	8000608 <__aeabi_dmul>
 8007b98:	4606      	mov	r6, r0
 8007b9a:	460f      	mov	r7, r1
 8007b9c:	e7c4      	b.n	8007b28 <_dtoa_r+0x510>
 8007b9e:	ec51 0b17 	vmov	r0, r1, d7
 8007ba2:	f7f8 fd31 	bl	8000608 <__aeabi_dmul>
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	9d00      	ldr	r5, [sp, #0]
 8007baa:	930c      	str	r3, [sp, #48]	; 0x30
 8007bac:	ec41 0b18 	vmov	d8, r0, r1
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f7f8 ffd8 	bl	8000b68 <__aeabi_d2iz>
 8007bb8:	9011      	str	r0, [sp, #68]	; 0x44
 8007bba:	f7f8 fcbb 	bl	8000534 <__aeabi_i2d>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 fb67 	bl	8000298 <__aeabi_dsub>
 8007bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bcc:	3330      	adds	r3, #48	; 0x30
 8007bce:	f805 3b01 	strb.w	r3, [r5], #1
 8007bd2:	9b02      	ldr	r3, [sp, #8]
 8007bd4:	429d      	cmp	r5, r3
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	460f      	mov	r7, r1
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	d133      	bne.n	8007c48 <_dtoa_r+0x630>
 8007be0:	4b18      	ldr	r3, [pc, #96]	; (8007c44 <_dtoa_r+0x62c>)
 8007be2:	ec51 0b18 	vmov	r0, r1, d8
 8007be6:	f7f8 fb59 	bl	800029c <__adddf3>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 ff99 	bl	8000b28 <__aeabi_dcmpgt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d174      	bne.n	8007ce4 <_dtoa_r+0x6cc>
 8007bfa:	ec53 2b18 	vmov	r2, r3, d8
 8007bfe:	4911      	ldr	r1, [pc, #68]	; (8007c44 <_dtoa_r+0x62c>)
 8007c00:	2000      	movs	r0, #0
 8007c02:	f7f8 fb49 	bl	8000298 <__aeabi_dsub>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 ff6d 	bl	8000aec <__aeabi_dcmplt>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f af27 	beq.w	8007a66 <_dtoa_r+0x44e>
 8007c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c1a:	1e6b      	subs	r3, r5, #1
 8007c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c1e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c22:	2b30      	cmp	r3, #48	; 0x30
 8007c24:	d0f8      	beq.n	8007c18 <_dtoa_r+0x600>
 8007c26:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007c2a:	e049      	b.n	8007cc0 <_dtoa_r+0x6a8>
 8007c2c:	0800b448 	.word	0x0800b448
 8007c30:	0800b420 	.word	0x0800b420
 8007c34:	3ff00000 	.word	0x3ff00000
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	401c0000 	.word	0x401c0000
 8007c40:	40140000 	.word	0x40140000
 8007c44:	3fe00000 	.word	0x3fe00000
 8007c48:	4baf      	ldr	r3, [pc, #700]	; (8007f08 <_dtoa_r+0x8f0>)
 8007c4a:	f7f8 fcdd 	bl	8000608 <__aeabi_dmul>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	e7ad      	b.n	8007bb0 <_dtoa_r+0x598>
 8007c54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c58:	9d00      	ldr	r5, [sp, #0]
 8007c5a:	4642      	mov	r2, r8
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4639      	mov	r1, r7
 8007c62:	f7f8 fdfb 	bl	800085c <__aeabi_ddiv>
 8007c66:	f7f8 ff7f 	bl	8000b68 <__aeabi_d2iz>
 8007c6a:	9002      	str	r0, [sp, #8]
 8007c6c:	f7f8 fc62 	bl	8000534 <__aeabi_i2d>
 8007c70:	4642      	mov	r2, r8
 8007c72:	464b      	mov	r3, r9
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 fb0a 	bl	8000298 <__aeabi_dsub>
 8007c84:	9e02      	ldr	r6, [sp, #8]
 8007c86:	9f01      	ldr	r7, [sp, #4]
 8007c88:	3630      	adds	r6, #48	; 0x30
 8007c8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c8e:	9e00      	ldr	r6, [sp, #0]
 8007c90:	1bae      	subs	r6, r5, r6
 8007c92:	42b7      	cmp	r7, r6
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	d137      	bne.n	8007d0a <_dtoa_r+0x6f2>
 8007c9a:	f7f8 faff 	bl	800029c <__adddf3>
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	f7f8 ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 8007caa:	b9c8      	cbnz	r0, 8007ce0 <_dtoa_r+0x6c8>
 8007cac:	4642      	mov	r2, r8
 8007cae:	464b      	mov	r3, r9
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb8:	b110      	cbz	r0, 8007cc0 <_dtoa_r+0x6a8>
 8007cba:	9b02      	ldr	r3, [sp, #8]
 8007cbc:	07d9      	lsls	r1, r3, #31
 8007cbe:	d40f      	bmi.n	8007ce0 <_dtoa_r+0x6c8>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	f000 fe2d 	bl	8008922 <_Bfree>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	702b      	strb	r3, [r5, #0]
 8007ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cce:	f10a 0001 	add.w	r0, sl, #1
 8007cd2:	6018      	str	r0, [r3, #0]
 8007cd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f43f acd9 	beq.w	800768e <_dtoa_r+0x76>
 8007cdc:	601d      	str	r5, [r3, #0]
 8007cde:	e4d6      	b.n	800768e <_dtoa_r+0x76>
 8007ce0:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	461d      	mov	r5, r3
 8007ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cec:	2a39      	cmp	r2, #57	; 0x39
 8007cee:	d108      	bne.n	8007d02 <_dtoa_r+0x6ea>
 8007cf0:	9a00      	ldr	r2, [sp, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d1f7      	bne.n	8007ce6 <_dtoa_r+0x6ce>
 8007cf6:	9a07      	ldr	r2, [sp, #28]
 8007cf8:	9900      	ldr	r1, [sp, #0]
 8007cfa:	3201      	adds	r2, #1
 8007cfc:	9207      	str	r2, [sp, #28]
 8007cfe:	2230      	movs	r2, #48	; 0x30
 8007d00:	700a      	strb	r2, [r1, #0]
 8007d02:	781a      	ldrb	r2, [r3, #0]
 8007d04:	3201      	adds	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	e78d      	b.n	8007c26 <_dtoa_r+0x60e>
 8007d0a:	4b7f      	ldr	r3, [pc, #508]	; (8007f08 <_dtoa_r+0x8f0>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f7f8 fc7b 	bl	8000608 <__aeabi_dmul>
 8007d12:	2200      	movs	r2, #0
 8007d14:	2300      	movs	r3, #0
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	f7f8 fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d09b      	beq.n	8007c5a <_dtoa_r+0x642>
 8007d22:	e7cd      	b.n	8007cc0 <_dtoa_r+0x6a8>
 8007d24:	9a08      	ldr	r2, [sp, #32]
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	f000 80c4 	beq.w	8007eb4 <_dtoa_r+0x89c>
 8007d2c:	9a05      	ldr	r2, [sp, #20]
 8007d2e:	2a01      	cmp	r2, #1
 8007d30:	f300 80a8 	bgt.w	8007e84 <_dtoa_r+0x86c>
 8007d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	f000 80a0 	beq.w	8007e7c <_dtoa_r+0x864>
 8007d3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d40:	9e06      	ldr	r6, [sp, #24]
 8007d42:	4645      	mov	r5, r8
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	2101      	movs	r1, #1
 8007d48:	441a      	add	r2, r3
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	4498      	add	r8, r3
 8007d4e:	9204      	str	r2, [sp, #16]
 8007d50:	f000 fe8a 	bl	8008a68 <__i2b>
 8007d54:	4607      	mov	r7, r0
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	dd0b      	ble.n	8007d72 <_dtoa_r+0x75a>
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dd08      	ble.n	8007d72 <_dtoa_r+0x75a>
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	9a04      	ldr	r2, [sp, #16]
 8007d64:	bfa8      	it	ge
 8007d66:	462b      	movge	r3, r5
 8007d68:	eba8 0803 	sub.w	r8, r8, r3
 8007d6c:	1aed      	subs	r5, r5, r3
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	9b06      	ldr	r3, [sp, #24]
 8007d74:	b1fb      	cbz	r3, 8007db6 <_dtoa_r+0x79e>
 8007d76:	9b08      	ldr	r3, [sp, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 809f 	beq.w	8007ebc <_dtoa_r+0x8a4>
 8007d7e:	2e00      	cmp	r6, #0
 8007d80:	dd11      	ble.n	8007da6 <_dtoa_r+0x78e>
 8007d82:	4639      	mov	r1, r7
 8007d84:	4632      	mov	r2, r6
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 ff2a 	bl	8008be0 <__pow5mult>
 8007d8c:	465a      	mov	r2, fp
 8007d8e:	4601      	mov	r1, r0
 8007d90:	4607      	mov	r7, r0
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fe7e 	bl	8008a94 <__multiply>
 8007d98:	4659      	mov	r1, fp
 8007d9a:	9007      	str	r0, [sp, #28]
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 fdc0 	bl	8008922 <_Bfree>
 8007da2:	9b07      	ldr	r3, [sp, #28]
 8007da4:	469b      	mov	fp, r3
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	1b9a      	subs	r2, r3, r6
 8007daa:	d004      	beq.n	8007db6 <_dtoa_r+0x79e>
 8007dac:	4659      	mov	r1, fp
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 ff16 	bl	8008be0 <__pow5mult>
 8007db4:	4683      	mov	fp, r0
 8007db6:	2101      	movs	r1, #1
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fe55 	bl	8008a68 <__i2b>
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	dd7c      	ble.n	8007ec0 <_dtoa_r+0x8a8>
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4601      	mov	r1, r0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 ff08 	bl	8008be0 <__pow5mult>
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	dd76      	ble.n	8007ec6 <_dtoa_r+0x8ae>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9306      	str	r3, [sp, #24]
 8007ddc:	6933      	ldr	r3, [r6, #16]
 8007dde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007de2:	6918      	ldr	r0, [r3, #16]
 8007de4:	f000 fdf0 	bl	80089c8 <__hi0bits>
 8007de8:	f1c0 0020 	rsb	r0, r0, #32
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	4418      	add	r0, r3
 8007df0:	f010 001f 	ands.w	r0, r0, #31
 8007df4:	f000 8086 	beq.w	8007f04 <_dtoa_r+0x8ec>
 8007df8:	f1c0 0320 	rsb	r3, r0, #32
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	dd7f      	ble.n	8007f00 <_dtoa_r+0x8e8>
 8007e00:	f1c0 001c 	rsb	r0, r0, #28
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	4403      	add	r3, r0
 8007e08:	4480      	add	r8, r0
 8007e0a:	4405      	add	r5, r0
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	f1b8 0f00 	cmp.w	r8, #0
 8007e12:	dd05      	ble.n	8007e20 <_dtoa_r+0x808>
 8007e14:	4659      	mov	r1, fp
 8007e16:	4642      	mov	r2, r8
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 ff21 	bl	8008c60 <__lshift>
 8007e1e:	4683      	mov	fp, r0
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dd05      	ble.n	8007e32 <_dtoa_r+0x81a>
 8007e26:	4631      	mov	r1, r6
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 ff18 	bl	8008c60 <__lshift>
 8007e30:	4606      	mov	r6, r0
 8007e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d069      	beq.n	8007f0c <_dtoa_r+0x8f4>
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f000 ff7c 	bl	8008d38 <__mcmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	da63      	bge.n	8007f0c <_dtoa_r+0x8f4>
 8007e44:	2300      	movs	r3, #0
 8007e46:	4659      	mov	r1, fp
 8007e48:	220a      	movs	r2, #10
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 fd72 	bl	8008934 <__multadd>
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e56:	4683      	mov	fp, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 818e 	beq.w	800817a <_dtoa_r+0xb62>
 8007e5e:	4639      	mov	r1, r7
 8007e60:	2300      	movs	r3, #0
 8007e62:	220a      	movs	r2, #10
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fd65 	bl	8008934 <__multadd>
 8007e6a:	f1b9 0f00 	cmp.w	r9, #0
 8007e6e:	4607      	mov	r7, r0
 8007e70:	f300 808e 	bgt.w	8007f90 <_dtoa_r+0x978>
 8007e74:	9b05      	ldr	r3, [sp, #20]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	dc50      	bgt.n	8007f1c <_dtoa_r+0x904>
 8007e7a:	e089      	b.n	8007f90 <_dtoa_r+0x978>
 8007e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e82:	e75d      	b.n	8007d40 <_dtoa_r+0x728>
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	1e5e      	subs	r6, r3, #1
 8007e88:	9b06      	ldr	r3, [sp, #24]
 8007e8a:	42b3      	cmp	r3, r6
 8007e8c:	bfbf      	itttt	lt
 8007e8e:	9b06      	ldrlt	r3, [sp, #24]
 8007e90:	9606      	strlt	r6, [sp, #24]
 8007e92:	1af2      	sublt	r2, r6, r3
 8007e94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007e96:	bfb6      	itet	lt
 8007e98:	189b      	addlt	r3, r3, r2
 8007e9a:	1b9e      	subge	r6, r3, r6
 8007e9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	bfb8      	it	lt
 8007ea2:	2600      	movlt	r6, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfb5      	itete	lt
 8007ea8:	eba8 0503 	sublt.w	r5, r8, r3
 8007eac:	9b01      	ldrge	r3, [sp, #4]
 8007eae:	2300      	movlt	r3, #0
 8007eb0:	4645      	movge	r5, r8
 8007eb2:	e747      	b.n	8007d44 <_dtoa_r+0x72c>
 8007eb4:	9e06      	ldr	r6, [sp, #24]
 8007eb6:	9f08      	ldr	r7, [sp, #32]
 8007eb8:	4645      	mov	r5, r8
 8007eba:	e74c      	b.n	8007d56 <_dtoa_r+0x73e>
 8007ebc:	9a06      	ldr	r2, [sp, #24]
 8007ebe:	e775      	b.n	8007dac <_dtoa_r+0x794>
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	dc18      	bgt.n	8007ef8 <_dtoa_r+0x8e0>
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	b9b3      	cbnz	r3, 8007ef8 <_dtoa_r+0x8e0>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed0:	b9a3      	cbnz	r3, 8007efc <_dtoa_r+0x8e4>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ed8:	0d1b      	lsrs	r3, r3, #20
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	b12b      	cbz	r3, 8007eea <_dtoa_r+0x8d2>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	f108 0801 	add.w	r8, r8, #1
 8007ee8:	2301      	movs	r3, #1
 8007eea:	9306      	str	r3, [sp, #24]
 8007eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f47f af74 	bne.w	8007ddc <_dtoa_r+0x7c4>
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	e779      	b.n	8007dec <_dtoa_r+0x7d4>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e7f6      	b.n	8007eea <_dtoa_r+0x8d2>
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	e7f4      	b.n	8007eea <_dtoa_r+0x8d2>
 8007f00:	d085      	beq.n	8007e0e <_dtoa_r+0x7f6>
 8007f02:	4618      	mov	r0, r3
 8007f04:	301c      	adds	r0, #28
 8007f06:	e77d      	b.n	8007e04 <_dtoa_r+0x7ec>
 8007f08:	40240000 	.word	0x40240000
 8007f0c:	9b01      	ldr	r3, [sp, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dc38      	bgt.n	8007f84 <_dtoa_r+0x96c>
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	dd35      	ble.n	8007f84 <_dtoa_r+0x96c>
 8007f18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	d10d      	bne.n	8007f3e <_dtoa_r+0x926>
 8007f22:	4631      	mov	r1, r6
 8007f24:	464b      	mov	r3, r9
 8007f26:	2205      	movs	r2, #5
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fd03 	bl	8008934 <__multadd>
 8007f2e:	4601      	mov	r1, r0
 8007f30:	4606      	mov	r6, r0
 8007f32:	4658      	mov	r0, fp
 8007f34:	f000 ff00 	bl	8008d38 <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f73f adbe 	bgt.w	8007aba <_dtoa_r+0x4a2>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	9d00      	ldr	r5, [sp, #0]
 8007f42:	ea6f 0a03 	mvn.w	sl, r3
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fce8 	bl	8008922 <_Bfree>
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	f43f aeb4 	beq.w	8007cc0 <_dtoa_r+0x6a8>
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	d005      	beq.n	8007f6a <_dtoa_r+0x952>
 8007f5e:	45b8      	cmp	r8, r7
 8007f60:	d003      	beq.n	8007f6a <_dtoa_r+0x952>
 8007f62:	4641      	mov	r1, r8
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fcdc 	bl	8008922 <_Bfree>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fcd8 	bl	8008922 <_Bfree>
 8007f72:	e6a5      	b.n	8007cc0 <_dtoa_r+0x6a8>
 8007f74:	2600      	movs	r6, #0
 8007f76:	4637      	mov	r7, r6
 8007f78:	e7e1      	b.n	8007f3e <_dtoa_r+0x926>
 8007f7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007f7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007f80:	4637      	mov	r7, r6
 8007f82:	e59a      	b.n	8007aba <_dtoa_r+0x4a2>
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80fc 	beq.w	8008188 <_dtoa_r+0xb70>
 8007f90:	2d00      	cmp	r5, #0
 8007f92:	dd05      	ble.n	8007fa0 <_dtoa_r+0x988>
 8007f94:	4639      	mov	r1, r7
 8007f96:	462a      	mov	r2, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fe61 	bl	8008c60 <__lshift>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	9b06      	ldr	r3, [sp, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d05b      	beq.n	800805e <_dtoa_r+0xa46>
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fc95 	bl	80088d8 <_Balloc>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b920      	cbnz	r0, 8007fbc <_dtoa_r+0x9a4>
 8007fb2:	4b80      	ldr	r3, [pc, #512]	; (80081b4 <_dtoa_r+0xb9c>)
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fba:	e45b      	b.n	8007874 <_dtoa_r+0x25c>
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	3202      	adds	r2, #2
 8007fc0:	0092      	lsls	r2, r2, #2
 8007fc2:	f107 010c 	add.w	r1, r7, #12
 8007fc6:	300c      	adds	r0, #12
 8007fc8:	f000 fc6c 	bl	80088a4 <memcpy>
 8007fcc:	2201      	movs	r2, #1
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fe45 	bl	8008c60 <__lshift>
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	444b      	add	r3, r9
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	46b8      	mov	r8, r7
 8007fea:	9306      	str	r3, [sp, #24]
 8007fec:	4607      	mov	r7, r0
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	9302      	str	r3, [sp, #8]
 8007ff8:	f7ff fa82 	bl	8007500 <quorem>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	3330      	adds	r3, #48	; 0x30
 8008000:	9004      	str	r0, [sp, #16]
 8008002:	4641      	mov	r1, r8
 8008004:	4658      	mov	r0, fp
 8008006:	9308      	str	r3, [sp, #32]
 8008008:	f000 fe96 	bl	8008d38 <__mcmp>
 800800c:	463a      	mov	r2, r7
 800800e:	4681      	mov	r9, r0
 8008010:	4631      	mov	r1, r6
 8008012:	4620      	mov	r0, r4
 8008014:	f000 feac 	bl	8008d70 <__mdiff>
 8008018:	68c2      	ldr	r2, [r0, #12]
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	4605      	mov	r5, r0
 800801e:	bb02      	cbnz	r2, 8008062 <_dtoa_r+0xa4a>
 8008020:	4601      	mov	r1, r0
 8008022:	4658      	mov	r0, fp
 8008024:	f000 fe88 	bl	8008d38 <__mcmp>
 8008028:	9b08      	ldr	r3, [sp, #32]
 800802a:	4602      	mov	r2, r0
 800802c:	4629      	mov	r1, r5
 800802e:	4620      	mov	r0, r4
 8008030:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008034:	f000 fc75 	bl	8008922 <_Bfree>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803c:	9d01      	ldr	r5, [sp, #4]
 800803e:	ea43 0102 	orr.w	r1, r3, r2
 8008042:	9b06      	ldr	r3, [sp, #24]
 8008044:	430b      	orrs	r3, r1
 8008046:	9b08      	ldr	r3, [sp, #32]
 8008048:	d10d      	bne.n	8008066 <_dtoa_r+0xa4e>
 800804a:	2b39      	cmp	r3, #57	; 0x39
 800804c:	d029      	beq.n	80080a2 <_dtoa_r+0xa8a>
 800804e:	f1b9 0f00 	cmp.w	r9, #0
 8008052:	dd01      	ble.n	8008058 <_dtoa_r+0xa40>
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	3331      	adds	r3, #49	; 0x31
 8008058:	9a02      	ldr	r2, [sp, #8]
 800805a:	7013      	strb	r3, [r2, #0]
 800805c:	e775      	b.n	8007f4a <_dtoa_r+0x932>
 800805e:	4638      	mov	r0, r7
 8008060:	e7b9      	b.n	8007fd6 <_dtoa_r+0x9be>
 8008062:	2201      	movs	r2, #1
 8008064:	e7e2      	b.n	800802c <_dtoa_r+0xa14>
 8008066:	f1b9 0f00 	cmp.w	r9, #0
 800806a:	db06      	blt.n	800807a <_dtoa_r+0xa62>
 800806c:	9905      	ldr	r1, [sp, #20]
 800806e:	ea41 0909 	orr.w	r9, r1, r9
 8008072:	9906      	ldr	r1, [sp, #24]
 8008074:	ea59 0101 	orrs.w	r1, r9, r1
 8008078:	d120      	bne.n	80080bc <_dtoa_r+0xaa4>
 800807a:	2a00      	cmp	r2, #0
 800807c:	ddec      	ble.n	8008058 <_dtoa_r+0xa40>
 800807e:	4659      	mov	r1, fp
 8008080:	2201      	movs	r2, #1
 8008082:	4620      	mov	r0, r4
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	f000 fdeb 	bl	8008c60 <__lshift>
 800808a:	4631      	mov	r1, r6
 800808c:	4683      	mov	fp, r0
 800808e:	f000 fe53 	bl	8008d38 <__mcmp>
 8008092:	2800      	cmp	r0, #0
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	dc02      	bgt.n	800809e <_dtoa_r+0xa86>
 8008098:	d1de      	bne.n	8008058 <_dtoa_r+0xa40>
 800809a:	07da      	lsls	r2, r3, #31
 800809c:	d5dc      	bpl.n	8008058 <_dtoa_r+0xa40>
 800809e:	2b39      	cmp	r3, #57	; 0x39
 80080a0:	d1d8      	bne.n	8008054 <_dtoa_r+0xa3c>
 80080a2:	9a02      	ldr	r2, [sp, #8]
 80080a4:	2339      	movs	r3, #57	; 0x39
 80080a6:	7013      	strb	r3, [r2, #0]
 80080a8:	462b      	mov	r3, r5
 80080aa:	461d      	mov	r5, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080b2:	2a39      	cmp	r2, #57	; 0x39
 80080b4:	d050      	beq.n	8008158 <_dtoa_r+0xb40>
 80080b6:	3201      	adds	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e746      	b.n	8007f4a <_dtoa_r+0x932>
 80080bc:	2a00      	cmp	r2, #0
 80080be:	dd03      	ble.n	80080c8 <_dtoa_r+0xab0>
 80080c0:	2b39      	cmp	r3, #57	; 0x39
 80080c2:	d0ee      	beq.n	80080a2 <_dtoa_r+0xa8a>
 80080c4:	3301      	adds	r3, #1
 80080c6:	e7c7      	b.n	8008058 <_dtoa_r+0xa40>
 80080c8:	9a01      	ldr	r2, [sp, #4]
 80080ca:	9907      	ldr	r1, [sp, #28]
 80080cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080d0:	428a      	cmp	r2, r1
 80080d2:	d02a      	beq.n	800812a <_dtoa_r+0xb12>
 80080d4:	4659      	mov	r1, fp
 80080d6:	2300      	movs	r3, #0
 80080d8:	220a      	movs	r2, #10
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fc2a 	bl	8008934 <__multadd>
 80080e0:	45b8      	cmp	r8, r7
 80080e2:	4683      	mov	fp, r0
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	f04f 020a 	mov.w	r2, #10
 80080ec:	4641      	mov	r1, r8
 80080ee:	4620      	mov	r0, r4
 80080f0:	d107      	bne.n	8008102 <_dtoa_r+0xaea>
 80080f2:	f000 fc1f 	bl	8008934 <__multadd>
 80080f6:	4680      	mov	r8, r0
 80080f8:	4607      	mov	r7, r0
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	3301      	adds	r3, #1
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	e775      	b.n	8007fee <_dtoa_r+0x9d6>
 8008102:	f000 fc17 	bl	8008934 <__multadd>
 8008106:	4639      	mov	r1, r7
 8008108:	4680      	mov	r8, r0
 800810a:	2300      	movs	r3, #0
 800810c:	220a      	movs	r2, #10
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fc10 	bl	8008934 <__multadd>
 8008114:	4607      	mov	r7, r0
 8008116:	e7f0      	b.n	80080fa <_dtoa_r+0xae2>
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	9a00      	ldr	r2, [sp, #0]
 800811e:	bfcc      	ite	gt
 8008120:	464d      	movgt	r5, r9
 8008122:	2501      	movle	r5, #1
 8008124:	4415      	add	r5, r2
 8008126:	f04f 0800 	mov.w	r8, #0
 800812a:	4659      	mov	r1, fp
 800812c:	2201      	movs	r2, #1
 800812e:	4620      	mov	r0, r4
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	f000 fd95 	bl	8008c60 <__lshift>
 8008136:	4631      	mov	r1, r6
 8008138:	4683      	mov	fp, r0
 800813a:	f000 fdfd 	bl	8008d38 <__mcmp>
 800813e:	2800      	cmp	r0, #0
 8008140:	dcb2      	bgt.n	80080a8 <_dtoa_r+0xa90>
 8008142:	d102      	bne.n	800814a <_dtoa_r+0xb32>
 8008144:	9b01      	ldr	r3, [sp, #4]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d4ae      	bmi.n	80080a8 <_dtoa_r+0xa90>
 800814a:	462b      	mov	r3, r5
 800814c:	461d      	mov	r5, r3
 800814e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008152:	2a30      	cmp	r2, #48	; 0x30
 8008154:	d0fa      	beq.n	800814c <_dtoa_r+0xb34>
 8008156:	e6f8      	b.n	8007f4a <_dtoa_r+0x932>
 8008158:	9a00      	ldr	r2, [sp, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d1a5      	bne.n	80080aa <_dtoa_r+0xa92>
 800815e:	f10a 0a01 	add.w	sl, sl, #1
 8008162:	2331      	movs	r3, #49	; 0x31
 8008164:	e779      	b.n	800805a <_dtoa_r+0xa42>
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <_dtoa_r+0xba0>)
 8008168:	f7ff bab1 	b.w	80076ce <_dtoa_r+0xb6>
 800816c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816e:	2b00      	cmp	r3, #0
 8008170:	f47f aa93 	bne.w	800769a <_dtoa_r+0x82>
 8008174:	4b11      	ldr	r3, [pc, #68]	; (80081bc <_dtoa_r+0xba4>)
 8008176:	f7ff baaa 	b.w	80076ce <_dtoa_r+0xb6>
 800817a:	f1b9 0f00 	cmp.w	r9, #0
 800817e:	dc03      	bgt.n	8008188 <_dtoa_r+0xb70>
 8008180:	9b05      	ldr	r3, [sp, #20]
 8008182:	2b02      	cmp	r3, #2
 8008184:	f73f aeca 	bgt.w	8007f1c <_dtoa_r+0x904>
 8008188:	9d00      	ldr	r5, [sp, #0]
 800818a:	4631      	mov	r1, r6
 800818c:	4658      	mov	r0, fp
 800818e:	f7ff f9b7 	bl	8007500 <quorem>
 8008192:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008196:	f805 3b01 	strb.w	r3, [r5], #1
 800819a:	9a00      	ldr	r2, [sp, #0]
 800819c:	1aaa      	subs	r2, r5, r2
 800819e:	4591      	cmp	r9, r2
 80081a0:	ddba      	ble.n	8008118 <_dtoa_r+0xb00>
 80081a2:	4659      	mov	r1, fp
 80081a4:	2300      	movs	r3, #0
 80081a6:	220a      	movs	r2, #10
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fbc3 	bl	8008934 <__multadd>
 80081ae:	4683      	mov	fp, r0
 80081b0:	e7eb      	b.n	800818a <_dtoa_r+0xb72>
 80081b2:	bf00      	nop
 80081b4:	0800b349 	.word	0x0800b349
 80081b8:	0800b31a 	.word	0x0800b31a
 80081bc:	0800b340 	.word	0x0800b340

080081c0 <__libc_fini_array>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d07      	ldr	r5, [pc, #28]	; (80081e0 <__libc_fini_array+0x20>)
 80081c4:	4c07      	ldr	r4, [pc, #28]	; (80081e4 <__libc_fini_array+0x24>)
 80081c6:	1b64      	subs	r4, r4, r5
 80081c8:	10a4      	asrs	r4, r4, #2
 80081ca:	b91c      	cbnz	r4, 80081d4 <__libc_fini_array+0x14>
 80081cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081d0:	f002 bc84 	b.w	800aadc <_fini>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80081da:	4798      	blx	r3
 80081dc:	e7f5      	b.n	80081ca <__libc_fini_array+0xa>
 80081de:	bf00      	nop
 80081e0:	0800b694 	.word	0x0800b694
 80081e4:	0800b698 	.word	0x0800b698

080081e8 <_malloc_trim_r>:
 80081e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ec:	4606      	mov	r6, r0
 80081ee:	2008      	movs	r0, #8
 80081f0:	460c      	mov	r4, r1
 80081f2:	f000 ff77 	bl	80090e4 <sysconf>
 80081f6:	4f23      	ldr	r7, [pc, #140]	; (8008284 <_malloc_trim_r+0x9c>)
 80081f8:	4680      	mov	r8, r0
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 fb60 	bl	80088c0 <__malloc_lock>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	685d      	ldr	r5, [r3, #4]
 8008204:	f025 0503 	bic.w	r5, r5, #3
 8008208:	1b2c      	subs	r4, r5, r4
 800820a:	3c11      	subs	r4, #17
 800820c:	4444      	add	r4, r8
 800820e:	fbb4 f4f8 	udiv	r4, r4, r8
 8008212:	3c01      	subs	r4, #1
 8008214:	fb08 f404 	mul.w	r4, r8, r4
 8008218:	45a0      	cmp	r8, r4
 800821a:	dd05      	ble.n	8008228 <_malloc_trim_r+0x40>
 800821c:	4630      	mov	r0, r6
 800821e:	f000 fb55 	bl	80088cc <__malloc_unlock>
 8008222:	2000      	movs	r0, #0
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008228:	2100      	movs	r1, #0
 800822a:	4630      	mov	r0, r6
 800822c:	f000 febc 	bl	8008fa8 <_sbrk_r>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	442b      	add	r3, r5
 8008234:	4298      	cmp	r0, r3
 8008236:	d1f1      	bne.n	800821c <_malloc_trim_r+0x34>
 8008238:	4261      	negs	r1, r4
 800823a:	4630      	mov	r0, r6
 800823c:	f000 feb4 	bl	8008fa8 <_sbrk_r>
 8008240:	3001      	adds	r0, #1
 8008242:	d110      	bne.n	8008266 <_malloc_trim_r+0x7e>
 8008244:	2100      	movs	r1, #0
 8008246:	4630      	mov	r0, r6
 8008248:	f000 feae 	bl	8008fa8 <_sbrk_r>
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	1a83      	subs	r3, r0, r2
 8008250:	2b0f      	cmp	r3, #15
 8008252:	dde3      	ble.n	800821c <_malloc_trim_r+0x34>
 8008254:	490c      	ldr	r1, [pc, #48]	; (8008288 <_malloc_trim_r+0xa0>)
 8008256:	6809      	ldr	r1, [r1, #0]
 8008258:	1a40      	subs	r0, r0, r1
 800825a:	490c      	ldr	r1, [pc, #48]	; (800828c <_malloc_trim_r+0xa4>)
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	6008      	str	r0, [r1, #0]
 8008262:	6053      	str	r3, [r2, #4]
 8008264:	e7da      	b.n	800821c <_malloc_trim_r+0x34>
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4a08      	ldr	r2, [pc, #32]	; (800828c <_malloc_trim_r+0xa4>)
 800826a:	1b2d      	subs	r5, r5, r4
 800826c:	f045 0501 	orr.w	r5, r5, #1
 8008270:	605d      	str	r5, [r3, #4]
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	4630      	mov	r0, r6
 8008276:	1b1c      	subs	r4, r3, r4
 8008278:	6014      	str	r4, [r2, #0]
 800827a:	f000 fb27 	bl	80088cc <__malloc_unlock>
 800827e:	2001      	movs	r0, #1
 8008280:	e7d0      	b.n	8008224 <_malloc_trim_r+0x3c>
 8008282:	bf00      	nop
 8008284:	20000444 	.word	0x20000444
 8008288:	2000084c 	.word	0x2000084c
 800828c:	20000df8 	.word	0x20000df8

08008290 <_free_r>:
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	4605      	mov	r5, r0
 8008294:	460f      	mov	r7, r1
 8008296:	2900      	cmp	r1, #0
 8008298:	f000 80b1 	beq.w	80083fe <_free_r+0x16e>
 800829c:	f000 fb10 	bl	80088c0 <__malloc_lock>
 80082a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80082a4:	4856      	ldr	r0, [pc, #344]	; (8008400 <_free_r+0x170>)
 80082a6:	f022 0401 	bic.w	r4, r2, #1
 80082aa:	f1a7 0308 	sub.w	r3, r7, #8
 80082ae:	eb03 0c04 	add.w	ip, r3, r4
 80082b2:	6881      	ldr	r1, [r0, #8]
 80082b4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80082b8:	4561      	cmp	r1, ip
 80082ba:	f026 0603 	bic.w	r6, r6, #3
 80082be:	f002 0201 	and.w	r2, r2, #1
 80082c2:	d11b      	bne.n	80082fc <_free_r+0x6c>
 80082c4:	4434      	add	r4, r6
 80082c6:	b93a      	cbnz	r2, 80082d8 <_free_r+0x48>
 80082c8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	4414      	add	r4, r2
 80082d0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80082d4:	60ca      	str	r2, [r1, #12]
 80082d6:	6091      	str	r1, [r2, #8]
 80082d8:	f044 0201 	orr.w	r2, r4, #1
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	6083      	str	r3, [r0, #8]
 80082e0:	4b48      	ldr	r3, [pc, #288]	; (8008404 <_free_r+0x174>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	d804      	bhi.n	80082f2 <_free_r+0x62>
 80082e8:	4b47      	ldr	r3, [pc, #284]	; (8008408 <_free_r+0x178>)
 80082ea:	4628      	mov	r0, r5
 80082ec:	6819      	ldr	r1, [r3, #0]
 80082ee:	f7ff ff7b 	bl	80081e8 <_malloc_trim_r>
 80082f2:	4628      	mov	r0, r5
 80082f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082f8:	f000 bae8 	b.w	80088cc <__malloc_unlock>
 80082fc:	f8cc 6004 	str.w	r6, [ip, #4]
 8008300:	2a00      	cmp	r2, #0
 8008302:	d138      	bne.n	8008376 <_free_r+0xe6>
 8008304:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008308:	1a5b      	subs	r3, r3, r1
 800830a:	440c      	add	r4, r1
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	f100 0708 	add.w	r7, r0, #8
 8008312:	42b9      	cmp	r1, r7
 8008314:	d031      	beq.n	800837a <_free_r+0xea>
 8008316:	68df      	ldr	r7, [r3, #12]
 8008318:	60cf      	str	r7, [r1, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	eb0c 0106 	add.w	r1, ip, r6
 8008320:	6849      	ldr	r1, [r1, #4]
 8008322:	07c9      	lsls	r1, r1, #31
 8008324:	d40b      	bmi.n	800833e <_free_r+0xae>
 8008326:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800832a:	4434      	add	r4, r6
 800832c:	bb3a      	cbnz	r2, 800837e <_free_r+0xee>
 800832e:	4e37      	ldr	r6, [pc, #220]	; (800840c <_free_r+0x17c>)
 8008330:	42b1      	cmp	r1, r6
 8008332:	d124      	bne.n	800837e <_free_r+0xee>
 8008334:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008338:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800833c:	2201      	movs	r2, #1
 800833e:	f044 0101 	orr.w	r1, r4, #1
 8008342:	6059      	str	r1, [r3, #4]
 8008344:	511c      	str	r4, [r3, r4]
 8008346:	2a00      	cmp	r2, #0
 8008348:	d1d3      	bne.n	80082f2 <_free_r+0x62>
 800834a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800834e:	d21b      	bcs.n	8008388 <_free_r+0xf8>
 8008350:	0961      	lsrs	r1, r4, #5
 8008352:	08e2      	lsrs	r2, r4, #3
 8008354:	2401      	movs	r4, #1
 8008356:	408c      	lsls	r4, r1
 8008358:	6841      	ldr	r1, [r0, #4]
 800835a:	3201      	adds	r2, #1
 800835c:	430c      	orrs	r4, r1
 800835e:	6044      	str	r4, [r0, #4]
 8008360:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008364:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008368:	3908      	subs	r1, #8
 800836a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800836e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8008372:	60e3      	str	r3, [r4, #12]
 8008374:	e7bd      	b.n	80082f2 <_free_r+0x62>
 8008376:	2200      	movs	r2, #0
 8008378:	e7d0      	b.n	800831c <_free_r+0x8c>
 800837a:	2201      	movs	r2, #1
 800837c:	e7ce      	b.n	800831c <_free_r+0x8c>
 800837e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008382:	60ce      	str	r6, [r1, #12]
 8008384:	60b1      	str	r1, [r6, #8]
 8008386:	e7da      	b.n	800833e <_free_r+0xae>
 8008388:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800838c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8008390:	d214      	bcs.n	80083bc <_free_r+0x12c>
 8008392:	09a2      	lsrs	r2, r4, #6
 8008394:	3238      	adds	r2, #56	; 0x38
 8008396:	1c51      	adds	r1, r2, #1
 8008398:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800839c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80083a0:	428e      	cmp	r6, r1
 80083a2:	d125      	bne.n	80083f0 <_free_r+0x160>
 80083a4:	2401      	movs	r4, #1
 80083a6:	1092      	asrs	r2, r2, #2
 80083a8:	fa04 f202 	lsl.w	r2, r4, r2
 80083ac:	6844      	ldr	r4, [r0, #4]
 80083ae:	4322      	orrs	r2, r4
 80083b0:	6042      	str	r2, [r0, #4]
 80083b2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80083b6:	60b3      	str	r3, [r6, #8]
 80083b8:	60cb      	str	r3, [r1, #12]
 80083ba:	e79a      	b.n	80082f2 <_free_r+0x62>
 80083bc:	2a14      	cmp	r2, #20
 80083be:	d801      	bhi.n	80083c4 <_free_r+0x134>
 80083c0:	325b      	adds	r2, #91	; 0x5b
 80083c2:	e7e8      	b.n	8008396 <_free_r+0x106>
 80083c4:	2a54      	cmp	r2, #84	; 0x54
 80083c6:	d802      	bhi.n	80083ce <_free_r+0x13e>
 80083c8:	0b22      	lsrs	r2, r4, #12
 80083ca:	326e      	adds	r2, #110	; 0x6e
 80083cc:	e7e3      	b.n	8008396 <_free_r+0x106>
 80083ce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80083d2:	d802      	bhi.n	80083da <_free_r+0x14a>
 80083d4:	0be2      	lsrs	r2, r4, #15
 80083d6:	3277      	adds	r2, #119	; 0x77
 80083d8:	e7dd      	b.n	8008396 <_free_r+0x106>
 80083da:	f240 5154 	movw	r1, #1364	; 0x554
 80083de:	428a      	cmp	r2, r1
 80083e0:	bf9a      	itte	ls
 80083e2:	0ca2      	lsrls	r2, r4, #18
 80083e4:	327c      	addls	r2, #124	; 0x7c
 80083e6:	227e      	movhi	r2, #126	; 0x7e
 80083e8:	e7d5      	b.n	8008396 <_free_r+0x106>
 80083ea:	6889      	ldr	r1, [r1, #8]
 80083ec:	428e      	cmp	r6, r1
 80083ee:	d004      	beq.n	80083fa <_free_r+0x16a>
 80083f0:	684a      	ldr	r2, [r1, #4]
 80083f2:	f022 0203 	bic.w	r2, r2, #3
 80083f6:	42a2      	cmp	r2, r4
 80083f8:	d8f7      	bhi.n	80083ea <_free_r+0x15a>
 80083fa:	68ce      	ldr	r6, [r1, #12]
 80083fc:	e7d9      	b.n	80083b2 <_free_r+0x122>
 80083fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008400:	20000444 	.word	0x20000444
 8008404:	20000850 	.word	0x20000850
 8008408:	20000e28 	.word	0x20000e28
 800840c:	2000044c 	.word	0x2000044c

08008410 <_localeconv_r>:
 8008410:	4800      	ldr	r0, [pc, #0]	; (8008414 <_localeconv_r+0x4>)
 8008412:	4770      	bx	lr
 8008414:	20000944 	.word	0x20000944

08008418 <__retarget_lock_init_recursive>:
 8008418:	4770      	bx	lr

0800841a <__retarget_lock_close_recursive>:
 800841a:	4770      	bx	lr

0800841c <__retarget_lock_acquire_recursive>:
 800841c:	4770      	bx	lr

0800841e <__retarget_lock_release_recursive>:
 800841e:	4770      	bx	lr

08008420 <_malloc_r>:
 8008420:	f101 030b 	add.w	r3, r1, #11
 8008424:	2b16      	cmp	r3, #22
 8008426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	4605      	mov	r5, r0
 800842c:	d906      	bls.n	800843c <_malloc_r+0x1c>
 800842e:	f033 0707 	bics.w	r7, r3, #7
 8008432:	d504      	bpl.n	800843e <_malloc_r+0x1e>
 8008434:	230c      	movs	r3, #12
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	2400      	movs	r4, #0
 800843a:	e1ae      	b.n	800879a <_malloc_r+0x37a>
 800843c:	2710      	movs	r7, #16
 800843e:	42b9      	cmp	r1, r7
 8008440:	d8f8      	bhi.n	8008434 <_malloc_r+0x14>
 8008442:	4628      	mov	r0, r5
 8008444:	f000 fa3c 	bl	80088c0 <__malloc_lock>
 8008448:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800844c:	4ec3      	ldr	r6, [pc, #780]	; (800875c <_malloc_r+0x33c>)
 800844e:	d238      	bcs.n	80084c2 <_malloc_r+0xa2>
 8008450:	f107 0208 	add.w	r2, r7, #8
 8008454:	4432      	add	r2, r6
 8008456:	f1a2 0108 	sub.w	r1, r2, #8
 800845a:	6854      	ldr	r4, [r2, #4]
 800845c:	428c      	cmp	r4, r1
 800845e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8008462:	d102      	bne.n	800846a <_malloc_r+0x4a>
 8008464:	68d4      	ldr	r4, [r2, #12]
 8008466:	42a2      	cmp	r2, r4
 8008468:	d010      	beq.n	800848c <_malloc_r+0x6c>
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008470:	f023 0303 	bic.w	r3, r3, #3
 8008474:	60ca      	str	r2, [r1, #12]
 8008476:	4423      	add	r3, r4
 8008478:	6091      	str	r1, [r2, #8]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	f042 0201 	orr.w	r2, r2, #1
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fa22 	bl	80088cc <__malloc_unlock>
 8008488:	3408      	adds	r4, #8
 800848a:	e186      	b.n	800879a <_malloc_r+0x37a>
 800848c:	3302      	adds	r3, #2
 800848e:	4ab4      	ldr	r2, [pc, #720]	; (8008760 <_malloc_r+0x340>)
 8008490:	6934      	ldr	r4, [r6, #16]
 8008492:	4294      	cmp	r4, r2
 8008494:	4611      	mov	r1, r2
 8008496:	d077      	beq.n	8008588 <_malloc_r+0x168>
 8008498:	6860      	ldr	r0, [r4, #4]
 800849a:	f020 0c03 	bic.w	ip, r0, #3
 800849e:	ebac 0007 	sub.w	r0, ip, r7
 80084a2:	280f      	cmp	r0, #15
 80084a4:	dd48      	ble.n	8008538 <_malloc_r+0x118>
 80084a6:	19e1      	adds	r1, r4, r7
 80084a8:	f040 0301 	orr.w	r3, r0, #1
 80084ac:	f047 0701 	orr.w	r7, r7, #1
 80084b0:	6067      	str	r7, [r4, #4]
 80084b2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80084b6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80084ba:	604b      	str	r3, [r1, #4]
 80084bc:	f844 000c 	str.w	r0, [r4, ip]
 80084c0:	e7df      	b.n	8008482 <_malloc_r+0x62>
 80084c2:	0a7b      	lsrs	r3, r7, #9
 80084c4:	d02a      	beq.n	800851c <_malloc_r+0xfc>
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d812      	bhi.n	80084f0 <_malloc_r+0xd0>
 80084ca:	09bb      	lsrs	r3, r7, #6
 80084cc:	3338      	adds	r3, #56	; 0x38
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80084d4:	f1a2 0c08 	sub.w	ip, r2, #8
 80084d8:	6854      	ldr	r4, [r2, #4]
 80084da:	4564      	cmp	r4, ip
 80084dc:	d006      	beq.n	80084ec <_malloc_r+0xcc>
 80084de:	6862      	ldr	r2, [r4, #4]
 80084e0:	f022 0203 	bic.w	r2, r2, #3
 80084e4:	1bd0      	subs	r0, r2, r7
 80084e6:	280f      	cmp	r0, #15
 80084e8:	dd1c      	ble.n	8008524 <_malloc_r+0x104>
 80084ea:	3b01      	subs	r3, #1
 80084ec:	3301      	adds	r3, #1
 80084ee:	e7ce      	b.n	800848e <_malloc_r+0x6e>
 80084f0:	2b14      	cmp	r3, #20
 80084f2:	d801      	bhi.n	80084f8 <_malloc_r+0xd8>
 80084f4:	335b      	adds	r3, #91	; 0x5b
 80084f6:	e7ea      	b.n	80084ce <_malloc_r+0xae>
 80084f8:	2b54      	cmp	r3, #84	; 0x54
 80084fa:	d802      	bhi.n	8008502 <_malloc_r+0xe2>
 80084fc:	0b3b      	lsrs	r3, r7, #12
 80084fe:	336e      	adds	r3, #110	; 0x6e
 8008500:	e7e5      	b.n	80084ce <_malloc_r+0xae>
 8008502:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008506:	d802      	bhi.n	800850e <_malloc_r+0xee>
 8008508:	0bfb      	lsrs	r3, r7, #15
 800850a:	3377      	adds	r3, #119	; 0x77
 800850c:	e7df      	b.n	80084ce <_malloc_r+0xae>
 800850e:	f240 5254 	movw	r2, #1364	; 0x554
 8008512:	4293      	cmp	r3, r2
 8008514:	d804      	bhi.n	8008520 <_malloc_r+0x100>
 8008516:	0cbb      	lsrs	r3, r7, #18
 8008518:	337c      	adds	r3, #124	; 0x7c
 800851a:	e7d8      	b.n	80084ce <_malloc_r+0xae>
 800851c:	233f      	movs	r3, #63	; 0x3f
 800851e:	e7d6      	b.n	80084ce <_malloc_r+0xae>
 8008520:	237e      	movs	r3, #126	; 0x7e
 8008522:	e7d4      	b.n	80084ce <_malloc_r+0xae>
 8008524:	2800      	cmp	r0, #0
 8008526:	68e1      	ldr	r1, [r4, #12]
 8008528:	db04      	blt.n	8008534 <_malloc_r+0x114>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	60d9      	str	r1, [r3, #12]
 800852e:	608b      	str	r3, [r1, #8]
 8008530:	18a3      	adds	r3, r4, r2
 8008532:	e7a2      	b.n	800847a <_malloc_r+0x5a>
 8008534:	460c      	mov	r4, r1
 8008536:	e7d0      	b.n	80084da <_malloc_r+0xba>
 8008538:	2800      	cmp	r0, #0
 800853a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800853e:	db07      	blt.n	8008550 <_malloc_r+0x130>
 8008540:	44a4      	add	ip, r4
 8008542:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	f8cc 3004 	str.w	r3, [ip, #4]
 800854e:	e798      	b.n	8008482 <_malloc_r+0x62>
 8008550:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8008554:	6870      	ldr	r0, [r6, #4]
 8008556:	f080 809e 	bcs.w	8008696 <_malloc_r+0x276>
 800855a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800855e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8008562:	f04f 0c01 	mov.w	ip, #1
 8008566:	3201      	adds	r2, #1
 8008568:	fa0c fc0e 	lsl.w	ip, ip, lr
 800856c:	ea4c 0000 	orr.w	r0, ip, r0
 8008570:	6070      	str	r0, [r6, #4]
 8008572:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008576:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800857a:	3808      	subs	r0, #8
 800857c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8008580:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8008584:	f8cc 400c 	str.w	r4, [ip, #12]
 8008588:	2001      	movs	r0, #1
 800858a:	109a      	asrs	r2, r3, #2
 800858c:	fa00 f202 	lsl.w	r2, r0, r2
 8008590:	6870      	ldr	r0, [r6, #4]
 8008592:	4290      	cmp	r0, r2
 8008594:	d326      	bcc.n	80085e4 <_malloc_r+0x1c4>
 8008596:	4210      	tst	r0, r2
 8008598:	d106      	bne.n	80085a8 <_malloc_r+0x188>
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	0052      	lsls	r2, r2, #1
 80085a0:	4210      	tst	r0, r2
 80085a2:	f103 0304 	add.w	r3, r3, #4
 80085a6:	d0fa      	beq.n	800859e <_malloc_r+0x17e>
 80085a8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80085ac:	46c1      	mov	r9, r8
 80085ae:	469e      	mov	lr, r3
 80085b0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80085b4:	454c      	cmp	r4, r9
 80085b6:	f040 80b3 	bne.w	8008720 <_malloc_r+0x300>
 80085ba:	f10e 0e01 	add.w	lr, lr, #1
 80085be:	f01e 0f03 	tst.w	lr, #3
 80085c2:	f109 0908 	add.w	r9, r9, #8
 80085c6:	d1f3      	bne.n	80085b0 <_malloc_r+0x190>
 80085c8:	0798      	lsls	r0, r3, #30
 80085ca:	f040 80ec 	bne.w	80087a6 <_malloc_r+0x386>
 80085ce:	6873      	ldr	r3, [r6, #4]
 80085d0:	ea23 0302 	bic.w	r3, r3, r2
 80085d4:	6073      	str	r3, [r6, #4]
 80085d6:	6870      	ldr	r0, [r6, #4]
 80085d8:	0052      	lsls	r2, r2, #1
 80085da:	4290      	cmp	r0, r2
 80085dc:	d302      	bcc.n	80085e4 <_malloc_r+0x1c4>
 80085de:	2a00      	cmp	r2, #0
 80085e0:	f040 80ee 	bne.w	80087c0 <_malloc_r+0x3a0>
 80085e4:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80085e8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80085ec:	f021 0903 	bic.w	r9, r1, #3
 80085f0:	45b9      	cmp	r9, r7
 80085f2:	d304      	bcc.n	80085fe <_malloc_r+0x1de>
 80085f4:	eba9 0207 	sub.w	r2, r9, r7
 80085f8:	2a0f      	cmp	r2, #15
 80085fa:	f300 8149 	bgt.w	8008890 <_malloc_r+0x470>
 80085fe:	4a59      	ldr	r2, [pc, #356]	; (8008764 <_malloc_r+0x344>)
 8008600:	6811      	ldr	r1, [r2, #0]
 8008602:	3110      	adds	r1, #16
 8008604:	eb0b 0309 	add.w	r3, fp, r9
 8008608:	4439      	add	r1, r7
 800860a:	2008      	movs	r0, #8
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	9100      	str	r1, [sp, #0]
 8008610:	f000 fd68 	bl	80090e4 <sysconf>
 8008614:	4a54      	ldr	r2, [pc, #336]	; (8008768 <_malloc_r+0x348>)
 8008616:	e9dd 1300 	ldrd	r1, r3, [sp]
 800861a:	4680      	mov	r8, r0
 800861c:	6810      	ldr	r0, [r2, #0]
 800861e:	3001      	adds	r0, #1
 8008620:	bf1f      	itttt	ne
 8008622:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008626:	4441      	addne	r1, r8
 8008628:	f1c8 0000 	rsbne	r0, r8, #0
 800862c:	4001      	andne	r1, r0
 800862e:	4628      	mov	r0, r5
 8008630:	e9cd 1300 	strd	r1, r3, [sp]
 8008634:	f000 fcb8 	bl	8008fa8 <_sbrk_r>
 8008638:	1c42      	adds	r2, r0, #1
 800863a:	4604      	mov	r4, r0
 800863c:	f000 80fc 	beq.w	8008838 <_malloc_r+0x418>
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	9900      	ldr	r1, [sp, #0]
 8008644:	4a48      	ldr	r2, [pc, #288]	; (8008768 <_malloc_r+0x348>)
 8008646:	4283      	cmp	r3, r0
 8008648:	d902      	bls.n	8008650 <_malloc_r+0x230>
 800864a:	45b3      	cmp	fp, r6
 800864c:	f040 80f4 	bne.w	8008838 <_malloc_r+0x418>
 8008650:	f8df a120 	ldr.w	sl, [pc, #288]	; 8008774 <_malloc_r+0x354>
 8008654:	f8da 0000 	ldr.w	r0, [sl]
 8008658:	42a3      	cmp	r3, r4
 800865a:	eb00 0e01 	add.w	lr, r0, r1
 800865e:	f8ca e000 	str.w	lr, [sl]
 8008662:	f108 3cff 	add.w	ip, r8, #4294967295
 8008666:	f040 80ad 	bne.w	80087c4 <_malloc_r+0x3a4>
 800866a:	ea13 0f0c 	tst.w	r3, ip
 800866e:	f040 80a9 	bne.w	80087c4 <_malloc_r+0x3a4>
 8008672:	68b3      	ldr	r3, [r6, #8]
 8008674:	4449      	add	r1, r9
 8008676:	f041 0101 	orr.w	r1, r1, #1
 800867a:	6059      	str	r1, [r3, #4]
 800867c:	4a3b      	ldr	r2, [pc, #236]	; (800876c <_malloc_r+0x34c>)
 800867e:	f8da 3000 	ldr.w	r3, [sl]
 8008682:	6811      	ldr	r1, [r2, #0]
 8008684:	428b      	cmp	r3, r1
 8008686:	bf88      	it	hi
 8008688:	6013      	strhi	r3, [r2, #0]
 800868a:	4a39      	ldr	r2, [pc, #228]	; (8008770 <_malloc_r+0x350>)
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	428b      	cmp	r3, r1
 8008690:	bf88      	it	hi
 8008692:	6013      	strhi	r3, [r2, #0]
 8008694:	e0d0      	b.n	8008838 <_malloc_r+0x418>
 8008696:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800869a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800869e:	d218      	bcs.n	80086d2 <_malloc_r+0x2b2>
 80086a0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80086a4:	3238      	adds	r2, #56	; 0x38
 80086a6:	f102 0e01 	add.w	lr, r2, #1
 80086aa:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80086ae:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80086b2:	45f0      	cmp	r8, lr
 80086b4:	d12b      	bne.n	800870e <_malloc_r+0x2ee>
 80086b6:	1092      	asrs	r2, r2, #2
 80086b8:	f04f 0c01 	mov.w	ip, #1
 80086bc:	fa0c f202 	lsl.w	r2, ip, r2
 80086c0:	4310      	orrs	r0, r2
 80086c2:	6070      	str	r0, [r6, #4]
 80086c4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80086c8:	f8c8 4008 	str.w	r4, [r8, #8]
 80086cc:	f8ce 400c 	str.w	r4, [lr, #12]
 80086d0:	e75a      	b.n	8008588 <_malloc_r+0x168>
 80086d2:	2a14      	cmp	r2, #20
 80086d4:	d801      	bhi.n	80086da <_malloc_r+0x2ba>
 80086d6:	325b      	adds	r2, #91	; 0x5b
 80086d8:	e7e5      	b.n	80086a6 <_malloc_r+0x286>
 80086da:	2a54      	cmp	r2, #84	; 0x54
 80086dc:	d803      	bhi.n	80086e6 <_malloc_r+0x2c6>
 80086de:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80086e2:	326e      	adds	r2, #110	; 0x6e
 80086e4:	e7df      	b.n	80086a6 <_malloc_r+0x286>
 80086e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80086ea:	d803      	bhi.n	80086f4 <_malloc_r+0x2d4>
 80086ec:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80086f0:	3277      	adds	r2, #119	; 0x77
 80086f2:	e7d8      	b.n	80086a6 <_malloc_r+0x286>
 80086f4:	f240 5e54 	movw	lr, #1364	; 0x554
 80086f8:	4572      	cmp	r2, lr
 80086fa:	bf9a      	itte	ls
 80086fc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008700:	327c      	addls	r2, #124	; 0x7c
 8008702:	227e      	movhi	r2, #126	; 0x7e
 8008704:	e7cf      	b.n	80086a6 <_malloc_r+0x286>
 8008706:	f8de e008 	ldr.w	lr, [lr, #8]
 800870a:	45f0      	cmp	r8, lr
 800870c:	d005      	beq.n	800871a <_malloc_r+0x2fa>
 800870e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008712:	f022 0203 	bic.w	r2, r2, #3
 8008716:	4562      	cmp	r2, ip
 8008718:	d8f5      	bhi.n	8008706 <_malloc_r+0x2e6>
 800871a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800871e:	e7d1      	b.n	80086c4 <_malloc_r+0x2a4>
 8008720:	6860      	ldr	r0, [r4, #4]
 8008722:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008726:	f020 0003 	bic.w	r0, r0, #3
 800872a:	eba0 0a07 	sub.w	sl, r0, r7
 800872e:	f1ba 0f0f 	cmp.w	sl, #15
 8008732:	dd21      	ble.n	8008778 <_malloc_r+0x358>
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	19e2      	adds	r2, r4, r7
 8008738:	f047 0701 	orr.w	r7, r7, #1
 800873c:	6067      	str	r7, [r4, #4]
 800873e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008742:	f8cc 3008 	str.w	r3, [ip, #8]
 8008746:	f04a 0301 	orr.w	r3, sl, #1
 800874a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800874e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008752:	6053      	str	r3, [r2, #4]
 8008754:	f844 a000 	str.w	sl, [r4, r0]
 8008758:	e693      	b.n	8008482 <_malloc_r+0x62>
 800875a:	bf00      	nop
 800875c:	20000444 	.word	0x20000444
 8008760:	2000044c 	.word	0x2000044c
 8008764:	20000e28 	.word	0x20000e28
 8008768:	2000084c 	.word	0x2000084c
 800876c:	20000e20 	.word	0x20000e20
 8008770:	20000e24 	.word	0x20000e24
 8008774:	20000df8 	.word	0x20000df8
 8008778:	f1ba 0f00 	cmp.w	sl, #0
 800877c:	db11      	blt.n	80087a2 <_malloc_r+0x382>
 800877e:	4420      	add	r0, r4
 8008780:	6843      	ldr	r3, [r0, #4]
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	6043      	str	r3, [r0, #4]
 8008788:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800878c:	4628      	mov	r0, r5
 800878e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008792:	f8cc 3008 	str.w	r3, [ip, #8]
 8008796:	f000 f899 	bl	80088cc <__malloc_unlock>
 800879a:	4620      	mov	r0, r4
 800879c:	b003      	add	sp, #12
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	4664      	mov	r4, ip
 80087a4:	e706      	b.n	80085b4 <_malloc_r+0x194>
 80087a6:	f858 0908 	ldr.w	r0, [r8], #-8
 80087aa:	4540      	cmp	r0, r8
 80087ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80087b0:	f43f af0a 	beq.w	80085c8 <_malloc_r+0x1a8>
 80087b4:	e70f      	b.n	80085d6 <_malloc_r+0x1b6>
 80087b6:	3304      	adds	r3, #4
 80087b8:	0052      	lsls	r2, r2, #1
 80087ba:	4210      	tst	r0, r2
 80087bc:	d0fb      	beq.n	80087b6 <_malloc_r+0x396>
 80087be:	e6f3      	b.n	80085a8 <_malloc_r+0x188>
 80087c0:	4673      	mov	r3, lr
 80087c2:	e7fa      	b.n	80087ba <_malloc_r+0x39a>
 80087c4:	6810      	ldr	r0, [r2, #0]
 80087c6:	3001      	adds	r0, #1
 80087c8:	bf1b      	ittet	ne
 80087ca:	1ae3      	subne	r3, r4, r3
 80087cc:	4473      	addne	r3, lr
 80087ce:	6014      	streq	r4, [r2, #0]
 80087d0:	f8ca 3000 	strne.w	r3, [sl]
 80087d4:	f014 0307 	ands.w	r3, r4, #7
 80087d8:	bf1a      	itte	ne
 80087da:	f1c3 0008 	rsbne	r0, r3, #8
 80087de:	1824      	addne	r4, r4, r0
 80087e0:	4618      	moveq	r0, r3
 80087e2:	1862      	adds	r2, r4, r1
 80087e4:	ea02 010c 	and.w	r1, r2, ip
 80087e8:	4480      	add	r8, r0
 80087ea:	eba8 0801 	sub.w	r8, r8, r1
 80087ee:	ea08 080c 	and.w	r8, r8, ip
 80087f2:	4641      	mov	r1, r8
 80087f4:	4628      	mov	r0, r5
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	9200      	str	r2, [sp, #0]
 80087fa:	f000 fbd5 	bl	8008fa8 <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008804:	d105      	bne.n	8008812 <_malloc_r+0x3f2>
 8008806:	b32b      	cbz	r3, 8008854 <_malloc_r+0x434>
 8008808:	f1a3 0008 	sub.w	r0, r3, #8
 800880c:	4410      	add	r0, r2
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	f8da 2000 	ldr.w	r2, [sl]
 8008816:	60b4      	str	r4, [r6, #8]
 8008818:	1b00      	subs	r0, r0, r4
 800881a:	4440      	add	r0, r8
 800881c:	4442      	add	r2, r8
 800881e:	f040 0001 	orr.w	r0, r0, #1
 8008822:	45b3      	cmp	fp, r6
 8008824:	f8ca 2000 	str.w	r2, [sl]
 8008828:	6060      	str	r0, [r4, #4]
 800882a:	f43f af27 	beq.w	800867c <_malloc_r+0x25c>
 800882e:	f1b9 0f0f 	cmp.w	r9, #15
 8008832:	d812      	bhi.n	800885a <_malloc_r+0x43a>
 8008834:	2301      	movs	r3, #1
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	68b3      	ldr	r3, [r6, #8]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f023 0303 	bic.w	r3, r3, #3
 8008840:	42bb      	cmp	r3, r7
 8008842:	eba3 0207 	sub.w	r2, r3, r7
 8008846:	d301      	bcc.n	800884c <_malloc_r+0x42c>
 8008848:	2a0f      	cmp	r2, #15
 800884a:	dc21      	bgt.n	8008890 <_malloc_r+0x470>
 800884c:	4628      	mov	r0, r5
 800884e:	f000 f83d 	bl	80088cc <__malloc_unlock>
 8008852:	e5f1      	b.n	8008438 <_malloc_r+0x18>
 8008854:	4610      	mov	r0, r2
 8008856:	4698      	mov	r8, r3
 8008858:	e7db      	b.n	8008812 <_malloc_r+0x3f2>
 800885a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800885e:	f1a9 090c 	sub.w	r9, r9, #12
 8008862:	f029 0907 	bic.w	r9, r9, #7
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	ea43 0309 	orr.w	r3, r3, r9
 800886e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008872:	2205      	movs	r2, #5
 8008874:	eb0b 0309 	add.w	r3, fp, r9
 8008878:	f1b9 0f0f 	cmp.w	r9, #15
 800887c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8008880:	f67f aefc 	bls.w	800867c <_malloc_r+0x25c>
 8008884:	f10b 0108 	add.w	r1, fp, #8
 8008888:	4628      	mov	r0, r5
 800888a:	f7ff fd01 	bl	8008290 <_free_r>
 800888e:	e6f5      	b.n	800867c <_malloc_r+0x25c>
 8008890:	68b4      	ldr	r4, [r6, #8]
 8008892:	f047 0301 	orr.w	r3, r7, #1
 8008896:	4427      	add	r7, r4
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	60b7      	str	r7, [r6, #8]
 80088a0:	607a      	str	r2, [r7, #4]
 80088a2:	e5ee      	b.n	8008482 <_malloc_r+0x62>

080088a4 <memcpy>:
 80088a4:	440a      	add	r2, r1
 80088a6:	4291      	cmp	r1, r2
 80088a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ac:	d100      	bne.n	80088b0 <memcpy+0xc>
 80088ae:	4770      	bx	lr
 80088b0:	b510      	push	{r4, lr}
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d1f9      	bne.n	80088b2 <memcpy+0xe>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <__malloc_lock>:
 80088c0:	4801      	ldr	r0, [pc, #4]	; (80088c8 <__malloc_lock+0x8>)
 80088c2:	f7ff bdab 	b.w	800841c <__retarget_lock_acquire_recursive>
 80088c6:	bf00      	nop
 80088c8:	20000fb0 	.word	0x20000fb0

080088cc <__malloc_unlock>:
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <__malloc_unlock+0x8>)
 80088ce:	f7ff bda6 	b.w	800841e <__retarget_lock_release_recursive>
 80088d2:	bf00      	nop
 80088d4:	20000fb0 	.word	0x20000fb0

080088d8 <_Balloc>:
 80088d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80088da:	b570      	push	{r4, r5, r6, lr}
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	b17b      	cbz	r3, 8008902 <_Balloc+0x2a>
 80088e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80088e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80088e8:	b9a0      	cbnz	r0, 8008914 <_Balloc+0x3c>
 80088ea:	2101      	movs	r1, #1
 80088ec:	fa01 f604 	lsl.w	r6, r1, r4
 80088f0:	1d72      	adds	r2, r6, #5
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 fc61 	bl	80091bc <_calloc_r>
 80088fa:	b148      	cbz	r0, 8008910 <_Balloc+0x38>
 80088fc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008900:	e00b      	b.n	800891a <_Balloc+0x42>
 8008902:	2221      	movs	r2, #33	; 0x21
 8008904:	2104      	movs	r1, #4
 8008906:	f000 fc59 	bl	80091bc <_calloc_r>
 800890a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800890c:	2800      	cmp	r0, #0
 800890e:	d1e8      	bne.n	80088e2 <_Balloc+0xa>
 8008910:	2000      	movs	r0, #0
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	6802      	ldr	r2, [r0, #0]
 8008916:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800891a:	2300      	movs	r3, #0
 800891c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008920:	e7f7      	b.n	8008912 <_Balloc+0x3a>

08008922 <_Bfree>:
 8008922:	b131      	cbz	r1, 8008932 <_Bfree+0x10>
 8008924:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008926:	684a      	ldr	r2, [r1, #4]
 8008928:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800892c:	6008      	str	r0, [r1, #0]
 800892e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008932:	4770      	bx	lr

08008934 <__multadd>:
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	690e      	ldr	r6, [r1, #16]
 800893a:	4607      	mov	r7, r0
 800893c:	4698      	mov	r8, r3
 800893e:	460c      	mov	r4, r1
 8008940:	f101 0014 	add.w	r0, r1, #20
 8008944:	2300      	movs	r3, #0
 8008946:	6805      	ldr	r5, [r0, #0]
 8008948:	b2a9      	uxth	r1, r5
 800894a:	fb02 8101 	mla	r1, r2, r1, r8
 800894e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008952:	0c2d      	lsrs	r5, r5, #16
 8008954:	fb02 c505 	mla	r5, r2, r5, ip
 8008958:	b289      	uxth	r1, r1
 800895a:	3301      	adds	r3, #1
 800895c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008960:	429e      	cmp	r6, r3
 8008962:	f840 1b04 	str.w	r1, [r0], #4
 8008966:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800896a:	dcec      	bgt.n	8008946 <__multadd+0x12>
 800896c:	f1b8 0f00 	cmp.w	r8, #0
 8008970:	d022      	beq.n	80089b8 <__multadd+0x84>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	42b3      	cmp	r3, r6
 8008976:	dc19      	bgt.n	80089ac <__multadd+0x78>
 8008978:	6861      	ldr	r1, [r4, #4]
 800897a:	4638      	mov	r0, r7
 800897c:	3101      	adds	r1, #1
 800897e:	f7ff ffab 	bl	80088d8 <_Balloc>
 8008982:	4605      	mov	r5, r0
 8008984:	b928      	cbnz	r0, 8008992 <__multadd+0x5e>
 8008986:	4602      	mov	r2, r0
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <__multadd+0x8c>)
 800898a:	480e      	ldr	r0, [pc, #56]	; (80089c4 <__multadd+0x90>)
 800898c:	21b5      	movs	r1, #181	; 0xb5
 800898e:	f000 fbf7 	bl	8009180 <__assert_func>
 8008992:	6922      	ldr	r2, [r4, #16]
 8008994:	3202      	adds	r2, #2
 8008996:	f104 010c 	add.w	r1, r4, #12
 800899a:	0092      	lsls	r2, r2, #2
 800899c:	300c      	adds	r0, #12
 800899e:	f7ff ff81 	bl	80088a4 <memcpy>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff ffbc 	bl	8008922 <_Bfree>
 80089aa:	462c      	mov	r4, r5
 80089ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80089b0:	3601      	adds	r6, #1
 80089b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80089b6:	6126      	str	r6, [r4, #16]
 80089b8:	4620      	mov	r0, r4
 80089ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089be:	bf00      	nop
 80089c0:	0800b349 	.word	0x0800b349
 80089c4:	0800b3b9 	.word	0x0800b3b9

080089c8 <__hi0bits>:
 80089c8:	0c03      	lsrs	r3, r0, #16
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	b9d3      	cbnz	r3, 8008a04 <__hi0bits+0x3c>
 80089ce:	0400      	lsls	r0, r0, #16
 80089d0:	2310      	movs	r3, #16
 80089d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089d6:	bf04      	itt	eq
 80089d8:	0200      	lsleq	r0, r0, #8
 80089da:	3308      	addeq	r3, #8
 80089dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089e0:	bf04      	itt	eq
 80089e2:	0100      	lsleq	r0, r0, #4
 80089e4:	3304      	addeq	r3, #4
 80089e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089ea:	bf04      	itt	eq
 80089ec:	0080      	lsleq	r0, r0, #2
 80089ee:	3302      	addeq	r3, #2
 80089f0:	2800      	cmp	r0, #0
 80089f2:	db05      	blt.n	8008a00 <__hi0bits+0x38>
 80089f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089f8:	f103 0301 	add.w	r3, r3, #1
 80089fc:	bf08      	it	eq
 80089fe:	2320      	moveq	r3, #32
 8008a00:	4618      	mov	r0, r3
 8008a02:	4770      	bx	lr
 8008a04:	2300      	movs	r3, #0
 8008a06:	e7e4      	b.n	80089d2 <__hi0bits+0xa>

08008a08 <__lo0bits>:
 8008a08:	6803      	ldr	r3, [r0, #0]
 8008a0a:	f013 0207 	ands.w	r2, r3, #7
 8008a0e:	4601      	mov	r1, r0
 8008a10:	d00b      	beq.n	8008a2a <__lo0bits+0x22>
 8008a12:	07da      	lsls	r2, r3, #31
 8008a14:	d424      	bmi.n	8008a60 <__lo0bits+0x58>
 8008a16:	0798      	lsls	r0, r3, #30
 8008a18:	bf49      	itett	mi
 8008a1a:	085b      	lsrmi	r3, r3, #1
 8008a1c:	089b      	lsrpl	r3, r3, #2
 8008a1e:	2001      	movmi	r0, #1
 8008a20:	600b      	strmi	r3, [r1, #0]
 8008a22:	bf5c      	itt	pl
 8008a24:	600b      	strpl	r3, [r1, #0]
 8008a26:	2002      	movpl	r0, #2
 8008a28:	4770      	bx	lr
 8008a2a:	b298      	uxth	r0, r3
 8008a2c:	b9b0      	cbnz	r0, 8008a5c <__lo0bits+0x54>
 8008a2e:	0c1b      	lsrs	r3, r3, #16
 8008a30:	2010      	movs	r0, #16
 8008a32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a36:	bf04      	itt	eq
 8008a38:	0a1b      	lsreq	r3, r3, #8
 8008a3a:	3008      	addeq	r0, #8
 8008a3c:	071a      	lsls	r2, r3, #28
 8008a3e:	bf04      	itt	eq
 8008a40:	091b      	lsreq	r3, r3, #4
 8008a42:	3004      	addeq	r0, #4
 8008a44:	079a      	lsls	r2, r3, #30
 8008a46:	bf04      	itt	eq
 8008a48:	089b      	lsreq	r3, r3, #2
 8008a4a:	3002      	addeq	r0, #2
 8008a4c:	07da      	lsls	r2, r3, #31
 8008a4e:	d403      	bmi.n	8008a58 <__lo0bits+0x50>
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	f100 0001 	add.w	r0, r0, #1
 8008a56:	d005      	beq.n	8008a64 <__lo0bits+0x5c>
 8008a58:	600b      	str	r3, [r1, #0]
 8008a5a:	4770      	bx	lr
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	e7e8      	b.n	8008a32 <__lo0bits+0x2a>
 8008a60:	2000      	movs	r0, #0
 8008a62:	4770      	bx	lr
 8008a64:	2020      	movs	r0, #32
 8008a66:	4770      	bx	lr

08008a68 <__i2b>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	f7ff ff33 	bl	80088d8 <_Balloc>
 8008a72:	4602      	mov	r2, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <__i2b+0x1a>
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <__i2b+0x24>)
 8008a78:	4805      	ldr	r0, [pc, #20]	; (8008a90 <__i2b+0x28>)
 8008a7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a7e:	f000 fb7f 	bl	8009180 <__assert_func>
 8008a82:	2301      	movs	r3, #1
 8008a84:	6144      	str	r4, [r0, #20]
 8008a86:	6103      	str	r3, [r0, #16]
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	0800b349 	.word	0x0800b349
 8008a90:	0800b3b9 	.word	0x0800b3b9

08008a94 <__multiply>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	4614      	mov	r4, r2
 8008a9a:	690a      	ldr	r2, [r1, #16]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	bfb8      	it	lt
 8008aa2:	460b      	movlt	r3, r1
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	bfbc      	itt	lt
 8008aa8:	4625      	movlt	r5, r4
 8008aaa:	461c      	movlt	r4, r3
 8008aac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ab0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ab4:	68ab      	ldr	r3, [r5, #8]
 8008ab6:	6869      	ldr	r1, [r5, #4]
 8008ab8:	eb0a 0709 	add.w	r7, sl, r9
 8008abc:	42bb      	cmp	r3, r7
 8008abe:	b085      	sub	sp, #20
 8008ac0:	bfb8      	it	lt
 8008ac2:	3101      	addlt	r1, #1
 8008ac4:	f7ff ff08 	bl	80088d8 <_Balloc>
 8008ac8:	b930      	cbnz	r0, 8008ad8 <__multiply+0x44>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b42      	ldr	r3, [pc, #264]	; (8008bd8 <__multiply+0x144>)
 8008ace:	4843      	ldr	r0, [pc, #268]	; (8008bdc <__multiply+0x148>)
 8008ad0:	f240 115d 	movw	r1, #349	; 0x15d
 8008ad4:	f000 fb54 	bl	8009180 <__assert_func>
 8008ad8:	f100 0614 	add.w	r6, r0, #20
 8008adc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ae0:	4633      	mov	r3, r6
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4543      	cmp	r3, r8
 8008ae6:	d31e      	bcc.n	8008b26 <__multiply+0x92>
 8008ae8:	f105 0c14 	add.w	ip, r5, #20
 8008aec:	f104 0314 	add.w	r3, r4, #20
 8008af0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008af4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008af8:	9202      	str	r2, [sp, #8]
 8008afa:	ebac 0205 	sub.w	r2, ip, r5
 8008afe:	3a15      	subs	r2, #21
 8008b00:	f022 0203 	bic.w	r2, r2, #3
 8008b04:	3204      	adds	r2, #4
 8008b06:	f105 0115 	add.w	r1, r5, #21
 8008b0a:	458c      	cmp	ip, r1
 8008b0c:	bf38      	it	cc
 8008b0e:	2204      	movcc	r2, #4
 8008b10:	9201      	str	r2, [sp, #4]
 8008b12:	9a02      	ldr	r2, [sp, #8]
 8008b14:	9303      	str	r3, [sp, #12]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d808      	bhi.n	8008b2c <__multiply+0x98>
 8008b1a:	2f00      	cmp	r7, #0
 8008b1c:	dc55      	bgt.n	8008bca <__multiply+0x136>
 8008b1e:	6107      	str	r7, [r0, #16]
 8008b20:	b005      	add	sp, #20
 8008b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b26:	f843 2b04 	str.w	r2, [r3], #4
 8008b2a:	e7db      	b.n	8008ae4 <__multiply+0x50>
 8008b2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b30:	f1ba 0f00 	cmp.w	sl, #0
 8008b34:	d020      	beq.n	8008b78 <__multiply+0xe4>
 8008b36:	f105 0e14 	add.w	lr, r5, #20
 8008b3a:	46b1      	mov	r9, r6
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b42:	f8d9 b000 	ldr.w	fp, [r9]
 8008b46:	b2a1      	uxth	r1, r4
 8008b48:	fa1f fb8b 	uxth.w	fp, fp
 8008b4c:	fb0a b101 	mla	r1, sl, r1, fp
 8008b50:	4411      	add	r1, r2
 8008b52:	f8d9 2000 	ldr.w	r2, [r9]
 8008b56:	0c24      	lsrs	r4, r4, #16
 8008b58:	0c12      	lsrs	r2, r2, #16
 8008b5a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b62:	b289      	uxth	r1, r1
 8008b64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b68:	45f4      	cmp	ip, lr
 8008b6a:	f849 1b04 	str.w	r1, [r9], #4
 8008b6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b72:	d8e4      	bhi.n	8008b3e <__multiply+0xaa>
 8008b74:	9901      	ldr	r1, [sp, #4]
 8008b76:	5072      	str	r2, [r6, r1]
 8008b78:	9a03      	ldr	r2, [sp, #12]
 8008b7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	f1b9 0f00 	cmp.w	r9, #0
 8008b84:	d01f      	beq.n	8008bc6 <__multiply+0x132>
 8008b86:	6834      	ldr	r4, [r6, #0]
 8008b88:	f105 0114 	add.w	r1, r5, #20
 8008b8c:	46b6      	mov	lr, r6
 8008b8e:	f04f 0a00 	mov.w	sl, #0
 8008b92:	880a      	ldrh	r2, [r1, #0]
 8008b94:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b98:	fb09 b202 	mla	r2, r9, r2, fp
 8008b9c:	4492      	add	sl, r2
 8008b9e:	b2a4      	uxth	r4, r4
 8008ba0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ba4:	f84e 4b04 	str.w	r4, [lr], #4
 8008ba8:	f851 4b04 	ldr.w	r4, [r1], #4
 8008bac:	f8be 2000 	ldrh.w	r2, [lr]
 8008bb0:	0c24      	lsrs	r4, r4, #16
 8008bb2:	fb09 2404 	mla	r4, r9, r4, r2
 8008bb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008bba:	458c      	cmp	ip, r1
 8008bbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008bc0:	d8e7      	bhi.n	8008b92 <__multiply+0xfe>
 8008bc2:	9a01      	ldr	r2, [sp, #4]
 8008bc4:	50b4      	str	r4, [r6, r2]
 8008bc6:	3604      	adds	r6, #4
 8008bc8:	e7a3      	b.n	8008b12 <__multiply+0x7e>
 8008bca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1a5      	bne.n	8008b1e <__multiply+0x8a>
 8008bd2:	3f01      	subs	r7, #1
 8008bd4:	e7a1      	b.n	8008b1a <__multiply+0x86>
 8008bd6:	bf00      	nop
 8008bd8:	0800b349 	.word	0x0800b349
 8008bdc:	0800b3b9 	.word	0x0800b3b9

08008be0 <__pow5mult>:
 8008be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be4:	4615      	mov	r5, r2
 8008be6:	f012 0203 	ands.w	r2, r2, #3
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	d007      	beq.n	8008c00 <__pow5mult+0x20>
 8008bf0:	4c1a      	ldr	r4, [pc, #104]	; (8008c5c <__pow5mult+0x7c>)
 8008bf2:	3a01      	subs	r2, #1
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bfa:	f7ff fe9b 	bl	8008934 <__multadd>
 8008bfe:	4607      	mov	r7, r0
 8008c00:	10ad      	asrs	r5, r5, #2
 8008c02:	d027      	beq.n	8008c54 <__pow5mult+0x74>
 8008c04:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008c06:	b944      	cbnz	r4, 8008c1a <__pow5mult+0x3a>
 8008c08:	f240 2171 	movw	r1, #625	; 0x271
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ff2b 	bl	8008a68 <__i2b>
 8008c12:	2300      	movs	r3, #0
 8008c14:	64b0      	str	r0, [r6, #72]	; 0x48
 8008c16:	4604      	mov	r4, r0
 8008c18:	6003      	str	r3, [r0, #0]
 8008c1a:	f04f 0900 	mov.w	r9, #0
 8008c1e:	07eb      	lsls	r3, r5, #31
 8008c20:	d50a      	bpl.n	8008c38 <__pow5mult+0x58>
 8008c22:	4639      	mov	r1, r7
 8008c24:	4622      	mov	r2, r4
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ff34 	bl	8008a94 <__multiply>
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	4680      	mov	r8, r0
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff fe76 	bl	8008922 <_Bfree>
 8008c36:	4647      	mov	r7, r8
 8008c38:	106d      	asrs	r5, r5, #1
 8008c3a:	d00b      	beq.n	8008c54 <__pow5mult+0x74>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	b938      	cbnz	r0, 8008c50 <__pow5mult+0x70>
 8008c40:	4622      	mov	r2, r4
 8008c42:	4621      	mov	r1, r4
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff ff25 	bl	8008a94 <__multiply>
 8008c4a:	6020      	str	r0, [r4, #0]
 8008c4c:	f8c0 9000 	str.w	r9, [r0]
 8008c50:	4604      	mov	r4, r0
 8008c52:	e7e4      	b.n	8008c1e <__pow5mult+0x3e>
 8008c54:	4638      	mov	r0, r7
 8008c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c5a:	bf00      	nop
 8008c5c:	0800b510 	.word	0x0800b510

08008c60 <__lshift>:
 8008c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c64:	460c      	mov	r4, r1
 8008c66:	6849      	ldr	r1, [r1, #4]
 8008c68:	6923      	ldr	r3, [r4, #16]
 8008c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c6e:	68a3      	ldr	r3, [r4, #8]
 8008c70:	4607      	mov	r7, r0
 8008c72:	4691      	mov	r9, r2
 8008c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c78:	f108 0601 	add.w	r6, r8, #1
 8008c7c:	42b3      	cmp	r3, r6
 8008c7e:	db0b      	blt.n	8008c98 <__lshift+0x38>
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff fe29 	bl	80088d8 <_Balloc>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b948      	cbnz	r0, 8008c9e <__lshift+0x3e>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <__lshift+0xd0>)
 8008c8e:	4829      	ldr	r0, [pc, #164]	; (8008d34 <__lshift+0xd4>)
 8008c90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c94:	f000 fa74 	bl	8009180 <__assert_func>
 8008c98:	3101      	adds	r1, #1
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	e7ee      	b.n	8008c7c <__lshift+0x1c>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f100 0114 	add.w	r1, r0, #20
 8008ca4:	f100 0210 	add.w	r2, r0, #16
 8008ca8:	4618      	mov	r0, r3
 8008caa:	4553      	cmp	r3, sl
 8008cac:	db33      	blt.n	8008d16 <__lshift+0xb6>
 8008cae:	6920      	ldr	r0, [r4, #16]
 8008cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cb4:	f104 0314 	add.w	r3, r4, #20
 8008cb8:	f019 091f 	ands.w	r9, r9, #31
 8008cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cc4:	d02b      	beq.n	8008d1e <__lshift+0xbe>
 8008cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cca:	468a      	mov	sl, r1
 8008ccc:	2200      	movs	r2, #0
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	fa00 f009 	lsl.w	r0, r0, r9
 8008cd4:	4302      	orrs	r2, r0
 8008cd6:	f84a 2b04 	str.w	r2, [sl], #4
 8008cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cde:	459c      	cmp	ip, r3
 8008ce0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ce4:	d8f3      	bhi.n	8008cce <__lshift+0x6e>
 8008ce6:	ebac 0304 	sub.w	r3, ip, r4
 8008cea:	3b15      	subs	r3, #21
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	f104 0015 	add.w	r0, r4, #21
 8008cf6:	4584      	cmp	ip, r0
 8008cf8:	bf38      	it	cc
 8008cfa:	2304      	movcc	r3, #4
 8008cfc:	50ca      	str	r2, [r1, r3]
 8008cfe:	b10a      	cbz	r2, 8008d04 <__lshift+0xa4>
 8008d00:	f108 0602 	add.w	r6, r8, #2
 8008d04:	3e01      	subs	r6, #1
 8008d06:	4638      	mov	r0, r7
 8008d08:	612e      	str	r6, [r5, #16]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	f7ff fe09 	bl	8008922 <_Bfree>
 8008d10:	4628      	mov	r0, r5
 8008d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d16:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	e7c5      	b.n	8008caa <__lshift+0x4a>
 8008d1e:	3904      	subs	r1, #4
 8008d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d28:	459c      	cmp	ip, r3
 8008d2a:	d8f9      	bhi.n	8008d20 <__lshift+0xc0>
 8008d2c:	e7ea      	b.n	8008d04 <__lshift+0xa4>
 8008d2e:	bf00      	nop
 8008d30:	0800b349 	.word	0x0800b349
 8008d34:	0800b3b9 	.word	0x0800b3b9

08008d38 <__mcmp>:
 8008d38:	b530      	push	{r4, r5, lr}
 8008d3a:	6902      	ldr	r2, [r0, #16]
 8008d3c:	690c      	ldr	r4, [r1, #16]
 8008d3e:	1b12      	subs	r2, r2, r4
 8008d40:	d10e      	bne.n	8008d60 <__mcmp+0x28>
 8008d42:	f100 0314 	add.w	r3, r0, #20
 8008d46:	3114      	adds	r1, #20
 8008d48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d58:	42a5      	cmp	r5, r4
 8008d5a:	d003      	beq.n	8008d64 <__mcmp+0x2c>
 8008d5c:	d305      	bcc.n	8008d6a <__mcmp+0x32>
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4610      	mov	r0, r2
 8008d62:	bd30      	pop	{r4, r5, pc}
 8008d64:	4283      	cmp	r3, r0
 8008d66:	d3f3      	bcc.n	8008d50 <__mcmp+0x18>
 8008d68:	e7fa      	b.n	8008d60 <__mcmp+0x28>
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	e7f7      	b.n	8008d60 <__mcmp+0x28>

08008d70 <__mdiff>:
 8008d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	460c      	mov	r4, r1
 8008d76:	4606      	mov	r6, r0
 8008d78:	4611      	mov	r1, r2
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4617      	mov	r7, r2
 8008d7e:	f7ff ffdb 	bl	8008d38 <__mcmp>
 8008d82:	1e05      	subs	r5, r0, #0
 8008d84:	d110      	bne.n	8008da8 <__mdiff+0x38>
 8008d86:	4629      	mov	r1, r5
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7ff fda5 	bl	80088d8 <_Balloc>
 8008d8e:	b930      	cbnz	r0, 8008d9e <__mdiff+0x2e>
 8008d90:	4b39      	ldr	r3, [pc, #228]	; (8008e78 <__mdiff+0x108>)
 8008d92:	4602      	mov	r2, r0
 8008d94:	f240 2132 	movw	r1, #562	; 0x232
 8008d98:	4838      	ldr	r0, [pc, #224]	; (8008e7c <__mdiff+0x10c>)
 8008d9a:	f000 f9f1 	bl	8009180 <__assert_func>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da8:	bfa4      	itt	ge
 8008daa:	463b      	movge	r3, r7
 8008dac:	4627      	movge	r7, r4
 8008dae:	4630      	mov	r0, r6
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	bfa6      	itte	ge
 8008db4:	461c      	movge	r4, r3
 8008db6:	2500      	movge	r5, #0
 8008db8:	2501      	movlt	r5, #1
 8008dba:	f7ff fd8d 	bl	80088d8 <_Balloc>
 8008dbe:	b920      	cbnz	r0, 8008dca <__mdiff+0x5a>
 8008dc0:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <__mdiff+0x108>)
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dc8:	e7e6      	b.n	8008d98 <__mdiff+0x28>
 8008dca:	693e      	ldr	r6, [r7, #16]
 8008dcc:	60c5      	str	r5, [r0, #12]
 8008dce:	6925      	ldr	r5, [r4, #16]
 8008dd0:	f107 0114 	add.w	r1, r7, #20
 8008dd4:	f104 0914 	add.w	r9, r4, #20
 8008dd8:	f100 0e14 	add.w	lr, r0, #20
 8008ddc:	f107 0210 	add.w	r2, r7, #16
 8008de0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008de4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008de8:	46f2      	mov	sl, lr
 8008dea:	2700      	movs	r7, #0
 8008dec:	f859 3b04 	ldr.w	r3, [r9], #4
 8008df0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008df4:	fa1f f883 	uxth.w	r8, r3
 8008df8:	fa17 f78b 	uxtah	r7, r7, fp
 8008dfc:	0c1b      	lsrs	r3, r3, #16
 8008dfe:	eba7 0808 	sub.w	r8, r7, r8
 8008e02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e0a:	fa1f f888 	uxth.w	r8, r8
 8008e0e:	141f      	asrs	r7, r3, #16
 8008e10:	454d      	cmp	r5, r9
 8008e12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e16:	f84a 3b04 	str.w	r3, [sl], #4
 8008e1a:	d8e7      	bhi.n	8008dec <__mdiff+0x7c>
 8008e1c:	1b2b      	subs	r3, r5, r4
 8008e1e:	3b15      	subs	r3, #21
 8008e20:	f023 0303 	bic.w	r3, r3, #3
 8008e24:	3304      	adds	r3, #4
 8008e26:	3415      	adds	r4, #21
 8008e28:	42a5      	cmp	r5, r4
 8008e2a:	bf38      	it	cc
 8008e2c:	2304      	movcc	r3, #4
 8008e2e:	4419      	add	r1, r3
 8008e30:	4473      	add	r3, lr
 8008e32:	469e      	mov	lr, r3
 8008e34:	460d      	mov	r5, r1
 8008e36:	4565      	cmp	r5, ip
 8008e38:	d30e      	bcc.n	8008e58 <__mdiff+0xe8>
 8008e3a:	f10c 0203 	add.w	r2, ip, #3
 8008e3e:	1a52      	subs	r2, r2, r1
 8008e40:	f022 0203 	bic.w	r2, r2, #3
 8008e44:	3903      	subs	r1, #3
 8008e46:	458c      	cmp	ip, r1
 8008e48:	bf38      	it	cc
 8008e4a:	2200      	movcc	r2, #0
 8008e4c:	441a      	add	r2, r3
 8008e4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e52:	b17b      	cbz	r3, 8008e74 <__mdiff+0x104>
 8008e54:	6106      	str	r6, [r0, #16]
 8008e56:	e7a5      	b.n	8008da4 <__mdiff+0x34>
 8008e58:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e5c:	fa17 f488 	uxtah	r4, r7, r8
 8008e60:	1422      	asrs	r2, r4, #16
 8008e62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008e66:	b2a4      	uxth	r4, r4
 8008e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e6c:	f84e 4b04 	str.w	r4, [lr], #4
 8008e70:	1417      	asrs	r7, r2, #16
 8008e72:	e7e0      	b.n	8008e36 <__mdiff+0xc6>
 8008e74:	3e01      	subs	r6, #1
 8008e76:	e7ea      	b.n	8008e4e <__mdiff+0xde>
 8008e78:	0800b349 	.word	0x0800b349
 8008e7c:	0800b3b9 	.word	0x0800b3b9

08008e80 <__d2b>:
 8008e80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e84:	4689      	mov	r9, r1
 8008e86:	2101      	movs	r1, #1
 8008e88:	ec57 6b10 	vmov	r6, r7, d0
 8008e8c:	4690      	mov	r8, r2
 8008e8e:	f7ff fd23 	bl	80088d8 <_Balloc>
 8008e92:	4604      	mov	r4, r0
 8008e94:	b930      	cbnz	r0, 8008ea4 <__d2b+0x24>
 8008e96:	4602      	mov	r2, r0
 8008e98:	4b25      	ldr	r3, [pc, #148]	; (8008f30 <__d2b+0xb0>)
 8008e9a:	4826      	ldr	r0, [pc, #152]	; (8008f34 <__d2b+0xb4>)
 8008e9c:	f240 310a 	movw	r1, #778	; 0x30a
 8008ea0:	f000 f96e 	bl	8009180 <__assert_func>
 8008ea4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008eac:	bb35      	cbnz	r5, 8008efc <__d2b+0x7c>
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	d028      	beq.n	8008f06 <__d2b+0x86>
 8008eb4:	4668      	mov	r0, sp
 8008eb6:	9600      	str	r6, [sp, #0]
 8008eb8:	f7ff fda6 	bl	8008a08 <__lo0bits>
 8008ebc:	9900      	ldr	r1, [sp, #0]
 8008ebe:	b300      	cbz	r0, 8008f02 <__d2b+0x82>
 8008ec0:	9a01      	ldr	r2, [sp, #4]
 8008ec2:	f1c0 0320 	rsb	r3, r0, #32
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	40c2      	lsrs	r2, r0
 8008ece:	6163      	str	r3, [r4, #20]
 8008ed0:	9201      	str	r2, [sp, #4]
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	61a3      	str	r3, [r4, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bf14      	ite	ne
 8008eda:	2202      	movne	r2, #2
 8008edc:	2201      	moveq	r2, #1
 8008ede:	6122      	str	r2, [r4, #16]
 8008ee0:	b1d5      	cbz	r5, 8008f18 <__d2b+0x98>
 8008ee2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ee6:	4405      	add	r5, r0
 8008ee8:	f8c9 5000 	str.w	r5, [r9]
 8008eec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ef0:	f8c8 0000 	str.w	r0, [r8]
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	b003      	add	sp, #12
 8008ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f00:	e7d5      	b.n	8008eae <__d2b+0x2e>
 8008f02:	6161      	str	r1, [r4, #20]
 8008f04:	e7e5      	b.n	8008ed2 <__d2b+0x52>
 8008f06:	a801      	add	r0, sp, #4
 8008f08:	f7ff fd7e 	bl	8008a08 <__lo0bits>
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	6163      	str	r3, [r4, #20]
 8008f10:	2201      	movs	r2, #1
 8008f12:	6122      	str	r2, [r4, #16]
 8008f14:	3020      	adds	r0, #32
 8008f16:	e7e3      	b.n	8008ee0 <__d2b+0x60>
 8008f18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f20:	f8c9 0000 	str.w	r0, [r9]
 8008f24:	6918      	ldr	r0, [r3, #16]
 8008f26:	f7ff fd4f 	bl	80089c8 <__hi0bits>
 8008f2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f2e:	e7df      	b.n	8008ef0 <__d2b+0x70>
 8008f30:	0800b349 	.word	0x0800b349
 8008f34:	0800b3b9 	.word	0x0800b3b9

08008f38 <frexp>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	ec55 4b10 	vmov	r4, r5, d0
 8008f40:	6001      	str	r1, [r0, #0]
 8008f42:	4916      	ldr	r1, [pc, #88]	; (8008f9c <frexp+0x64>)
 8008f44:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008f48:	428a      	cmp	r2, r1
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	dc22      	bgt.n	8008f96 <frexp+0x5e>
 8008f50:	ee10 1a10 	vmov	r1, s0
 8008f54:	4311      	orrs	r1, r2
 8008f56:	d01e      	beq.n	8008f96 <frexp+0x5e>
 8008f58:	4911      	ldr	r1, [pc, #68]	; (8008fa0 <frexp+0x68>)
 8008f5a:	4029      	ands	r1, r5
 8008f5c:	b969      	cbnz	r1, 8008f7a <frexp+0x42>
 8008f5e:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <frexp+0x6c>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	ee10 0a10 	vmov	r0, s0
 8008f66:	4629      	mov	r1, r5
 8008f68:	f7f7 fb4e 	bl	8000608 <__aeabi_dmul>
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008f72:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008f76:	4604      	mov	r4, r0
 8008f78:	6031      	str	r1, [r6, #0]
 8008f7a:	6831      	ldr	r1, [r6, #0]
 8008f7c:	1512      	asrs	r2, r2, #20
 8008f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f82:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8008f86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8008f90:	6032      	str	r2, [r6, #0]
 8008f92:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8008f96:	ec45 4b10 	vmov	d0, r4, r5
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	7fefffff 	.word	0x7fefffff
 8008fa0:	7ff00000 	.word	0x7ff00000
 8008fa4:	43500000 	.word	0x43500000

08008fa8 <_sbrk_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d06      	ldr	r5, [pc, #24]	; (8008fc4 <_sbrk_r+0x1c>)
 8008fac:	2300      	movs	r3, #0
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	f7f9 fb2e 	bl	8002614 <_sbrk>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_sbrk_r+0x1a>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_sbrk_r+0x1a>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20000fb8 	.word	0x20000fb8

08008fc8 <strncpy>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	3901      	subs	r1, #1
 8008fcc:	4603      	mov	r3, r0
 8008fce:	b132      	cbz	r2, 8008fde <strncpy+0x16>
 8008fd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008fd4:	f803 4b01 	strb.w	r4, [r3], #1
 8008fd8:	3a01      	subs	r2, #1
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	d1f7      	bne.n	8008fce <strncpy+0x6>
 8008fde:	441a      	add	r2, r3
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d100      	bne.n	8008fe8 <strncpy+0x20>
 8008fe6:	bd10      	pop	{r4, pc}
 8008fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8008fec:	e7f9      	b.n	8008fe2 <strncpy+0x1a>

08008fee <__ssprint_r>:
 8008fee:	6893      	ldr	r3, [r2, #8]
 8008ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4617      	mov	r7, r2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d061      	beq.n	80090c2 <__ssprint_r+0xd4>
 8008ffe:	2300      	movs	r3, #0
 8009000:	f8d2 a000 	ldr.w	sl, [r2]
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	469b      	mov	fp, r3
 8009008:	f1bb 0f00 	cmp.w	fp, #0
 800900c:	d02b      	beq.n	8009066 <__ssprint_r+0x78>
 800900e:	68a6      	ldr	r6, [r4, #8]
 8009010:	45b3      	cmp	fp, r6
 8009012:	d342      	bcc.n	800909a <__ssprint_r+0xac>
 8009014:	89a2      	ldrh	r2, [r4, #12]
 8009016:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800901a:	d03e      	beq.n	800909a <__ssprint_r+0xac>
 800901c:	6825      	ldr	r5, [r4, #0]
 800901e:	6921      	ldr	r1, [r4, #16]
 8009020:	eba5 0901 	sub.w	r9, r5, r1
 8009024:	6965      	ldr	r5, [r4, #20]
 8009026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800902a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800902e:	f109 0001 	add.w	r0, r9, #1
 8009032:	106d      	asrs	r5, r5, #1
 8009034:	4458      	add	r0, fp
 8009036:	4285      	cmp	r5, r0
 8009038:	bf38      	it	cc
 800903a:	4605      	movcc	r5, r0
 800903c:	0553      	lsls	r3, r2, #21
 800903e:	d545      	bpl.n	80090cc <__ssprint_r+0xde>
 8009040:	4629      	mov	r1, r5
 8009042:	4640      	mov	r0, r8
 8009044:	f7ff f9ec 	bl	8008420 <_malloc_r>
 8009048:	4606      	mov	r6, r0
 800904a:	b9a0      	cbnz	r0, 8009076 <__ssprint_r+0x88>
 800904c:	230c      	movs	r3, #12
 800904e:	f8c8 3000 	str.w	r3, [r8]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	2300      	movs	r3, #0
 800905c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e02f      	b.n	80090c6 <__ssprint_r+0xd8>
 8009066:	f8da 3000 	ldr.w	r3, [sl]
 800906a:	f8da b004 	ldr.w	fp, [sl, #4]
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	f10a 0a08 	add.w	sl, sl, #8
 8009074:	e7c8      	b.n	8009008 <__ssprint_r+0x1a>
 8009076:	464a      	mov	r2, r9
 8009078:	6921      	ldr	r1, [r4, #16]
 800907a:	f7ff fc13 	bl	80088a4 <memcpy>
 800907e:	89a2      	ldrh	r2, [r4, #12]
 8009080:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009088:	81a2      	strh	r2, [r4, #12]
 800908a:	6126      	str	r6, [r4, #16]
 800908c:	6165      	str	r5, [r4, #20]
 800908e:	444e      	add	r6, r9
 8009090:	eba5 0509 	sub.w	r5, r5, r9
 8009094:	6026      	str	r6, [r4, #0]
 8009096:	60a5      	str	r5, [r4, #8]
 8009098:	465e      	mov	r6, fp
 800909a:	455e      	cmp	r6, fp
 800909c:	bf28      	it	cs
 800909e:	465e      	movcs	r6, fp
 80090a0:	4632      	mov	r2, r6
 80090a2:	9901      	ldr	r1, [sp, #4]
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	f000 f8e1 	bl	800926c <memmove>
 80090aa:	68a2      	ldr	r2, [r4, #8]
 80090ac:	1b92      	subs	r2, r2, r6
 80090ae:	60a2      	str	r2, [r4, #8]
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	4432      	add	r2, r6
 80090b4:	6022      	str	r2, [r4, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	eba2 030b 	sub.w	r3, r2, fp
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d1      	bne.n	8009066 <__ssprint_r+0x78>
 80090c2:	2000      	movs	r0, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	b003      	add	sp, #12
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	462a      	mov	r2, r5
 80090ce:	4640      	mov	r0, r8
 80090d0:	f000 f8e6 	bl	80092a0 <_realloc_r>
 80090d4:	4606      	mov	r6, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1d7      	bne.n	800908a <__ssprint_r+0x9c>
 80090da:	6921      	ldr	r1, [r4, #16]
 80090dc:	4640      	mov	r0, r8
 80090de:	f7ff f8d7 	bl	8008290 <_free_r>
 80090e2:	e7b3      	b.n	800904c <__ssprint_r+0x5e>

080090e4 <sysconf>:
 80090e4:	2808      	cmp	r0, #8
 80090e6:	b508      	push	{r3, lr}
 80090e8:	d006      	beq.n	80090f8 <sysconf+0x14>
 80090ea:	f7fc ffc7 	bl	800607c <__errno>
 80090ee:	2316      	movs	r3, #22
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	bd08      	pop	{r3, pc}
 80090f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80090fc:	e7fb      	b.n	80090f6 <sysconf+0x12>
	...

08009100 <__register_exitproc>:
 8009100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009104:	4d1c      	ldr	r5, [pc, #112]	; (8009178 <__register_exitproc+0x78>)
 8009106:	4606      	mov	r6, r0
 8009108:	6828      	ldr	r0, [r5, #0]
 800910a:	4698      	mov	r8, r3
 800910c:	460f      	mov	r7, r1
 800910e:	4691      	mov	r9, r2
 8009110:	f7ff f984 	bl	800841c <__retarget_lock_acquire_recursive>
 8009114:	4b19      	ldr	r3, [pc, #100]	; (800917c <__register_exitproc+0x7c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800911c:	4628      	mov	r0, r5
 800911e:	b91c      	cbnz	r4, 8009128 <__register_exitproc+0x28>
 8009120:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8009124:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8009128:	6865      	ldr	r5, [r4, #4]
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	2d1f      	cmp	r5, #31
 800912e:	dd05      	ble.n	800913c <__register_exitproc+0x3c>
 8009130:	f7ff f975 	bl	800841e <__retarget_lock_release_recursive>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913c:	b19e      	cbz	r6, 8009166 <__register_exitproc+0x66>
 800913e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009142:	2201      	movs	r2, #1
 8009144:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009148:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800914c:	40aa      	lsls	r2, r5
 800914e:	4313      	orrs	r3, r2
 8009150:	2e02      	cmp	r6, #2
 8009152:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009156:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800915a:	bf02      	ittt	eq
 800915c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009160:	431a      	orreq	r2, r3
 8009162:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8009166:	1c6b      	adds	r3, r5, #1
 8009168:	3502      	adds	r5, #2
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009170:	f7ff f955 	bl	800841e <__retarget_lock_release_recursive>
 8009174:	2000      	movs	r0, #0
 8009176:	e7df      	b.n	8009138 <__register_exitproc+0x38>
 8009178:	20000440 	.word	0x20000440
 800917c:	0800b2e4 	.word	0x0800b2e4

08009180 <__assert_func>:
 8009180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009182:	4614      	mov	r4, r2
 8009184:	461a      	mov	r2, r3
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <__assert_func+0x2c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4605      	mov	r5, r0
 800918c:	68d8      	ldr	r0, [r3, #12]
 800918e:	b14c      	cbz	r4, 80091a4 <__assert_func+0x24>
 8009190:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <__assert_func+0x30>)
 8009192:	9100      	str	r1, [sp, #0]
 8009194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009198:	4906      	ldr	r1, [pc, #24]	; (80091b4 <__assert_func+0x34>)
 800919a:	462b      	mov	r3, r5
 800919c:	f000 f83c 	bl	8009218 <fiprintf>
 80091a0:	f000 ff84 	bl	800a0ac <abort>
 80091a4:	4b04      	ldr	r3, [pc, #16]	; (80091b8 <__assert_func+0x38>)
 80091a6:	461c      	mov	r4, r3
 80091a8:	e7f3      	b.n	8009192 <__assert_func+0x12>
 80091aa:	bf00      	nop
 80091ac:	20000014 	.word	0x20000014
 80091b0:	0800b51c 	.word	0x0800b51c
 80091b4:	0800b529 	.word	0x0800b529
 80091b8:	0800b557 	.word	0x0800b557

080091bc <_calloc_r>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	4351      	muls	r1, r2
 80091c0:	f7ff f92e 	bl	8008420 <_malloc_r>
 80091c4:	4604      	mov	r4, r0
 80091c6:	b198      	cbz	r0, 80091f0 <_calloc_r+0x34>
 80091c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80091cc:	f022 0203 	bic.w	r2, r2, #3
 80091d0:	3a04      	subs	r2, #4
 80091d2:	2a24      	cmp	r2, #36	; 0x24
 80091d4:	d81b      	bhi.n	800920e <_calloc_r+0x52>
 80091d6:	2a13      	cmp	r2, #19
 80091d8:	d917      	bls.n	800920a <_calloc_r+0x4e>
 80091da:	2100      	movs	r1, #0
 80091dc:	2a1b      	cmp	r2, #27
 80091de:	e9c0 1100 	strd	r1, r1, [r0]
 80091e2:	d807      	bhi.n	80091f4 <_calloc_r+0x38>
 80091e4:	f100 0308 	add.w	r3, r0, #8
 80091e8:	2200      	movs	r2, #0
 80091ea:	e9c3 2200 	strd	r2, r2, [r3]
 80091ee:	609a      	str	r2, [r3, #8]
 80091f0:	4620      	mov	r0, r4
 80091f2:	bd10      	pop	{r4, pc}
 80091f4:	2a24      	cmp	r2, #36	; 0x24
 80091f6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80091fa:	bf11      	iteee	ne
 80091fc:	f100 0310 	addne.w	r3, r0, #16
 8009200:	6101      	streq	r1, [r0, #16]
 8009202:	f100 0318 	addeq.w	r3, r0, #24
 8009206:	6141      	streq	r1, [r0, #20]
 8009208:	e7ee      	b.n	80091e8 <_calloc_r+0x2c>
 800920a:	4603      	mov	r3, r0
 800920c:	e7ec      	b.n	80091e8 <_calloc_r+0x2c>
 800920e:	2100      	movs	r1, #0
 8009210:	f7fc ff5e 	bl	80060d0 <memset>
 8009214:	e7ec      	b.n	80091f0 <_calloc_r+0x34>
	...

08009218 <fiprintf>:
 8009218:	b40e      	push	{r1, r2, r3}
 800921a:	b503      	push	{r0, r1, lr}
 800921c:	4601      	mov	r1, r0
 800921e:	ab03      	add	r3, sp, #12
 8009220:	4805      	ldr	r0, [pc, #20]	; (8009238 <fiprintf+0x20>)
 8009222:	f853 2b04 	ldr.w	r2, [r3], #4
 8009226:	6800      	ldr	r0, [r0, #0]
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f000 fa11 	bl	8009650 <_vfiprintf_r>
 800922e:	b002      	add	sp, #8
 8009230:	f85d eb04 	ldr.w	lr, [sp], #4
 8009234:	b003      	add	sp, #12
 8009236:	4770      	bx	lr
 8009238:	20000014 	.word	0x20000014

0800923c <__locale_mb_cur_max>:
 800923c:	4b01      	ldr	r3, [pc, #4]	; (8009244 <__locale_mb_cur_max+0x8>)
 800923e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009242:	4770      	bx	lr
 8009244:	20000854 	.word	0x20000854

08009248 <__ascii_mbtowc>:
 8009248:	b082      	sub	sp, #8
 800924a:	b901      	cbnz	r1, 800924e <__ascii_mbtowc+0x6>
 800924c:	a901      	add	r1, sp, #4
 800924e:	b142      	cbz	r2, 8009262 <__ascii_mbtowc+0x1a>
 8009250:	b14b      	cbz	r3, 8009266 <__ascii_mbtowc+0x1e>
 8009252:	7813      	ldrb	r3, [r2, #0]
 8009254:	600b      	str	r3, [r1, #0]
 8009256:	7812      	ldrb	r2, [r2, #0]
 8009258:	1e10      	subs	r0, r2, #0
 800925a:	bf18      	it	ne
 800925c:	2001      	movne	r0, #1
 800925e:	b002      	add	sp, #8
 8009260:	4770      	bx	lr
 8009262:	4610      	mov	r0, r2
 8009264:	e7fb      	b.n	800925e <__ascii_mbtowc+0x16>
 8009266:	f06f 0001 	mvn.w	r0, #1
 800926a:	e7f8      	b.n	800925e <__ascii_mbtowc+0x16>

0800926c <memmove>:
 800926c:	4288      	cmp	r0, r1
 800926e:	b510      	push	{r4, lr}
 8009270:	eb01 0402 	add.w	r4, r1, r2
 8009274:	d902      	bls.n	800927c <memmove+0x10>
 8009276:	4284      	cmp	r4, r0
 8009278:	4623      	mov	r3, r4
 800927a:	d807      	bhi.n	800928c <memmove+0x20>
 800927c:	1e43      	subs	r3, r0, #1
 800927e:	42a1      	cmp	r1, r4
 8009280:	d008      	beq.n	8009294 <memmove+0x28>
 8009282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800928a:	e7f8      	b.n	800927e <memmove+0x12>
 800928c:	4402      	add	r2, r0
 800928e:	4601      	mov	r1, r0
 8009290:	428a      	cmp	r2, r1
 8009292:	d100      	bne.n	8009296 <memmove+0x2a>
 8009294:	bd10      	pop	{r4, pc}
 8009296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800929a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800929e:	e7f7      	b.n	8009290 <memmove+0x24>

080092a0 <_realloc_r>:
 80092a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	4681      	mov	r9, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	b929      	cbnz	r1, 80092b6 <_realloc_r+0x16>
 80092aa:	4611      	mov	r1, r2
 80092ac:	b003      	add	sp, #12
 80092ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b2:	f7ff b8b5 	b.w	8008420 <_malloc_r>
 80092b6:	9201      	str	r2, [sp, #4]
 80092b8:	f7ff fb02 	bl	80088c0 <__malloc_lock>
 80092bc:	9a01      	ldr	r2, [sp, #4]
 80092be:	f102 080b 	add.w	r8, r2, #11
 80092c2:	f1b8 0f16 	cmp.w	r8, #22
 80092c6:	d90b      	bls.n	80092e0 <_realloc_r+0x40>
 80092c8:	f038 0807 	bics.w	r8, r8, #7
 80092cc:	d50a      	bpl.n	80092e4 <_realloc_r+0x44>
 80092ce:	230c      	movs	r3, #12
 80092d0:	f8c9 3000 	str.w	r3, [r9]
 80092d4:	f04f 0b00 	mov.w	fp, #0
 80092d8:	4658      	mov	r0, fp
 80092da:	b003      	add	sp, #12
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	f04f 0810 	mov.w	r8, #16
 80092e4:	4590      	cmp	r8, r2
 80092e6:	d3f2      	bcc.n	80092ce <_realloc_r+0x2e>
 80092e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80092ec:	f025 0603 	bic.w	r6, r5, #3
 80092f0:	45b0      	cmp	r8, r6
 80092f2:	f1a4 0a08 	sub.w	sl, r4, #8
 80092f6:	f340 8170 	ble.w	80095da <_realloc_r+0x33a>
 80092fa:	48a9      	ldr	r0, [pc, #676]	; (80095a0 <_realloc_r+0x300>)
 80092fc:	9001      	str	r0, [sp, #4]
 80092fe:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8009302:	eb0a 0306 	add.w	r3, sl, r6
 8009306:	459c      	cmp	ip, r3
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	d005      	beq.n	8009318 <_realloc_r+0x78>
 800930c:	f021 0001 	bic.w	r0, r1, #1
 8009310:	4418      	add	r0, r3
 8009312:	6840      	ldr	r0, [r0, #4]
 8009314:	07c7      	lsls	r7, r0, #31
 8009316:	d427      	bmi.n	8009368 <_realloc_r+0xc8>
 8009318:	f021 0103 	bic.w	r1, r1, #3
 800931c:	459c      	cmp	ip, r3
 800931e:	eb06 0701 	add.w	r7, r6, r1
 8009322:	d119      	bne.n	8009358 <_realloc_r+0xb8>
 8009324:	f108 0010 	add.w	r0, r8, #16
 8009328:	42b8      	cmp	r0, r7
 800932a:	dc1f      	bgt.n	800936c <_realloc_r+0xcc>
 800932c:	eb0a 0308 	add.w	r3, sl, r8
 8009330:	9a01      	ldr	r2, [sp, #4]
 8009332:	eba7 0708 	sub.w	r7, r7, r8
 8009336:	f047 0701 	orr.w	r7, r7, #1
 800933a:	6093      	str	r3, [r2, #8]
 800933c:	605f      	str	r7, [r3, #4]
 800933e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	ea43 0308 	orr.w	r3, r3, r8
 800934a:	f844 3c04 	str.w	r3, [r4, #-4]
 800934e:	4648      	mov	r0, r9
 8009350:	f7ff fabc 	bl	80088cc <__malloc_unlock>
 8009354:	46a3      	mov	fp, r4
 8009356:	e7bf      	b.n	80092d8 <_realloc_r+0x38>
 8009358:	45b8      	cmp	r8, r7
 800935a:	dc07      	bgt.n	800936c <_realloc_r+0xcc>
 800935c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	6093      	str	r3, [r2, #8]
 8009364:	4655      	mov	r5, sl
 8009366:	e07f      	b.n	8009468 <_realloc_r+0x1c8>
 8009368:	2100      	movs	r1, #0
 800936a:	460b      	mov	r3, r1
 800936c:	07e8      	lsls	r0, r5, #31
 800936e:	f100 80e5 	bmi.w	800953c <_realloc_r+0x29c>
 8009372:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009376:	ebaa 0505 	sub.w	r5, sl, r5
 800937a:	6868      	ldr	r0, [r5, #4]
 800937c:	f020 0003 	bic.w	r0, r0, #3
 8009380:	eb00 0b06 	add.w	fp, r0, r6
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 80a5 	beq.w	80094d4 <_realloc_r+0x234>
 800938a:	459c      	cmp	ip, r3
 800938c:	eb01 070b 	add.w	r7, r1, fp
 8009390:	d14a      	bne.n	8009428 <_realloc_r+0x188>
 8009392:	f108 0310 	add.w	r3, r8, #16
 8009396:	42bb      	cmp	r3, r7
 8009398:	f300 809c 	bgt.w	80094d4 <_realloc_r+0x234>
 800939c:	46ab      	mov	fp, r5
 800939e:	68eb      	ldr	r3, [r5, #12]
 80093a0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80093a4:	60d3      	str	r3, [r2, #12]
 80093a6:	609a      	str	r2, [r3, #8]
 80093a8:	1f32      	subs	r2, r6, #4
 80093aa:	2a24      	cmp	r2, #36	; 0x24
 80093ac:	d837      	bhi.n	800941e <_realloc_r+0x17e>
 80093ae:	2a13      	cmp	r2, #19
 80093b0:	d933      	bls.n	800941a <_realloc_r+0x17a>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	60ab      	str	r3, [r5, #8]
 80093b6:	6863      	ldr	r3, [r4, #4]
 80093b8:	60eb      	str	r3, [r5, #12]
 80093ba:	2a1b      	cmp	r2, #27
 80093bc:	d81b      	bhi.n	80093f6 <_realloc_r+0x156>
 80093be:	3408      	adds	r4, #8
 80093c0:	f105 0310 	add.w	r3, r5, #16
 80093c4:	6822      	ldr	r2, [r4, #0]
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	6862      	ldr	r2, [r4, #4]
 80093ca:	605a      	str	r2, [r3, #4]
 80093cc:	68a2      	ldr	r2, [r4, #8]
 80093ce:	609a      	str	r2, [r3, #8]
 80093d0:	eb05 0308 	add.w	r3, r5, r8
 80093d4:	9a01      	ldr	r2, [sp, #4]
 80093d6:	eba7 0708 	sub.w	r7, r7, r8
 80093da:	f047 0701 	orr.w	r7, r7, #1
 80093de:	6093      	str	r3, [r2, #8]
 80093e0:	605f      	str	r7, [r3, #4]
 80093e2:	686b      	ldr	r3, [r5, #4]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	ea43 0308 	orr.w	r3, r3, r8
 80093ec:	606b      	str	r3, [r5, #4]
 80093ee:	4648      	mov	r0, r9
 80093f0:	f7ff fa6c 	bl	80088cc <__malloc_unlock>
 80093f4:	e770      	b.n	80092d8 <_realloc_r+0x38>
 80093f6:	68a3      	ldr	r3, [r4, #8]
 80093f8:	612b      	str	r3, [r5, #16]
 80093fa:	68e3      	ldr	r3, [r4, #12]
 80093fc:	616b      	str	r3, [r5, #20]
 80093fe:	2a24      	cmp	r2, #36	; 0x24
 8009400:	bf01      	itttt	eq
 8009402:	6923      	ldreq	r3, [r4, #16]
 8009404:	61ab      	streq	r3, [r5, #24]
 8009406:	6962      	ldreq	r2, [r4, #20]
 8009408:	61ea      	streq	r2, [r5, #28]
 800940a:	bf19      	ittee	ne
 800940c:	3410      	addne	r4, #16
 800940e:	f105 0318 	addne.w	r3, r5, #24
 8009412:	f105 0320 	addeq.w	r3, r5, #32
 8009416:	3418      	addeq	r4, #24
 8009418:	e7d4      	b.n	80093c4 <_realloc_r+0x124>
 800941a:	465b      	mov	r3, fp
 800941c:	e7d2      	b.n	80093c4 <_realloc_r+0x124>
 800941e:	4621      	mov	r1, r4
 8009420:	4658      	mov	r0, fp
 8009422:	f7ff ff23 	bl	800926c <memmove>
 8009426:	e7d3      	b.n	80093d0 <_realloc_r+0x130>
 8009428:	45b8      	cmp	r8, r7
 800942a:	dc53      	bgt.n	80094d4 <_realloc_r+0x234>
 800942c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009430:	4628      	mov	r0, r5
 8009432:	60da      	str	r2, [r3, #12]
 8009434:	6093      	str	r3, [r2, #8]
 8009436:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800943a:	68eb      	ldr	r3, [r5, #12]
 800943c:	60d3      	str	r3, [r2, #12]
 800943e:	609a      	str	r2, [r3, #8]
 8009440:	1f32      	subs	r2, r6, #4
 8009442:	2a24      	cmp	r2, #36	; 0x24
 8009444:	d842      	bhi.n	80094cc <_realloc_r+0x22c>
 8009446:	2a13      	cmp	r2, #19
 8009448:	d908      	bls.n	800945c <_realloc_r+0x1bc>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	60ab      	str	r3, [r5, #8]
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	60eb      	str	r3, [r5, #12]
 8009452:	2a1b      	cmp	r2, #27
 8009454:	d828      	bhi.n	80094a8 <_realloc_r+0x208>
 8009456:	3408      	adds	r4, #8
 8009458:	f105 0010 	add.w	r0, r5, #16
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	6003      	str	r3, [r0, #0]
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	6043      	str	r3, [r0, #4]
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	6083      	str	r3, [r0, #8]
 8009468:	686a      	ldr	r2, [r5, #4]
 800946a:	eba7 0008 	sub.w	r0, r7, r8
 800946e:	280f      	cmp	r0, #15
 8009470:	f002 0201 	and.w	r2, r2, #1
 8009474:	eb05 0307 	add.w	r3, r5, r7
 8009478:	f240 80b1 	bls.w	80095de <_realloc_r+0x33e>
 800947c:	eb05 0108 	add.w	r1, r5, r8
 8009480:	ea48 0202 	orr.w	r2, r8, r2
 8009484:	f040 0001 	orr.w	r0, r0, #1
 8009488:	606a      	str	r2, [r5, #4]
 800948a:	6048      	str	r0, [r1, #4]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	f042 0201 	orr.w	r2, r2, #1
 8009492:	605a      	str	r2, [r3, #4]
 8009494:	3108      	adds	r1, #8
 8009496:	4648      	mov	r0, r9
 8009498:	f7fe fefa 	bl	8008290 <_free_r>
 800949c:	4648      	mov	r0, r9
 800949e:	f7ff fa15 	bl	80088cc <__malloc_unlock>
 80094a2:	f105 0b08 	add.w	fp, r5, #8
 80094a6:	e717      	b.n	80092d8 <_realloc_r+0x38>
 80094a8:	68a3      	ldr	r3, [r4, #8]
 80094aa:	612b      	str	r3, [r5, #16]
 80094ac:	68e3      	ldr	r3, [r4, #12]
 80094ae:	616b      	str	r3, [r5, #20]
 80094b0:	2a24      	cmp	r2, #36	; 0x24
 80094b2:	bf01      	itttt	eq
 80094b4:	6923      	ldreq	r3, [r4, #16]
 80094b6:	61ab      	streq	r3, [r5, #24]
 80094b8:	6963      	ldreq	r3, [r4, #20]
 80094ba:	61eb      	streq	r3, [r5, #28]
 80094bc:	bf19      	ittee	ne
 80094be:	3410      	addne	r4, #16
 80094c0:	f105 0018 	addne.w	r0, r5, #24
 80094c4:	f105 0020 	addeq.w	r0, r5, #32
 80094c8:	3418      	addeq	r4, #24
 80094ca:	e7c7      	b.n	800945c <_realloc_r+0x1bc>
 80094cc:	4621      	mov	r1, r4
 80094ce:	f7ff fecd 	bl	800926c <memmove>
 80094d2:	e7c9      	b.n	8009468 <_realloc_r+0x1c8>
 80094d4:	45d8      	cmp	r8, fp
 80094d6:	dc31      	bgt.n	800953c <_realloc_r+0x29c>
 80094d8:	4628      	mov	r0, r5
 80094da:	68eb      	ldr	r3, [r5, #12]
 80094dc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80094e0:	60d3      	str	r3, [r2, #12]
 80094e2:	609a      	str	r2, [r3, #8]
 80094e4:	1f32      	subs	r2, r6, #4
 80094e6:	2a24      	cmp	r2, #36	; 0x24
 80094e8:	d824      	bhi.n	8009534 <_realloc_r+0x294>
 80094ea:	2a13      	cmp	r2, #19
 80094ec:	d908      	bls.n	8009500 <_realloc_r+0x260>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	60ab      	str	r3, [r5, #8]
 80094f2:	6863      	ldr	r3, [r4, #4]
 80094f4:	60eb      	str	r3, [r5, #12]
 80094f6:	2a1b      	cmp	r2, #27
 80094f8:	d80a      	bhi.n	8009510 <_realloc_r+0x270>
 80094fa:	3408      	adds	r4, #8
 80094fc:	f105 0010 	add.w	r0, r5, #16
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	6003      	str	r3, [r0, #0]
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	6043      	str	r3, [r0, #4]
 8009508:	68a3      	ldr	r3, [r4, #8]
 800950a:	6083      	str	r3, [r0, #8]
 800950c:	465f      	mov	r7, fp
 800950e:	e7ab      	b.n	8009468 <_realloc_r+0x1c8>
 8009510:	68a3      	ldr	r3, [r4, #8]
 8009512:	612b      	str	r3, [r5, #16]
 8009514:	68e3      	ldr	r3, [r4, #12]
 8009516:	616b      	str	r3, [r5, #20]
 8009518:	2a24      	cmp	r2, #36	; 0x24
 800951a:	bf01      	itttt	eq
 800951c:	6923      	ldreq	r3, [r4, #16]
 800951e:	61ab      	streq	r3, [r5, #24]
 8009520:	6963      	ldreq	r3, [r4, #20]
 8009522:	61eb      	streq	r3, [r5, #28]
 8009524:	bf19      	ittee	ne
 8009526:	3410      	addne	r4, #16
 8009528:	f105 0018 	addne.w	r0, r5, #24
 800952c:	f105 0020 	addeq.w	r0, r5, #32
 8009530:	3418      	addeq	r4, #24
 8009532:	e7e5      	b.n	8009500 <_realloc_r+0x260>
 8009534:	4621      	mov	r1, r4
 8009536:	f7ff fe99 	bl	800926c <memmove>
 800953a:	e7e7      	b.n	800950c <_realloc_r+0x26c>
 800953c:	4611      	mov	r1, r2
 800953e:	4648      	mov	r0, r9
 8009540:	f7fe ff6e 	bl	8008420 <_malloc_r>
 8009544:	4683      	mov	fp, r0
 8009546:	2800      	cmp	r0, #0
 8009548:	f43f af51 	beq.w	80093ee <_realloc_r+0x14e>
 800954c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009550:	f023 0301 	bic.w	r3, r3, #1
 8009554:	4453      	add	r3, sl
 8009556:	f1a0 0208 	sub.w	r2, r0, #8
 800955a:	4293      	cmp	r3, r2
 800955c:	d105      	bne.n	800956a <_realloc_r+0x2ca>
 800955e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009562:	f027 0703 	bic.w	r7, r7, #3
 8009566:	4437      	add	r7, r6
 8009568:	e6fc      	b.n	8009364 <_realloc_r+0xc4>
 800956a:	1f32      	subs	r2, r6, #4
 800956c:	2a24      	cmp	r2, #36	; 0x24
 800956e:	d830      	bhi.n	80095d2 <_realloc_r+0x332>
 8009570:	2a13      	cmp	r2, #19
 8009572:	d92b      	bls.n	80095cc <_realloc_r+0x32c>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	6003      	str	r3, [r0, #0]
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	6043      	str	r3, [r0, #4]
 800957c:	2a1b      	cmp	r2, #27
 800957e:	d811      	bhi.n	80095a4 <_realloc_r+0x304>
 8009580:	f104 0208 	add.w	r2, r4, #8
 8009584:	f100 0308 	add.w	r3, r0, #8
 8009588:	6811      	ldr	r1, [r2, #0]
 800958a:	6019      	str	r1, [r3, #0]
 800958c:	6851      	ldr	r1, [r2, #4]
 800958e:	6059      	str	r1, [r3, #4]
 8009590:	6892      	ldr	r2, [r2, #8]
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	4621      	mov	r1, r4
 8009596:	4648      	mov	r0, r9
 8009598:	f7fe fe7a 	bl	8008290 <_free_r>
 800959c:	e727      	b.n	80093ee <_realloc_r+0x14e>
 800959e:	bf00      	nop
 80095a0:	20000444 	.word	0x20000444
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	6083      	str	r3, [r0, #8]
 80095a8:	68e3      	ldr	r3, [r4, #12]
 80095aa:	60c3      	str	r3, [r0, #12]
 80095ac:	2a24      	cmp	r2, #36	; 0x24
 80095ae:	bf01      	itttt	eq
 80095b0:	6923      	ldreq	r3, [r4, #16]
 80095b2:	6103      	streq	r3, [r0, #16]
 80095b4:	6961      	ldreq	r1, [r4, #20]
 80095b6:	6141      	streq	r1, [r0, #20]
 80095b8:	bf19      	ittee	ne
 80095ba:	f104 0210 	addne.w	r2, r4, #16
 80095be:	f100 0310 	addne.w	r3, r0, #16
 80095c2:	f104 0218 	addeq.w	r2, r4, #24
 80095c6:	f100 0318 	addeq.w	r3, r0, #24
 80095ca:	e7dd      	b.n	8009588 <_realloc_r+0x2e8>
 80095cc:	4603      	mov	r3, r0
 80095ce:	4622      	mov	r2, r4
 80095d0:	e7da      	b.n	8009588 <_realloc_r+0x2e8>
 80095d2:	4621      	mov	r1, r4
 80095d4:	f7ff fe4a 	bl	800926c <memmove>
 80095d8:	e7dc      	b.n	8009594 <_realloc_r+0x2f4>
 80095da:	4637      	mov	r7, r6
 80095dc:	e6c2      	b.n	8009364 <_realloc_r+0xc4>
 80095de:	4317      	orrs	r7, r2
 80095e0:	606f      	str	r7, [r5, #4]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	f042 0201 	orr.w	r2, r2, #1
 80095e8:	605a      	str	r2, [r3, #4]
 80095ea:	e757      	b.n	800949c <_realloc_r+0x1fc>

080095ec <__sprint_r>:
 80095ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	6893      	ldr	r3, [r2, #8]
 80095f2:	4680      	mov	r8, r0
 80095f4:	460f      	mov	r7, r1
 80095f6:	4614      	mov	r4, r2
 80095f8:	b91b      	cbnz	r3, 8009602 <__sprint_r+0x16>
 80095fa:	6053      	str	r3, [r2, #4]
 80095fc:	4618      	mov	r0, r3
 80095fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009604:	049d      	lsls	r5, r3, #18
 8009606:	d520      	bpl.n	800964a <__sprint_r+0x5e>
 8009608:	6815      	ldr	r5, [r2, #0]
 800960a:	3508      	adds	r5, #8
 800960c:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8009610:	f04f 0900 	mov.w	r9, #0
 8009614:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8009618:	45ca      	cmp	sl, r9
 800961a:	dc0b      	bgt.n	8009634 <__sprint_r+0x48>
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	f026 0003 	bic.w	r0, r6, #3
 8009622:	1a18      	subs	r0, r3, r0
 8009624:	60a0      	str	r0, [r4, #8]
 8009626:	3508      	adds	r5, #8
 8009628:	2800      	cmp	r0, #0
 800962a:	d1ef      	bne.n	800960c <__sprint_r+0x20>
 800962c:	2300      	movs	r3, #0
 800962e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8009632:	e7e4      	b.n	80095fe <__sprint_r+0x12>
 8009634:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8009638:	463a      	mov	r2, r7
 800963a:	4640      	mov	r0, r8
 800963c:	f000 fea1 	bl	800a382 <_fputwc_r>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d0f3      	beq.n	800962c <__sprint_r+0x40>
 8009644:	f109 0901 	add.w	r9, r9, #1
 8009648:	e7e6      	b.n	8009618 <__sprint_r+0x2c>
 800964a:	f000 fec5 	bl	800a3d8 <__sfvwrite_r>
 800964e:	e7ed      	b.n	800962c <__sprint_r+0x40>

08009650 <_vfiprintf_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	ed2d 8b02 	vpush	{d8}
 8009658:	b0b9      	sub	sp, #228	; 0xe4
 800965a:	460f      	mov	r7, r1
 800965c:	9201      	str	r2, [sp, #4]
 800965e:	461d      	mov	r5, r3
 8009660:	461c      	mov	r4, r3
 8009662:	4681      	mov	r9, r0
 8009664:	b118      	cbz	r0, 800966e <_vfiprintf_r+0x1e>
 8009666:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009668:	b90b      	cbnz	r3, 800966e <_vfiprintf_r+0x1e>
 800966a:	f000 fe21 	bl	800a2b0 <__sinit>
 800966e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009670:	07d8      	lsls	r0, r3, #31
 8009672:	d405      	bmi.n	8009680 <_vfiprintf_r+0x30>
 8009674:	89bb      	ldrh	r3, [r7, #12]
 8009676:	0599      	lsls	r1, r3, #22
 8009678:	d402      	bmi.n	8009680 <_vfiprintf_r+0x30>
 800967a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800967c:	f7fe fece 	bl	800841c <__retarget_lock_acquire_recursive>
 8009680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009684:	049a      	lsls	r2, r3, #18
 8009686:	d406      	bmi.n	8009696 <_vfiprintf_r+0x46>
 8009688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800968c:	81bb      	strh	r3, [r7, #12]
 800968e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009694:	667b      	str	r3, [r7, #100]	; 0x64
 8009696:	89bb      	ldrh	r3, [r7, #12]
 8009698:	071e      	lsls	r6, r3, #28
 800969a:	d501      	bpl.n	80096a0 <_vfiprintf_r+0x50>
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	b9bb      	cbnz	r3, 80096d0 <_vfiprintf_r+0x80>
 80096a0:	4639      	mov	r1, r7
 80096a2:	4648      	mov	r0, r9
 80096a4:	f000 fcaa 	bl	8009ffc <__swsetup_r>
 80096a8:	b190      	cbz	r0, 80096d0 <_vfiprintf_r+0x80>
 80096aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ac:	07d8      	lsls	r0, r3, #31
 80096ae:	d508      	bpl.n	80096c2 <_vfiprintf_r+0x72>
 80096b0:	f04f 33ff 	mov.w	r3, #4294967295
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	9802      	ldr	r0, [sp, #8]
 80096b8:	b039      	add	sp, #228	; 0xe4
 80096ba:	ecbd 8b02 	vpop	{d8}
 80096be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c2:	89bb      	ldrh	r3, [r7, #12]
 80096c4:	0599      	lsls	r1, r3, #22
 80096c6:	d4f3      	bmi.n	80096b0 <_vfiprintf_r+0x60>
 80096c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80096ca:	f7fe fea8 	bl	800841e <__retarget_lock_release_recursive>
 80096ce:	e7ef      	b.n	80096b0 <_vfiprintf_r+0x60>
 80096d0:	89bb      	ldrh	r3, [r7, #12]
 80096d2:	f003 021a 	and.w	r2, r3, #26
 80096d6:	2a0a      	cmp	r2, #10
 80096d8:	d113      	bne.n	8009702 <_vfiprintf_r+0xb2>
 80096da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80096de:	2a00      	cmp	r2, #0
 80096e0:	db0f      	blt.n	8009702 <_vfiprintf_r+0xb2>
 80096e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80096e4:	07d2      	lsls	r2, r2, #31
 80096e6:	d404      	bmi.n	80096f2 <_vfiprintf_r+0xa2>
 80096e8:	059e      	lsls	r6, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_vfiprintf_r+0xa2>
 80096ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80096ee:	f7fe fe96 	bl	800841e <__retarget_lock_release_recursive>
 80096f2:	9a01      	ldr	r2, [sp, #4]
 80096f4:	462b      	mov	r3, r5
 80096f6:	4639      	mov	r1, r7
 80096f8:	4648      	mov	r0, r9
 80096fa:	f000 fc31 	bl	8009f60 <__sbprintf>
 80096fe:	9002      	str	r0, [sp, #8]
 8009700:	e7d9      	b.n	80096b6 <_vfiprintf_r+0x66>
 8009702:	2300      	movs	r3, #0
 8009704:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8009708:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800970c:	ae0f      	add	r6, sp, #60	; 0x3c
 800970e:	ee08 3a10 	vmov	s16, r3
 8009712:	960c      	str	r6, [sp, #48]	; 0x30
 8009714:	9307      	str	r3, [sp, #28]
 8009716:	9302      	str	r3, [sp, #8]
 8009718:	9b01      	ldr	r3, [sp, #4]
 800971a:	461d      	mov	r5, r3
 800971c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009720:	b10a      	cbz	r2, 8009726 <_vfiprintf_r+0xd6>
 8009722:	2a25      	cmp	r2, #37	; 0x25
 8009724:	d1f9      	bne.n	800971a <_vfiprintf_r+0xca>
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	ebb5 0803 	subs.w	r8, r5, r3
 800972c:	d00d      	beq.n	800974a <_vfiprintf_r+0xfa>
 800972e:	e9c6 3800 	strd	r3, r8, [r6]
 8009732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009734:	4443      	add	r3, r8
 8009736:	930e      	str	r3, [sp, #56]	; 0x38
 8009738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800973a:	3301      	adds	r3, #1
 800973c:	2b07      	cmp	r3, #7
 800973e:	930d      	str	r3, [sp, #52]	; 0x34
 8009740:	dc75      	bgt.n	800982e <_vfiprintf_r+0x1de>
 8009742:	3608      	adds	r6, #8
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	4443      	add	r3, r8
 8009748:	9302      	str	r3, [sp, #8]
 800974a:	782b      	ldrb	r3, [r5, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 83c8 	beq.w	8009ee2 <_vfiprintf_r+0x892>
 8009752:	2300      	movs	r3, #0
 8009754:	f04f 31ff 	mov.w	r1, #4294967295
 8009758:	1c6a      	adds	r2, r5, #1
 800975a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800975e:	9100      	str	r1, [sp, #0]
 8009760:	9303      	str	r3, [sp, #12]
 8009762:	469a      	mov	sl, r3
 8009764:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009768:	9201      	str	r2, [sp, #4]
 800976a:	f1a3 0220 	sub.w	r2, r3, #32
 800976e:	2a5a      	cmp	r2, #90	; 0x5a
 8009770:	f200 8310 	bhi.w	8009d94 <_vfiprintf_r+0x744>
 8009774:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009778:	030e0099 	.word	0x030e0099
 800977c:	00a1030e 	.word	0x00a1030e
 8009780:	030e030e 	.word	0x030e030e
 8009784:	0080030e 	.word	0x0080030e
 8009788:	030e030e 	.word	0x030e030e
 800978c:	00ae00a4 	.word	0x00ae00a4
 8009790:	00ab030e 	.word	0x00ab030e
 8009794:	030e00b0 	.word	0x030e00b0
 8009798:	00ce00cb 	.word	0x00ce00cb
 800979c:	00ce00ce 	.word	0x00ce00ce
 80097a0:	00ce00ce 	.word	0x00ce00ce
 80097a4:	00ce00ce 	.word	0x00ce00ce
 80097a8:	00ce00ce 	.word	0x00ce00ce
 80097ac:	030e030e 	.word	0x030e030e
 80097b0:	030e030e 	.word	0x030e030e
 80097b4:	030e030e 	.word	0x030e030e
 80097b8:	030e030e 	.word	0x030e030e
 80097bc:	00f8030e 	.word	0x00f8030e
 80097c0:	030e0106 	.word	0x030e0106
 80097c4:	030e030e 	.word	0x030e030e
 80097c8:	030e030e 	.word	0x030e030e
 80097cc:	030e030e 	.word	0x030e030e
 80097d0:	030e030e 	.word	0x030e030e
 80097d4:	014d030e 	.word	0x014d030e
 80097d8:	030e030e 	.word	0x030e030e
 80097dc:	0192030e 	.word	0x0192030e
 80097e0:	0270030e 	.word	0x0270030e
 80097e4:	030e030e 	.word	0x030e030e
 80097e8:	030e028e 	.word	0x030e028e
 80097ec:	030e030e 	.word	0x030e030e
 80097f0:	030e030e 	.word	0x030e030e
 80097f4:	030e030e 	.word	0x030e030e
 80097f8:	030e030e 	.word	0x030e030e
 80097fc:	00f8030e 	.word	0x00f8030e
 8009800:	030e0108 	.word	0x030e0108
 8009804:	030e030e 	.word	0x030e030e
 8009808:	010800de 	.word	0x010800de
 800980c:	030e00f2 	.word	0x030e00f2
 8009810:	030e00eb 	.word	0x030e00eb
 8009814:	014f0130 	.word	0x014f0130
 8009818:	00f20182 	.word	0x00f20182
 800981c:	0192030e 	.word	0x0192030e
 8009820:	02720097 	.word	0x02720097
 8009824:	030e030e 	.word	0x030e030e
 8009828:	030e0065 	.word	0x030e0065
 800982c:	0097      	.short	0x0097
 800982e:	aa0c      	add	r2, sp, #48	; 0x30
 8009830:	4639      	mov	r1, r7
 8009832:	4648      	mov	r0, r9
 8009834:	f7ff feda 	bl	80095ec <__sprint_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	f040 8331 	bne.w	8009ea0 <_vfiprintf_r+0x850>
 800983e:	ae0f      	add	r6, sp, #60	; 0x3c
 8009840:	e780      	b.n	8009744 <_vfiprintf_r+0xf4>
 8009842:	4a95      	ldr	r2, [pc, #596]	; (8009a98 <_vfiprintf_r+0x448>)
 8009844:	9205      	str	r2, [sp, #20]
 8009846:	f01a 0f20 	tst.w	sl, #32
 800984a:	f000 8225 	beq.w	8009c98 <_vfiprintf_r+0x648>
 800984e:	3407      	adds	r4, #7
 8009850:	f024 0b07 	bic.w	fp, r4, #7
 8009854:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009858:	f01a 0f01 	tst.w	sl, #1
 800985c:	d009      	beq.n	8009872 <_vfiprintf_r+0x222>
 800985e:	ea54 0205 	orrs.w	r2, r4, r5
 8009862:	bf1f      	itttt	ne
 8009864:	2230      	movne	r2, #48	; 0x30
 8009866:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800986a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800986e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009872:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009876:	e10d      	b.n	8009a94 <_vfiprintf_r+0x444>
 8009878:	4648      	mov	r0, r9
 800987a:	f7fe fdc9 	bl	8008410 <_localeconv_r>
 800987e:	6843      	ldr	r3, [r0, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	ee08 3a10 	vmov	s16, r3
 8009886:	f7f6 fcfb 	bl	8000280 <strlen>
 800988a:	9007      	str	r0, [sp, #28]
 800988c:	4648      	mov	r0, r9
 800988e:	f7fe fdbf 	bl	8008410 <_localeconv_r>
 8009892:	6883      	ldr	r3, [r0, #8]
 8009894:	9306      	str	r3, [sp, #24]
 8009896:	9b07      	ldr	r3, [sp, #28]
 8009898:	b12b      	cbz	r3, 80098a6 <_vfiprintf_r+0x256>
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	b11b      	cbz	r3, 80098a6 <_vfiprintf_r+0x256>
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	b10b      	cbz	r3, 80098a6 <_vfiprintf_r+0x256>
 80098a2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80098a6:	9a01      	ldr	r2, [sp, #4]
 80098a8:	e75c      	b.n	8009764 <_vfiprintf_r+0x114>
 80098aa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f9      	bne.n	80098a6 <_vfiprintf_r+0x256>
 80098b2:	2320      	movs	r3, #32
 80098b4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80098b8:	e7f5      	b.n	80098a6 <_vfiprintf_r+0x256>
 80098ba:	f04a 0a01 	orr.w	sl, sl, #1
 80098be:	e7f2      	b.n	80098a6 <_vfiprintf_r+0x256>
 80098c0:	f854 3b04 	ldr.w	r3, [r4], #4
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	daed      	bge.n	80098a6 <_vfiprintf_r+0x256>
 80098ca:	425b      	negs	r3, r3
 80098cc:	9303      	str	r3, [sp, #12]
 80098ce:	f04a 0a04 	orr.w	sl, sl, #4
 80098d2:	e7e8      	b.n	80098a6 <_vfiprintf_r+0x256>
 80098d4:	232b      	movs	r3, #43	; 0x2b
 80098d6:	e7ed      	b.n	80098b4 <_vfiprintf_r+0x264>
 80098d8:	9a01      	ldr	r2, [sp, #4]
 80098da:	f812 3b01 	ldrb.w	r3, [r2], #1
 80098de:	2b2a      	cmp	r3, #42	; 0x2a
 80098e0:	d112      	bne.n	8009908 <_vfiprintf_r+0x2b8>
 80098e2:	f854 0b04 	ldr.w	r0, [r4], #4
 80098e6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80098ea:	e9cd 3200 	strd	r3, r2, [sp]
 80098ee:	e7da      	b.n	80098a6 <_vfiprintf_r+0x256>
 80098f0:	9b00      	ldr	r3, [sp, #0]
 80098f2:	200a      	movs	r0, #10
 80098f4:	fb00 1303 	mla	r3, r0, r3, r1
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80098fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009902:	2909      	cmp	r1, #9
 8009904:	d9f4      	bls.n	80098f0 <_vfiprintf_r+0x2a0>
 8009906:	e72f      	b.n	8009768 <_vfiprintf_r+0x118>
 8009908:	2100      	movs	r1, #0
 800990a:	9100      	str	r1, [sp, #0]
 800990c:	e7f7      	b.n	80098fe <_vfiprintf_r+0x2ae>
 800990e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8009912:	e7c8      	b.n	80098a6 <_vfiprintf_r+0x256>
 8009914:	2100      	movs	r1, #0
 8009916:	9a01      	ldr	r2, [sp, #4]
 8009918:	9103      	str	r1, [sp, #12]
 800991a:	9903      	ldr	r1, [sp, #12]
 800991c:	3b30      	subs	r3, #48	; 0x30
 800991e:	200a      	movs	r0, #10
 8009920:	fb00 3301 	mla	r3, r0, r1, r3
 8009924:	9303      	str	r3, [sp, #12]
 8009926:	f812 3b01 	ldrb.w	r3, [r2], #1
 800992a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800992e:	2909      	cmp	r1, #9
 8009930:	d9f3      	bls.n	800991a <_vfiprintf_r+0x2ca>
 8009932:	e719      	b.n	8009768 <_vfiprintf_r+0x118>
 8009934:	9b01      	ldr	r3, [sp, #4]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b68      	cmp	r3, #104	; 0x68
 800993a:	bf01      	itttt	eq
 800993c:	9b01      	ldreq	r3, [sp, #4]
 800993e:	3301      	addeq	r3, #1
 8009940:	9301      	streq	r3, [sp, #4]
 8009942:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009946:	bf18      	it	ne
 8009948:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800994c:	e7ab      	b.n	80098a6 <_vfiprintf_r+0x256>
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b6c      	cmp	r3, #108	; 0x6c
 8009954:	d105      	bne.n	8009962 <_vfiprintf_r+0x312>
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	3301      	adds	r3, #1
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	f04a 0a20 	orr.w	sl, sl, #32
 8009960:	e7a1      	b.n	80098a6 <_vfiprintf_r+0x256>
 8009962:	f04a 0a10 	orr.w	sl, sl, #16
 8009966:	e79e      	b.n	80098a6 <_vfiprintf_r+0x256>
 8009968:	46a3      	mov	fp, r4
 800996a:	2100      	movs	r1, #0
 800996c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009970:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009974:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009978:	2301      	movs	r3, #1
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	460d      	mov	r5, r1
 800997e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009982:	e0a0      	b.n	8009ac6 <_vfiprintf_r+0x476>
 8009984:	f04a 0a10 	orr.w	sl, sl, #16
 8009988:	f01a 0f20 	tst.w	sl, #32
 800998c:	d011      	beq.n	80099b2 <_vfiprintf_r+0x362>
 800998e:	3407      	adds	r4, #7
 8009990:	f024 0b07 	bic.w	fp, r4, #7
 8009994:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009998:	2c00      	cmp	r4, #0
 800999a:	f175 0300 	sbcs.w	r3, r5, #0
 800999e:	da06      	bge.n	80099ae <_vfiprintf_r+0x35e>
 80099a0:	4264      	negs	r4, r4
 80099a2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80099a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80099aa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80099ae:	2301      	movs	r3, #1
 80099b0:	e03f      	b.n	8009a32 <_vfiprintf_r+0x3e2>
 80099b2:	f01a 0f10 	tst.w	sl, #16
 80099b6:	f104 0b04 	add.w	fp, r4, #4
 80099ba:	d002      	beq.n	80099c2 <_vfiprintf_r+0x372>
 80099bc:	6824      	ldr	r4, [r4, #0]
 80099be:	17e5      	asrs	r5, r4, #31
 80099c0:	e7ea      	b.n	8009998 <_vfiprintf_r+0x348>
 80099c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80099c6:	6824      	ldr	r4, [r4, #0]
 80099c8:	d001      	beq.n	80099ce <_vfiprintf_r+0x37e>
 80099ca:	b224      	sxth	r4, r4
 80099cc:	e7f7      	b.n	80099be <_vfiprintf_r+0x36e>
 80099ce:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80099d2:	bf18      	it	ne
 80099d4:	b264      	sxtbne	r4, r4
 80099d6:	e7f2      	b.n	80099be <_vfiprintf_r+0x36e>
 80099d8:	f01a 0f20 	tst.w	sl, #32
 80099dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80099e0:	d005      	beq.n	80099ee <_vfiprintf_r+0x39e>
 80099e2:	9a02      	ldr	r2, [sp, #8]
 80099e4:	4610      	mov	r0, r2
 80099e6:	17d1      	asrs	r1, r2, #31
 80099e8:	e9c3 0100 	strd	r0, r1, [r3]
 80099ec:	e694      	b.n	8009718 <_vfiprintf_r+0xc8>
 80099ee:	f01a 0f10 	tst.w	sl, #16
 80099f2:	d002      	beq.n	80099fa <_vfiprintf_r+0x3aa>
 80099f4:	9a02      	ldr	r2, [sp, #8]
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e68e      	b.n	8009718 <_vfiprintf_r+0xc8>
 80099fa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80099fe:	d002      	beq.n	8009a06 <_vfiprintf_r+0x3b6>
 8009a00:	9a02      	ldr	r2, [sp, #8]
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e688      	b.n	8009718 <_vfiprintf_r+0xc8>
 8009a06:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009a0a:	d0f3      	beq.n	80099f4 <_vfiprintf_r+0x3a4>
 8009a0c:	9a02      	ldr	r2, [sp, #8]
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	e682      	b.n	8009718 <_vfiprintf_r+0xc8>
 8009a12:	f04a 0a10 	orr.w	sl, sl, #16
 8009a16:	f01a 0f20 	tst.w	sl, #32
 8009a1a:	d01d      	beq.n	8009a58 <_vfiprintf_r+0x408>
 8009a1c:	3407      	adds	r4, #7
 8009a1e:	f024 0b07 	bic.w	fp, r4, #7
 8009a22:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009a26:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8009a32:	9a00      	ldr	r2, [sp, #0]
 8009a34:	3201      	adds	r2, #1
 8009a36:	f000 8261 	beq.w	8009efc <_vfiprintf_r+0x8ac>
 8009a3a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8009a3e:	9204      	str	r2, [sp, #16]
 8009a40:	ea54 0205 	orrs.w	r2, r4, r5
 8009a44:	f040 8260 	bne.w	8009f08 <_vfiprintf_r+0x8b8>
 8009a48:	9a00      	ldr	r2, [sp, #0]
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	f000 8197 	beq.w	8009d7e <_vfiprintf_r+0x72e>
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	f040 825c 	bne.w	8009f0e <_vfiprintf_r+0x8be>
 8009a56:	e135      	b.n	8009cc4 <_vfiprintf_r+0x674>
 8009a58:	f01a 0f10 	tst.w	sl, #16
 8009a5c:	f104 0b04 	add.w	fp, r4, #4
 8009a60:	d001      	beq.n	8009a66 <_vfiprintf_r+0x416>
 8009a62:	6824      	ldr	r4, [r4, #0]
 8009a64:	e003      	b.n	8009a6e <_vfiprintf_r+0x41e>
 8009a66:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009a6a:	d002      	beq.n	8009a72 <_vfiprintf_r+0x422>
 8009a6c:	8824      	ldrh	r4, [r4, #0]
 8009a6e:	2500      	movs	r5, #0
 8009a70:	e7d9      	b.n	8009a26 <_vfiprintf_r+0x3d6>
 8009a72:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009a76:	d0f4      	beq.n	8009a62 <_vfiprintf_r+0x412>
 8009a78:	7824      	ldrb	r4, [r4, #0]
 8009a7a:	e7f8      	b.n	8009a6e <_vfiprintf_r+0x41e>
 8009a7c:	46a3      	mov	fp, r4
 8009a7e:	f647 0330 	movw	r3, #30768	; 0x7830
 8009a82:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8009a86:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009a8a:	4b03      	ldr	r3, [pc, #12]	; (8009a98 <_vfiprintf_r+0x448>)
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	2500      	movs	r5, #0
 8009a90:	f04a 0a02 	orr.w	sl, sl, #2
 8009a94:	2302      	movs	r3, #2
 8009a96:	e7c9      	b.n	8009a2c <_vfiprintf_r+0x3dc>
 8009a98:	0800b2f8 	.word	0x0800b2f8
 8009a9c:	9b00      	ldr	r3, [sp, #0]
 8009a9e:	46a3      	mov	fp, r4
 8009aa0:	2500      	movs	r5, #0
 8009aa2:	1c5c      	adds	r4, r3, #1
 8009aa4:	f85b 8b04 	ldr.w	r8, [fp], #4
 8009aa8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8009aac:	f000 80cf 	beq.w	8009c4e <_vfiprintf_r+0x5fe>
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	f7f6 fb93 	bl	80001e0 <memchr>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f000 8174 	beq.w	8009da8 <_vfiprintf_r+0x758>
 8009ac0:	eba0 0308 	sub.w	r3, r0, r8
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	9b00      	ldr	r3, [sp, #0]
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	bfb8      	it	lt
 8009acc:	462b      	movlt	r3, r5
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009ad4:	b113      	cbz	r3, 8009adc <_vfiprintf_r+0x48c>
 8009ad6:	9b04      	ldr	r3, [sp, #16]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	f01a 0302 	ands.w	r3, sl, #2
 8009ae0:	9308      	str	r3, [sp, #32]
 8009ae2:	bf1e      	ittt	ne
 8009ae4:	9b04      	ldrne	r3, [sp, #16]
 8009ae6:	3302      	addne	r3, #2
 8009ae8:	9304      	strne	r3, [sp, #16]
 8009aea:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	d11f      	bne.n	8009b32 <_vfiprintf_r+0x4e2>
 8009af2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009af6:	1a9c      	subs	r4, r3, r2
 8009af8:	2c00      	cmp	r4, #0
 8009afa:	dd1a      	ble.n	8009b32 <_vfiprintf_r+0x4e2>
 8009afc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009b00:	48b9      	ldr	r0, [pc, #740]	; (8009de8 <_vfiprintf_r+0x798>)
 8009b02:	6030      	str	r0, [r6, #0]
 8009b04:	2c10      	cmp	r4, #16
 8009b06:	f103 0301 	add.w	r3, r3, #1
 8009b0a:	f106 0108 	add.w	r1, r6, #8
 8009b0e:	f300 814d 	bgt.w	8009dac <_vfiprintf_r+0x75c>
 8009b12:	6074      	str	r4, [r6, #4]
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	4414      	add	r4, r2
 8009b18:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009b1c:	f340 8158 	ble.w	8009dd0 <_vfiprintf_r+0x780>
 8009b20:	aa0c      	add	r2, sp, #48	; 0x30
 8009b22:	4639      	mov	r1, r7
 8009b24:	4648      	mov	r0, r9
 8009b26:	f7ff fd61 	bl	80095ec <__sprint_r>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f040 81b8 	bne.w	8009ea0 <_vfiprintf_r+0x850>
 8009b30:	ae0f      	add	r6, sp, #60	; 0x3c
 8009b32:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009b36:	b173      	cbz	r3, 8009b56 <_vfiprintf_r+0x506>
 8009b38:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8009b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3e:	6032      	str	r2, [r6, #0]
 8009b40:	2201      	movs	r2, #1
 8009b42:	6072      	str	r2, [r6, #4]
 8009b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b46:	3301      	adds	r3, #1
 8009b48:	3201      	adds	r2, #1
 8009b4a:	2b07      	cmp	r3, #7
 8009b4c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009b50:	f300 8140 	bgt.w	8009dd4 <_vfiprintf_r+0x784>
 8009b54:	3608      	adds	r6, #8
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	b16b      	cbz	r3, 8009b76 <_vfiprintf_r+0x526>
 8009b5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b5e:	6032      	str	r2, [r6, #0]
 8009b60:	2202      	movs	r2, #2
 8009b62:	6072      	str	r2, [r6, #4]
 8009b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b66:	3301      	adds	r3, #1
 8009b68:	3202      	adds	r2, #2
 8009b6a:	2b07      	cmp	r3, #7
 8009b6c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009b70:	f300 8140 	bgt.w	8009df4 <_vfiprintf_r+0x7a4>
 8009b74:	3608      	adds	r6, #8
 8009b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b78:	2b80      	cmp	r3, #128	; 0x80
 8009b7a:	d11f      	bne.n	8009bbc <_vfiprintf_r+0x56c>
 8009b7c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009b80:	1a9c      	subs	r4, r3, r2
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	dd1a      	ble.n	8009bbc <_vfiprintf_r+0x56c>
 8009b86:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009b8a:	4898      	ldr	r0, [pc, #608]	; (8009dec <_vfiprintf_r+0x79c>)
 8009b8c:	6030      	str	r0, [r6, #0]
 8009b8e:	2c10      	cmp	r4, #16
 8009b90:	f103 0301 	add.w	r3, r3, #1
 8009b94:	f106 0108 	add.w	r1, r6, #8
 8009b98:	f300 8135 	bgt.w	8009e06 <_vfiprintf_r+0x7b6>
 8009b9c:	6074      	str	r4, [r6, #4]
 8009b9e:	2b07      	cmp	r3, #7
 8009ba0:	4414      	add	r4, r2
 8009ba2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009ba6:	f340 8140 	ble.w	8009e2a <_vfiprintf_r+0x7da>
 8009baa:	aa0c      	add	r2, sp, #48	; 0x30
 8009bac:	4639      	mov	r1, r7
 8009bae:	4648      	mov	r0, r9
 8009bb0:	f7ff fd1c 	bl	80095ec <__sprint_r>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f040 8173 	bne.w	8009ea0 <_vfiprintf_r+0x850>
 8009bba:	ae0f      	add	r6, sp, #60	; 0x3c
 8009bbc:	9b00      	ldr	r3, [sp, #0]
 8009bbe:	1aec      	subs	r4, r5, r3
 8009bc0:	2c00      	cmp	r4, #0
 8009bc2:	dd1a      	ble.n	8009bfa <_vfiprintf_r+0x5aa>
 8009bc4:	4d89      	ldr	r5, [pc, #548]	; (8009dec <_vfiprintf_r+0x79c>)
 8009bc6:	6035      	str	r5, [r6, #0]
 8009bc8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8009bcc:	2c10      	cmp	r4, #16
 8009bce:	f103 0301 	add.w	r3, r3, #1
 8009bd2:	f106 0208 	add.w	r2, r6, #8
 8009bd6:	f300 812a 	bgt.w	8009e2e <_vfiprintf_r+0x7de>
 8009bda:	6074      	str	r4, [r6, #4]
 8009bdc:	2b07      	cmp	r3, #7
 8009bde:	440c      	add	r4, r1
 8009be0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009be4:	f340 8134 	ble.w	8009e50 <_vfiprintf_r+0x800>
 8009be8:	aa0c      	add	r2, sp, #48	; 0x30
 8009bea:	4639      	mov	r1, r7
 8009bec:	4648      	mov	r0, r9
 8009bee:	f7ff fcfd 	bl	80095ec <__sprint_r>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	f040 8154 	bne.w	8009ea0 <_vfiprintf_r+0x850>
 8009bf8:	ae0f      	add	r6, sp, #60	; 0x3c
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009bfe:	6073      	str	r3, [r6, #4]
 8009c00:	4418      	add	r0, r3
 8009c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c04:	f8c6 8000 	str.w	r8, [r6]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	2b07      	cmp	r3, #7
 8009c0c:	900e      	str	r0, [sp, #56]	; 0x38
 8009c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c10:	f300 8120 	bgt.w	8009e54 <_vfiprintf_r+0x804>
 8009c14:	f106 0308 	add.w	r3, r6, #8
 8009c18:	f01a 0f04 	tst.w	sl, #4
 8009c1c:	f040 8122 	bne.w	8009e64 <_vfiprintf_r+0x814>
 8009c20:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c24:	9904      	ldr	r1, [sp, #16]
 8009c26:	428a      	cmp	r2, r1
 8009c28:	bfac      	ite	ge
 8009c2a:	189b      	addge	r3, r3, r2
 8009c2c:	185b      	addlt	r3, r3, r1
 8009c2e:	9302      	str	r3, [sp, #8]
 8009c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c32:	b13b      	cbz	r3, 8009c44 <_vfiprintf_r+0x5f4>
 8009c34:	aa0c      	add	r2, sp, #48	; 0x30
 8009c36:	4639      	mov	r1, r7
 8009c38:	4648      	mov	r0, r9
 8009c3a:	f7ff fcd7 	bl	80095ec <__sprint_r>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f040 812e 	bne.w	8009ea0 <_vfiprintf_r+0x850>
 8009c44:	2300      	movs	r3, #0
 8009c46:	930d      	str	r3, [sp, #52]	; 0x34
 8009c48:	465c      	mov	r4, fp
 8009c4a:	ae0f      	add	r6, sp, #60	; 0x3c
 8009c4c:	e564      	b.n	8009718 <_vfiprintf_r+0xc8>
 8009c4e:	4640      	mov	r0, r8
 8009c50:	f7f6 fb16 	bl	8000280 <strlen>
 8009c54:	9000      	str	r0, [sp, #0]
 8009c56:	e736      	b.n	8009ac6 <_vfiprintf_r+0x476>
 8009c58:	f04a 0a10 	orr.w	sl, sl, #16
 8009c5c:	f01a 0f20 	tst.w	sl, #32
 8009c60:	d006      	beq.n	8009c70 <_vfiprintf_r+0x620>
 8009c62:	3407      	adds	r4, #7
 8009c64:	f024 0b07 	bic.w	fp, r4, #7
 8009c68:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e6dd      	b.n	8009a2c <_vfiprintf_r+0x3dc>
 8009c70:	f01a 0f10 	tst.w	sl, #16
 8009c74:	f104 0b04 	add.w	fp, r4, #4
 8009c78:	d001      	beq.n	8009c7e <_vfiprintf_r+0x62e>
 8009c7a:	6824      	ldr	r4, [r4, #0]
 8009c7c:	e003      	b.n	8009c86 <_vfiprintf_r+0x636>
 8009c7e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009c82:	d002      	beq.n	8009c8a <_vfiprintf_r+0x63a>
 8009c84:	8824      	ldrh	r4, [r4, #0]
 8009c86:	2500      	movs	r5, #0
 8009c88:	e7f0      	b.n	8009c6c <_vfiprintf_r+0x61c>
 8009c8a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009c8e:	d0f4      	beq.n	8009c7a <_vfiprintf_r+0x62a>
 8009c90:	7824      	ldrb	r4, [r4, #0]
 8009c92:	e7f8      	b.n	8009c86 <_vfiprintf_r+0x636>
 8009c94:	4a56      	ldr	r2, [pc, #344]	; (8009df0 <_vfiprintf_r+0x7a0>)
 8009c96:	e5d5      	b.n	8009844 <_vfiprintf_r+0x1f4>
 8009c98:	f01a 0f10 	tst.w	sl, #16
 8009c9c:	f104 0b04 	add.w	fp, r4, #4
 8009ca0:	d001      	beq.n	8009ca6 <_vfiprintf_r+0x656>
 8009ca2:	6824      	ldr	r4, [r4, #0]
 8009ca4:	e003      	b.n	8009cae <_vfiprintf_r+0x65e>
 8009ca6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009caa:	d002      	beq.n	8009cb2 <_vfiprintf_r+0x662>
 8009cac:	8824      	ldrh	r4, [r4, #0]
 8009cae:	2500      	movs	r5, #0
 8009cb0:	e5d2      	b.n	8009858 <_vfiprintf_r+0x208>
 8009cb2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009cb6:	d0f4      	beq.n	8009ca2 <_vfiprintf_r+0x652>
 8009cb8:	7824      	ldrb	r4, [r4, #0]
 8009cba:	e7f8      	b.n	8009cae <_vfiprintf_r+0x65e>
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	bf08      	it	eq
 8009cc0:	2c0a      	cmpeq	r4, #10
 8009cc2:	d205      	bcs.n	8009cd0 <_vfiprintf_r+0x680>
 8009cc4:	3430      	adds	r4, #48	; 0x30
 8009cc6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8009cca:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8009cce:	e13c      	b.n	8009f4a <_vfiprintf_r+0x8fa>
 8009cd0:	ab38      	add	r3, sp, #224	; 0xe0
 8009cd2:	9308      	str	r3, [sp, #32]
 8009cd4:	9b04      	ldr	r3, [sp, #16]
 8009cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cda:	f04f 0a00 	mov.w	sl, #0
 8009cde:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	220a      	movs	r2, #10
 8009ce4:	f103 38ff 	add.w	r8, r3, #4294967295
 8009ce8:	4620      	mov	r0, r4
 8009cea:	2300      	movs	r3, #0
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7f6 ffd3 	bl	8000c98 <__aeabi_uldivmod>
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	3230      	adds	r2, #48	; 0x30
 8009cf6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfc:	f10a 0a01 	add.w	sl, sl, #1
 8009d00:	b1db      	cbz	r3, 8009d3a <_vfiprintf_r+0x6ea>
 8009d02:	9b06      	ldr	r3, [sp, #24]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	4553      	cmp	r3, sl
 8009d08:	d117      	bne.n	8009d3a <_vfiprintf_r+0x6ea>
 8009d0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009d0e:	d014      	beq.n	8009d3a <_vfiprintf_r+0x6ea>
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	bf08      	it	eq
 8009d14:	2c0a      	cmpeq	r4, #10
 8009d16:	d310      	bcc.n	8009d3a <_vfiprintf_r+0x6ea>
 8009d18:	9b07      	ldr	r3, [sp, #28]
 8009d1a:	eba8 0803 	sub.w	r8, r8, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	ee18 1a10 	vmov	r1, s16
 8009d24:	4640      	mov	r0, r8
 8009d26:	f7ff f94f 	bl	8008fc8 <strncpy>
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	b1a3      	cbz	r3, 8009d5a <_vfiprintf_r+0x70a>
 8009d30:	9b06      	ldr	r3, [sp, #24]
 8009d32:	3301      	adds	r3, #1
 8009d34:	9306      	str	r3, [sp, #24]
 8009d36:	f04f 0a00 	mov.w	sl, #0
 8009d3a:	220a      	movs	r2, #10
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	f7f6 ffa9 	bl	8000c98 <__aeabi_uldivmod>
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	bf08      	it	eq
 8009d4a:	2c0a      	cmpeq	r4, #10
 8009d4c:	f0c0 80fd 	bcc.w	8009f4a <_vfiprintf_r+0x8fa>
 8009d50:	4604      	mov	r4, r0
 8009d52:	460d      	mov	r5, r1
 8009d54:	f8cd 8020 	str.w	r8, [sp, #32]
 8009d58:	e7c2      	b.n	8009ce0 <_vfiprintf_r+0x690>
 8009d5a:	469a      	mov	sl, r3
 8009d5c:	e7ed      	b.n	8009d3a <_vfiprintf_r+0x6ea>
 8009d5e:	9a05      	ldr	r2, [sp, #20]
 8009d60:	f004 030f 	and.w	r3, r4, #15
 8009d64:	5cd3      	ldrb	r3, [r2, r3]
 8009d66:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009d6a:	0923      	lsrs	r3, r4, #4
 8009d6c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009d70:	092a      	lsrs	r2, r5, #4
 8009d72:	461c      	mov	r4, r3
 8009d74:	4615      	mov	r5, r2
 8009d76:	ea54 0305 	orrs.w	r3, r4, r5
 8009d7a:	d1f0      	bne.n	8009d5e <_vfiprintf_r+0x70e>
 8009d7c:	e0e5      	b.n	8009f4a <_vfiprintf_r+0x8fa>
 8009d7e:	b933      	cbnz	r3, 8009d8e <_vfiprintf_r+0x73e>
 8009d80:	f01a 0f01 	tst.w	sl, #1
 8009d84:	d003      	beq.n	8009d8e <_vfiprintf_r+0x73e>
 8009d86:	2330      	movs	r3, #48	; 0x30
 8009d88:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8009d8c:	e79d      	b.n	8009cca <_vfiprintf_r+0x67a>
 8009d8e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009d92:	e0da      	b.n	8009f4a <_vfiprintf_r+0x8fa>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 80a4 	beq.w	8009ee2 <_vfiprintf_r+0x892>
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009da0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009da4:	46a3      	mov	fp, r4
 8009da6:	e5e7      	b.n	8009978 <_vfiprintf_r+0x328>
 8009da8:	4605      	mov	r5, r0
 8009daa:	e68c      	b.n	8009ac6 <_vfiprintf_r+0x476>
 8009dac:	2010      	movs	r0, #16
 8009dae:	4402      	add	r2, r0
 8009db0:	2b07      	cmp	r3, #7
 8009db2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009db6:	6070      	str	r0, [r6, #4]
 8009db8:	dd07      	ble.n	8009dca <_vfiprintf_r+0x77a>
 8009dba:	aa0c      	add	r2, sp, #48	; 0x30
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	4648      	mov	r0, r9
 8009dc0:	f7ff fc14 	bl	80095ec <__sprint_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d16b      	bne.n	8009ea0 <_vfiprintf_r+0x850>
 8009dc8:	a90f      	add	r1, sp, #60	; 0x3c
 8009dca:	3c10      	subs	r4, #16
 8009dcc:	460e      	mov	r6, r1
 8009dce:	e695      	b.n	8009afc <_vfiprintf_r+0x4ac>
 8009dd0:	460e      	mov	r6, r1
 8009dd2:	e6ae      	b.n	8009b32 <_vfiprintf_r+0x4e2>
 8009dd4:	aa0c      	add	r2, sp, #48	; 0x30
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f7ff fc07 	bl	80095ec <__sprint_r>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d15e      	bne.n	8009ea0 <_vfiprintf_r+0x850>
 8009de2:	ae0f      	add	r6, sp, #60	; 0x3c
 8009de4:	e6b7      	b.n	8009b56 <_vfiprintf_r+0x506>
 8009de6:	bf00      	nop
 8009de8:	0800b562 	.word	0x0800b562
 8009dec:	0800b572 	.word	0x0800b572
 8009df0:	0800b309 	.word	0x0800b309
 8009df4:	aa0c      	add	r2, sp, #48	; 0x30
 8009df6:	4639      	mov	r1, r7
 8009df8:	4648      	mov	r0, r9
 8009dfa:	f7ff fbf7 	bl	80095ec <__sprint_r>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d14e      	bne.n	8009ea0 <_vfiprintf_r+0x850>
 8009e02:	ae0f      	add	r6, sp, #60	; 0x3c
 8009e04:	e6b7      	b.n	8009b76 <_vfiprintf_r+0x526>
 8009e06:	2010      	movs	r0, #16
 8009e08:	4402      	add	r2, r0
 8009e0a:	2b07      	cmp	r3, #7
 8009e0c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009e10:	6070      	str	r0, [r6, #4]
 8009e12:	dd07      	ble.n	8009e24 <_vfiprintf_r+0x7d4>
 8009e14:	aa0c      	add	r2, sp, #48	; 0x30
 8009e16:	4639      	mov	r1, r7
 8009e18:	4648      	mov	r0, r9
 8009e1a:	f7ff fbe7 	bl	80095ec <__sprint_r>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d13e      	bne.n	8009ea0 <_vfiprintf_r+0x850>
 8009e22:	a90f      	add	r1, sp, #60	; 0x3c
 8009e24:	3c10      	subs	r4, #16
 8009e26:	460e      	mov	r6, r1
 8009e28:	e6ad      	b.n	8009b86 <_vfiprintf_r+0x536>
 8009e2a:	460e      	mov	r6, r1
 8009e2c:	e6c6      	b.n	8009bbc <_vfiprintf_r+0x56c>
 8009e2e:	2010      	movs	r0, #16
 8009e30:	4401      	add	r1, r0
 8009e32:	2b07      	cmp	r3, #7
 8009e34:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009e38:	6070      	str	r0, [r6, #4]
 8009e3a:	dd06      	ble.n	8009e4a <_vfiprintf_r+0x7fa>
 8009e3c:	aa0c      	add	r2, sp, #48	; 0x30
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4648      	mov	r0, r9
 8009e42:	f7ff fbd3 	bl	80095ec <__sprint_r>
 8009e46:	bb58      	cbnz	r0, 8009ea0 <_vfiprintf_r+0x850>
 8009e48:	aa0f      	add	r2, sp, #60	; 0x3c
 8009e4a:	3c10      	subs	r4, #16
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	e6ba      	b.n	8009bc6 <_vfiprintf_r+0x576>
 8009e50:	4616      	mov	r6, r2
 8009e52:	e6d2      	b.n	8009bfa <_vfiprintf_r+0x5aa>
 8009e54:	aa0c      	add	r2, sp, #48	; 0x30
 8009e56:	4639      	mov	r1, r7
 8009e58:	4648      	mov	r0, r9
 8009e5a:	f7ff fbc7 	bl	80095ec <__sprint_r>
 8009e5e:	b9f8      	cbnz	r0, 8009ea0 <_vfiprintf_r+0x850>
 8009e60:	ab0f      	add	r3, sp, #60	; 0x3c
 8009e62:	e6d9      	b.n	8009c18 <_vfiprintf_r+0x5c8>
 8009e64:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8009e68:	1a54      	subs	r4, r2, r1
 8009e6a:	2c00      	cmp	r4, #0
 8009e6c:	f77f aed8 	ble.w	8009c20 <_vfiprintf_r+0x5d0>
 8009e70:	4d3a      	ldr	r5, [pc, #232]	; (8009f5c <_vfiprintf_r+0x90c>)
 8009e72:	2610      	movs	r6, #16
 8009e74:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8009e78:	2c10      	cmp	r4, #16
 8009e7a:	f102 0201 	add.w	r2, r2, #1
 8009e7e:	601d      	str	r5, [r3, #0]
 8009e80:	dc1d      	bgt.n	8009ebe <_vfiprintf_r+0x86e>
 8009e82:	605c      	str	r4, [r3, #4]
 8009e84:	2a07      	cmp	r2, #7
 8009e86:	440c      	add	r4, r1
 8009e88:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8009e8c:	f77f aec8 	ble.w	8009c20 <_vfiprintf_r+0x5d0>
 8009e90:	aa0c      	add	r2, sp, #48	; 0x30
 8009e92:	4639      	mov	r1, r7
 8009e94:	4648      	mov	r0, r9
 8009e96:	f7ff fba9 	bl	80095ec <__sprint_r>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f43f aec0 	beq.w	8009c20 <_vfiprintf_r+0x5d0>
 8009ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea2:	07d9      	lsls	r1, r3, #31
 8009ea4:	d405      	bmi.n	8009eb2 <_vfiprintf_r+0x862>
 8009ea6:	89bb      	ldrh	r3, [r7, #12]
 8009ea8:	059a      	lsls	r2, r3, #22
 8009eaa:	d402      	bmi.n	8009eb2 <_vfiprintf_r+0x862>
 8009eac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009eae:	f7fe fab6 	bl	800841e <__retarget_lock_release_recursive>
 8009eb2:	89bb      	ldrh	r3, [r7, #12]
 8009eb4:	065b      	lsls	r3, r3, #25
 8009eb6:	f57f abfe 	bpl.w	80096b6 <_vfiprintf_r+0x66>
 8009eba:	f7ff bbf9 	b.w	80096b0 <_vfiprintf_r+0x60>
 8009ebe:	3110      	adds	r1, #16
 8009ec0:	2a07      	cmp	r2, #7
 8009ec2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8009ec6:	605e      	str	r6, [r3, #4]
 8009ec8:	dc02      	bgt.n	8009ed0 <_vfiprintf_r+0x880>
 8009eca:	3308      	adds	r3, #8
 8009ecc:	3c10      	subs	r4, #16
 8009ece:	e7d1      	b.n	8009e74 <_vfiprintf_r+0x824>
 8009ed0:	aa0c      	add	r2, sp, #48	; 0x30
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f7ff fb89 	bl	80095ec <__sprint_r>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d1e0      	bne.n	8009ea0 <_vfiprintf_r+0x850>
 8009ede:	ab0f      	add	r3, sp, #60	; 0x3c
 8009ee0:	e7f4      	b.n	8009ecc <_vfiprintf_r+0x87c>
 8009ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ee4:	b913      	cbnz	r3, 8009eec <_vfiprintf_r+0x89c>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8009eea:	e7d9      	b.n	8009ea0 <_vfiprintf_r+0x850>
 8009eec:	aa0c      	add	r2, sp, #48	; 0x30
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	f7ff fb7b 	bl	80095ec <__sprint_r>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d0f5      	beq.n	8009ee6 <_vfiprintf_r+0x896>
 8009efa:	e7d1      	b.n	8009ea0 <_vfiprintf_r+0x850>
 8009efc:	ea54 0205 	orrs.w	r2, r4, r5
 8009f00:	f8cd a010 	str.w	sl, [sp, #16]
 8009f04:	f43f ada4 	beq.w	8009a50 <_vfiprintf_r+0x400>
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	f43f aed7 	beq.w	8009cbc <_vfiprintf_r+0x66c>
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009f14:	f43f af23 	beq.w	8009d5e <_vfiprintf_r+0x70e>
 8009f18:	08e2      	lsrs	r2, r4, #3
 8009f1a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8009f1e:	08e8      	lsrs	r0, r5, #3
 8009f20:	f004 0307 	and.w	r3, r4, #7
 8009f24:	4605      	mov	r5, r0
 8009f26:	4614      	mov	r4, r2
 8009f28:	3330      	adds	r3, #48	; 0x30
 8009f2a:	ea54 0205 	orrs.w	r2, r4, r5
 8009f2e:	4641      	mov	r1, r8
 8009f30:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009f34:	d1f0      	bne.n	8009f18 <_vfiprintf_r+0x8c8>
 8009f36:	9a04      	ldr	r2, [sp, #16]
 8009f38:	07d0      	lsls	r0, r2, #31
 8009f3a:	d506      	bpl.n	8009f4a <_vfiprintf_r+0x8fa>
 8009f3c:	2b30      	cmp	r3, #48	; 0x30
 8009f3e:	d004      	beq.n	8009f4a <_vfiprintf_r+0x8fa>
 8009f40:	2330      	movs	r3, #48	; 0x30
 8009f42:	f808 3c01 	strb.w	r3, [r8, #-1]
 8009f46:	f1a1 0802 	sub.w	r8, r1, #2
 8009f4a:	ab38      	add	r3, sp, #224	; 0xe0
 8009f4c:	eba3 0308 	sub.w	r3, r3, r8
 8009f50:	9d00      	ldr	r5, [sp, #0]
 8009f52:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	e5b5      	b.n	8009ac6 <_vfiprintf_r+0x476>
 8009f5a:	bf00      	nop
 8009f5c:	0800b562 	.word	0x0800b562

08009f60 <__sbprintf>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	460c      	mov	r4, r1
 8009f64:	8989      	ldrh	r1, [r1, #12]
 8009f66:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8009f6a:	f021 0102 	bic.w	r1, r1, #2
 8009f6e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009f72:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009f74:	911b      	str	r1, [sp, #108]	; 0x6c
 8009f76:	89e1      	ldrh	r1, [r4, #14]
 8009f78:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009f7c:	69e1      	ldr	r1, [r4, #28]
 8009f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8009f80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f82:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f84:	a91c      	add	r1, sp, #112	; 0x70
 8009f86:	9102      	str	r1, [sp, #8]
 8009f88:	9106      	str	r1, [sp, #24]
 8009f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f8e:	4606      	mov	r6, r0
 8009f90:	9104      	str	r1, [sp, #16]
 8009f92:	9107      	str	r1, [sp, #28]
 8009f94:	a818      	add	r0, sp, #96	; 0x60
 8009f96:	2100      	movs	r1, #0
 8009f98:	e9cd 3200 	strd	r3, r2, [sp]
 8009f9c:	9108      	str	r1, [sp, #32]
 8009f9e:	f7fe fa3b 	bl	8008418 <__retarget_lock_init_recursive>
 8009fa2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fa6:	a902      	add	r1, sp, #8
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff fb51 	bl	8009650 <_vfiprintf_r>
 8009fae:	1e05      	subs	r5, r0, #0
 8009fb0:	db07      	blt.n	8009fc2 <__sbprintf+0x62>
 8009fb2:	a902      	add	r1, sp, #8
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f000 f90f 	bl	800a1d8 <_fflush_r>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	bf18      	it	ne
 8009fbe:	f04f 35ff 	movne.w	r5, #4294967295
 8009fc2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8009fc6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009fc8:	065b      	lsls	r3, r3, #25
 8009fca:	bf42      	ittt	mi
 8009fcc:	89a3      	ldrhmi	r3, [r4, #12]
 8009fce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009fd2:	81a3      	strhmi	r3, [r4, #12]
 8009fd4:	f7fe fa21 	bl	800841a <__retarget_lock_close_recursive>
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8009fde:	bd70      	pop	{r4, r5, r6, pc}

08009fe0 <__ascii_wctomb>:
 8009fe0:	b149      	cbz	r1, 8009ff6 <__ascii_wctomb+0x16>
 8009fe2:	2aff      	cmp	r2, #255	; 0xff
 8009fe4:	bf85      	ittet	hi
 8009fe6:	238a      	movhi	r3, #138	; 0x8a
 8009fe8:	6003      	strhi	r3, [r0, #0]
 8009fea:	700a      	strbls	r2, [r1, #0]
 8009fec:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ff0:	bf98      	it	ls
 8009ff2:	2001      	movls	r0, #1
 8009ff4:	4770      	bx	lr
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4770      	bx	lr
	...

08009ffc <__swsetup_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4b2a      	ldr	r3, [pc, #168]	; (800a0a8 <__swsetup_r+0xac>)
 800a000:	4605      	mov	r5, r0
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	460c      	mov	r4, r1
 800a006:	b118      	cbz	r0, 800a010 <__swsetup_r+0x14>
 800a008:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a00a:	b90b      	cbnz	r3, 800a010 <__swsetup_r+0x14>
 800a00c:	f000 f950 	bl	800a2b0 <__sinit>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a016:	0718      	lsls	r0, r3, #28
 800a018:	d422      	bmi.n	800a060 <__swsetup_r+0x64>
 800a01a:	06d9      	lsls	r1, r3, #27
 800a01c:	d407      	bmi.n	800a02e <__swsetup_r+0x32>
 800a01e:	2309      	movs	r3, #9
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	e034      	b.n	800a098 <__swsetup_r+0x9c>
 800a02e:	0758      	lsls	r0, r3, #29
 800a030:	d512      	bpl.n	800a058 <__swsetup_r+0x5c>
 800a032:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a034:	b141      	cbz	r1, 800a048 <__swsetup_r+0x4c>
 800a036:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a03a:	4299      	cmp	r1, r3
 800a03c:	d002      	beq.n	800a044 <__swsetup_r+0x48>
 800a03e:	4628      	mov	r0, r5
 800a040:	f7fe f926 	bl	8008290 <_free_r>
 800a044:	2300      	movs	r3, #0
 800a046:	6323      	str	r3, [r4, #48]	; 0x30
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a04e:	81a3      	strh	r3, [r4, #12]
 800a050:	2300      	movs	r3, #0
 800a052:	6063      	str	r3, [r4, #4]
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f043 0308 	orr.w	r3, r3, #8
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	b94b      	cbnz	r3, 800a078 <__swsetup_r+0x7c>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06e:	d003      	beq.n	800a078 <__swsetup_r+0x7c>
 800a070:	4621      	mov	r1, r4
 800a072:	4628      	mov	r0, r5
 800a074:	f000 fb44 	bl	800a700 <__smakebuf_r>
 800a078:	89a0      	ldrh	r0, [r4, #12]
 800a07a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07e:	f010 0301 	ands.w	r3, r0, #1
 800a082:	d00a      	beq.n	800a09a <__swsetup_r+0x9e>
 800a084:	2300      	movs	r3, #0
 800a086:	60a3      	str	r3, [r4, #8]
 800a088:	6963      	ldr	r3, [r4, #20]
 800a08a:	425b      	negs	r3, r3
 800a08c:	61a3      	str	r3, [r4, #24]
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	b943      	cbnz	r3, 800a0a4 <__swsetup_r+0xa8>
 800a092:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a096:	d1c4      	bne.n	800a022 <__swsetup_r+0x26>
 800a098:	bd38      	pop	{r3, r4, r5, pc}
 800a09a:	0781      	lsls	r1, r0, #30
 800a09c:	bf58      	it	pl
 800a09e:	6963      	ldrpl	r3, [r4, #20]
 800a0a0:	60a3      	str	r3, [r4, #8]
 800a0a2:	e7f4      	b.n	800a08e <__swsetup_r+0x92>
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	e7f7      	b.n	800a098 <__swsetup_r+0x9c>
 800a0a8:	20000014 	.word	0x20000014

0800a0ac <abort>:
 800a0ac:	b508      	push	{r3, lr}
 800a0ae:	2006      	movs	r0, #6
 800a0b0:	f000 fb90 	bl	800a7d4 <raise>
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f7f8 fa35 	bl	8002524 <_exit>
	...

0800a0bc <__sflush_r>:
 800a0bc:	898b      	ldrh	r3, [r1, #12]
 800a0be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	0718      	lsls	r0, r3, #28
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	d45f      	bmi.n	800a18e <__sflush_r+0xd2>
 800a0ce:	684b      	ldr	r3, [r1, #4]
 800a0d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	818a      	strh	r2, [r1, #12]
 800a0d8:	dc05      	bgt.n	800a0e6 <__sflush_r+0x2a>
 800a0da:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dc02      	bgt.n	800a0e6 <__sflush_r+0x2a>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0e8:	2e00      	cmp	r6, #0
 800a0ea:	d0f9      	beq.n	800a0e0 <__sflush_r+0x24>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0f2:	682f      	ldr	r7, [r5, #0]
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	d036      	beq.n	800a166 <__sflush_r+0xaa>
 800a0f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	075a      	lsls	r2, r3, #29
 800a0fe:	d505      	bpl.n	800a10c <__sflush_r+0x50>
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	1ac0      	subs	r0, r0, r3
 800a104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a106:	b10b      	cbz	r3, 800a10c <__sflush_r+0x50>
 800a108:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a10a:	1ac0      	subs	r0, r0, r3
 800a10c:	2300      	movs	r3, #0
 800a10e:	4602      	mov	r2, r0
 800a110:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a112:	69e1      	ldr	r1, [r4, #28]
 800a114:	4628      	mov	r0, r5
 800a116:	47b0      	blx	r6
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	d106      	bne.n	800a12c <__sflush_r+0x70>
 800a11e:	6829      	ldr	r1, [r5, #0]
 800a120:	291d      	cmp	r1, #29
 800a122:	d830      	bhi.n	800a186 <__sflush_r+0xca>
 800a124:	4a2b      	ldr	r2, [pc, #172]	; (800a1d4 <__sflush_r+0x118>)
 800a126:	40ca      	lsrs	r2, r1
 800a128:	07d6      	lsls	r6, r2, #31
 800a12a:	d52c      	bpl.n	800a186 <__sflush_r+0xca>
 800a12c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a130:	b21b      	sxth	r3, r3
 800a132:	2200      	movs	r2, #0
 800a134:	6062      	str	r2, [r4, #4]
 800a136:	04d9      	lsls	r1, r3, #19
 800a138:	6922      	ldr	r2, [r4, #16]
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	d504      	bpl.n	800a14a <__sflush_r+0x8e>
 800a140:	1c42      	adds	r2, r0, #1
 800a142:	d101      	bne.n	800a148 <__sflush_r+0x8c>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b903      	cbnz	r3, 800a14a <__sflush_r+0x8e>
 800a148:	6520      	str	r0, [r4, #80]	; 0x50
 800a14a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a14c:	602f      	str	r7, [r5, #0]
 800a14e:	2900      	cmp	r1, #0
 800a150:	d0c6      	beq.n	800a0e0 <__sflush_r+0x24>
 800a152:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a156:	4299      	cmp	r1, r3
 800a158:	d002      	beq.n	800a160 <__sflush_r+0xa4>
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7fe f898 	bl	8008290 <_free_r>
 800a160:	2000      	movs	r0, #0
 800a162:	6320      	str	r0, [r4, #48]	; 0x30
 800a164:	e7bd      	b.n	800a0e2 <__sflush_r+0x26>
 800a166:	69e1      	ldr	r1, [r4, #28]
 800a168:	2301      	movs	r3, #1
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b0      	blx	r6
 800a16e:	1c41      	adds	r1, r0, #1
 800a170:	d1c3      	bne.n	800a0fa <__sflush_r+0x3e>
 800a172:	682b      	ldr	r3, [r5, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0c0      	beq.n	800a0fa <__sflush_r+0x3e>
 800a178:	2b1d      	cmp	r3, #29
 800a17a:	d001      	beq.n	800a180 <__sflush_r+0xc4>
 800a17c:	2b16      	cmp	r3, #22
 800a17e:	d101      	bne.n	800a184 <__sflush_r+0xc8>
 800a180:	602f      	str	r7, [r5, #0]
 800a182:	e7ad      	b.n	800a0e0 <__sflush_r+0x24>
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	e7a9      	b.n	800a0e2 <__sflush_r+0x26>
 800a18e:	690f      	ldr	r7, [r1, #16]
 800a190:	2f00      	cmp	r7, #0
 800a192:	d0a5      	beq.n	800a0e0 <__sflush_r+0x24>
 800a194:	079b      	lsls	r3, r3, #30
 800a196:	680e      	ldr	r6, [r1, #0]
 800a198:	bf08      	it	eq
 800a19a:	694b      	ldreq	r3, [r1, #20]
 800a19c:	600f      	str	r7, [r1, #0]
 800a19e:	bf18      	it	ne
 800a1a0:	2300      	movne	r3, #0
 800a1a2:	eba6 0807 	sub.w	r8, r6, r7
 800a1a6:	608b      	str	r3, [r1, #8]
 800a1a8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ac:	dd98      	ble.n	800a0e0 <__sflush_r+0x24>
 800a1ae:	69e1      	ldr	r1, [r4, #28]
 800a1b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1b2:	4643      	mov	r3, r8
 800a1b4:	463a      	mov	r2, r7
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b0      	blx	r6
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	dc06      	bgt.n	800a1cc <__sflush_r+0x110>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	e78a      	b.n	800a0e2 <__sflush_r+0x26>
 800a1cc:	4407      	add	r7, r0
 800a1ce:	eba8 0800 	sub.w	r8, r8, r0
 800a1d2:	e7e9      	b.n	800a1a8 <__sflush_r+0xec>
 800a1d4:	20400001 	.word	0x20400001

0800a1d8 <_fflush_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	460c      	mov	r4, r1
 800a1dc:	4605      	mov	r5, r0
 800a1de:	b118      	cbz	r0, 800a1e8 <_fflush_r+0x10>
 800a1e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a1e2:	b90b      	cbnz	r3, 800a1e8 <_fflush_r+0x10>
 800a1e4:	f000 f864 	bl	800a2b0 <__sinit>
 800a1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ec:	b1bb      	cbz	r3, 800a21e <_fflush_r+0x46>
 800a1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1f0:	07d0      	lsls	r0, r2, #31
 800a1f2:	d404      	bmi.n	800a1fe <_fflush_r+0x26>
 800a1f4:	0599      	lsls	r1, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_fflush_r+0x26>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1fa:	f7fe f90f 	bl	800841c <__retarget_lock_acquire_recursive>
 800a1fe:	4628      	mov	r0, r5
 800a200:	4621      	mov	r1, r4
 800a202:	f7ff ff5b 	bl	800a0bc <__sflush_r>
 800a206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a208:	07da      	lsls	r2, r3, #31
 800a20a:	4605      	mov	r5, r0
 800a20c:	d405      	bmi.n	800a21a <_fflush_r+0x42>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	059b      	lsls	r3, r3, #22
 800a212:	d402      	bmi.n	800a21a <_fflush_r+0x42>
 800a214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a216:	f7fe f902 	bl	800841e <__retarget_lock_release_recursive>
 800a21a:	4628      	mov	r0, r5
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	461d      	mov	r5, r3
 800a220:	e7fb      	b.n	800a21a <_fflush_r+0x42>
	...

0800a224 <std>:
 800a224:	2300      	movs	r3, #0
 800a226:	b510      	push	{r4, lr}
 800a228:	4604      	mov	r4, r0
 800a22a:	e9c0 3300 	strd	r3, r3, [r0]
 800a22e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a232:	6083      	str	r3, [r0, #8]
 800a234:	8181      	strh	r1, [r0, #12]
 800a236:	6643      	str	r3, [r0, #100]	; 0x64
 800a238:	81c2      	strh	r2, [r0, #14]
 800a23a:	6183      	str	r3, [r0, #24]
 800a23c:	4619      	mov	r1, r3
 800a23e:	2208      	movs	r2, #8
 800a240:	305c      	adds	r0, #92	; 0x5c
 800a242:	f7fb ff45 	bl	80060d0 <memset>
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <std+0x40>)
 800a248:	6223      	str	r3, [r4, #32]
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <std+0x44>)
 800a24c:	6263      	str	r3, [r4, #36]	; 0x24
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <std+0x48>)
 800a250:	62a3      	str	r3, [r4, #40]	; 0x28
 800a252:	4b07      	ldr	r3, [pc, #28]	; (800a270 <std+0x4c>)
 800a254:	61e4      	str	r4, [r4, #28]
 800a256:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a258:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a260:	f7fe b8da 	b.w	8008418 <__retarget_lock_init_recursive>
 800a264:	0800a80d 	.word	0x0800a80d
 800a268:	0800a82f 	.word	0x0800a82f
 800a26c:	0800a867 	.word	0x0800a867
 800a270:	0800a88b 	.word	0x0800a88b

0800a274 <_cleanup_r>:
 800a274:	4901      	ldr	r1, [pc, #4]	; (800a27c <_cleanup_r+0x8>)
 800a276:	f000 b9f9 	b.w	800a66c <_fwalk_reent>
 800a27a:	bf00      	nop
 800a27c:	0800a995 	.word	0x0800a995

0800a280 <__sfp_lock_acquire>:
 800a280:	4801      	ldr	r0, [pc, #4]	; (800a288 <__sfp_lock_acquire+0x8>)
 800a282:	f7fe b8cb 	b.w	800841c <__retarget_lock_acquire_recursive>
 800a286:	bf00      	nop
 800a288:	20000fb4 	.word	0x20000fb4

0800a28c <__sfp_lock_release>:
 800a28c:	4801      	ldr	r0, [pc, #4]	; (800a294 <__sfp_lock_release+0x8>)
 800a28e:	f7fe b8c6 	b.w	800841e <__retarget_lock_release_recursive>
 800a292:	bf00      	nop
 800a294:	20000fb4 	.word	0x20000fb4

0800a298 <__sinit_lock_acquire>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__sinit_lock_acquire+0x8>)
 800a29a:	f7fe b8bf 	b.w	800841c <__retarget_lock_acquire_recursive>
 800a29e:	bf00      	nop
 800a2a0:	20000faf 	.word	0x20000faf

0800a2a4 <__sinit_lock_release>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__sinit_lock_release+0x8>)
 800a2a6:	f7fe b8ba 	b.w	800841e <__retarget_lock_release_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	20000faf 	.word	0x20000faf

0800a2b0 <__sinit>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	f7ff fff0 	bl	800a298 <__sinit_lock_acquire>
 800a2b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a2ba:	b11a      	cbz	r2, 800a2c4 <__sinit+0x14>
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	f7ff bff0 	b.w	800a2a4 <__sinit_lock_release>
 800a2c4:	4b0d      	ldr	r3, [pc, #52]	; (800a2fc <__sinit+0x4c>)
 800a2c6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a2ce:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a2d2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a2d6:	6860      	ldr	r0, [r4, #4]
 800a2d8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a2dc:	2104      	movs	r1, #4
 800a2de:	f7ff ffa1 	bl	800a224 <std>
 800a2e2:	68a0      	ldr	r0, [r4, #8]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	2109      	movs	r1, #9
 800a2e8:	f7ff ff9c 	bl	800a224 <std>
 800a2ec:	68e0      	ldr	r0, [r4, #12]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	2112      	movs	r1, #18
 800a2f2:	f7ff ff97 	bl	800a224 <std>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a2fa:	e7df      	b.n	800a2bc <__sinit+0xc>
 800a2fc:	0800a275 	.word	0x0800a275

0800a300 <__fputwc>:
 800a300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a304:	4680      	mov	r8, r0
 800a306:	460e      	mov	r6, r1
 800a308:	4615      	mov	r5, r2
 800a30a:	f7fe ff97 	bl	800923c <__locale_mb_cur_max>
 800a30e:	2801      	cmp	r0, #1
 800a310:	d11c      	bne.n	800a34c <__fputwc+0x4c>
 800a312:	1e73      	subs	r3, r6, #1
 800a314:	2bfe      	cmp	r3, #254	; 0xfe
 800a316:	d819      	bhi.n	800a34c <__fputwc+0x4c>
 800a318:	f88d 6004 	strb.w	r6, [sp, #4]
 800a31c:	4604      	mov	r4, r0
 800a31e:	2700      	movs	r7, #0
 800a320:	f10d 0904 	add.w	r9, sp, #4
 800a324:	42a7      	cmp	r7, r4
 800a326:	d020      	beq.n	800a36a <__fputwc+0x6a>
 800a328:	68ab      	ldr	r3, [r5, #8]
 800a32a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800a32e:	3b01      	subs	r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	60ab      	str	r3, [r5, #8]
 800a334:	da04      	bge.n	800a340 <__fputwc+0x40>
 800a336:	69aa      	ldr	r2, [r5, #24]
 800a338:	4293      	cmp	r3, r2
 800a33a:	db1a      	blt.n	800a372 <__fputwc+0x72>
 800a33c:	290a      	cmp	r1, #10
 800a33e:	d018      	beq.n	800a372 <__fputwc+0x72>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	602a      	str	r2, [r5, #0]
 800a346:	7019      	strb	r1, [r3, #0]
 800a348:	3701      	adds	r7, #1
 800a34a:	e7eb      	b.n	800a324 <__fputwc+0x24>
 800a34c:	4632      	mov	r2, r6
 800a34e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800a352:	a901      	add	r1, sp, #4
 800a354:	4640      	mov	r0, r8
 800a356:	f000 fae5 	bl	800a924 <_wcrtomb_r>
 800a35a:	1c42      	adds	r2, r0, #1
 800a35c:	4604      	mov	r4, r0
 800a35e:	d1de      	bne.n	800a31e <__fputwc+0x1e>
 800a360:	89ab      	ldrh	r3, [r5, #12]
 800a362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a366:	81ab      	strh	r3, [r5, #12]
 800a368:	4606      	mov	r6, r0
 800a36a:	4630      	mov	r0, r6
 800a36c:	b003      	add	sp, #12
 800a36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a372:	462a      	mov	r2, r5
 800a374:	4640      	mov	r0, r8
 800a376:	f000 fa8c 	bl	800a892 <__swbuf_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d1e4      	bne.n	800a348 <__fputwc+0x48>
 800a37e:	4606      	mov	r6, r0
 800a380:	e7f3      	b.n	800a36a <__fputwc+0x6a>

0800a382 <_fputwc_r>:
 800a382:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a386:	4614      	mov	r4, r2
 800a388:	07da      	lsls	r2, r3, #31
 800a38a:	4605      	mov	r5, r0
 800a38c:	d407      	bmi.n	800a39e <_fputwc_r+0x1c>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d404      	bmi.n	800a39e <_fputwc_r+0x1c>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	9101      	str	r1, [sp, #4]
 800a398:	f7fe f840 	bl	800841c <__retarget_lock_acquire_recursive>
 800a39c:	9901      	ldr	r1, [sp, #4]
 800a39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a2:	0498      	lsls	r0, r3, #18
 800a3a4:	d406      	bmi.n	800a3b4 <_fputwc_r+0x32>
 800a3a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a3aa:	81a3      	strh	r3, [r4, #12]
 800a3ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a3b2:	6663      	str	r3, [r4, #100]	; 0x64
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f7ff ffa2 	bl	800a300 <__fputwc>
 800a3bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3be:	07da      	lsls	r2, r3, #31
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	d405      	bmi.n	800a3d0 <_fputwc_r+0x4e>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	059b      	lsls	r3, r3, #22
 800a3c8:	d402      	bmi.n	800a3d0 <_fputwc_r+0x4e>
 800a3ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3cc:	f7fe f827 	bl	800841e <__retarget_lock_release_recursive>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	b003      	add	sp, #12
 800a3d4:	bd30      	pop	{r4, r5, pc}
	...

0800a3d8 <__sfvwrite_r>:
 800a3d8:	6893      	ldr	r3, [r2, #8]
 800a3da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3de:	4606      	mov	r6, r0
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	4690      	mov	r8, r2
 800a3e4:	b91b      	cbnz	r3, 800a3ee <__sfvwrite_r+0x16>
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	b003      	add	sp, #12
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	898b      	ldrh	r3, [r1, #12]
 800a3f0:	0718      	lsls	r0, r3, #28
 800a3f2:	d550      	bpl.n	800a496 <__sfvwrite_r+0xbe>
 800a3f4:	690b      	ldr	r3, [r1, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d04d      	beq.n	800a496 <__sfvwrite_r+0xbe>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f8d8 7000 	ldr.w	r7, [r8]
 800a400:	f013 0902 	ands.w	r9, r3, #2
 800a404:	d16c      	bne.n	800a4e0 <__sfvwrite_r+0x108>
 800a406:	f013 0301 	ands.w	r3, r3, #1
 800a40a:	f000 809c 	beq.w	800a546 <__sfvwrite_r+0x16e>
 800a40e:	4648      	mov	r0, r9
 800a410:	46ca      	mov	sl, r9
 800a412:	46cb      	mov	fp, r9
 800a414:	f1bb 0f00 	cmp.w	fp, #0
 800a418:	f000 8103 	beq.w	800a622 <__sfvwrite_r+0x24a>
 800a41c:	b950      	cbnz	r0, 800a434 <__sfvwrite_r+0x5c>
 800a41e:	465a      	mov	r2, fp
 800a420:	210a      	movs	r1, #10
 800a422:	4650      	mov	r0, sl
 800a424:	f7f5 fedc 	bl	80001e0 <memchr>
 800a428:	2800      	cmp	r0, #0
 800a42a:	f000 80ff 	beq.w	800a62c <__sfvwrite_r+0x254>
 800a42e:	3001      	adds	r0, #1
 800a430:	eba0 090a 	sub.w	r9, r0, sl
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	6921      	ldr	r1, [r4, #16]
 800a438:	6963      	ldr	r3, [r4, #20]
 800a43a:	45d9      	cmp	r9, fp
 800a43c:	464a      	mov	r2, r9
 800a43e:	bf28      	it	cs
 800a440:	465a      	movcs	r2, fp
 800a442:	4288      	cmp	r0, r1
 800a444:	f240 80f5 	bls.w	800a632 <__sfvwrite_r+0x25a>
 800a448:	68a5      	ldr	r5, [r4, #8]
 800a44a:	441d      	add	r5, r3
 800a44c:	42aa      	cmp	r2, r5
 800a44e:	f340 80f0 	ble.w	800a632 <__sfvwrite_r+0x25a>
 800a452:	4651      	mov	r1, sl
 800a454:	462a      	mov	r2, r5
 800a456:	f7fe ff09 	bl	800926c <memmove>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	442b      	add	r3, r5
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	4621      	mov	r1, r4
 800a462:	4630      	mov	r0, r6
 800a464:	f7ff feb8 	bl	800a1d8 <_fflush_r>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d167      	bne.n	800a53c <__sfvwrite_r+0x164>
 800a46c:	ebb9 0905 	subs.w	r9, r9, r5
 800a470:	f040 80f7 	bne.w	800a662 <__sfvwrite_r+0x28a>
 800a474:	4621      	mov	r1, r4
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff feae 	bl	800a1d8 <_fflush_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d15d      	bne.n	800a53c <__sfvwrite_r+0x164>
 800a480:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a484:	44aa      	add	sl, r5
 800a486:	ebab 0b05 	sub.w	fp, fp, r5
 800a48a:	1b55      	subs	r5, r2, r5
 800a48c:	f8c8 5008 	str.w	r5, [r8, #8]
 800a490:	2d00      	cmp	r5, #0
 800a492:	d1bf      	bne.n	800a414 <__sfvwrite_r+0x3c>
 800a494:	e7a7      	b.n	800a3e6 <__sfvwrite_r+0xe>
 800a496:	4621      	mov	r1, r4
 800a498:	4630      	mov	r0, r6
 800a49a:	f7ff fdaf 	bl	8009ffc <__swsetup_r>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d0ab      	beq.n	800a3fa <__sfvwrite_r+0x22>
 800a4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a6:	e79f      	b.n	800a3e8 <__sfvwrite_r+0x10>
 800a4a8:	e9d7 b900 	ldrd	fp, r9, [r7]
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	f1b9 0f00 	cmp.w	r9, #0
 800a4b2:	d0f9      	beq.n	800a4a8 <__sfvwrite_r+0xd0>
 800a4b4:	45d1      	cmp	r9, sl
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	69e1      	ldr	r1, [r4, #28]
 800a4ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a4bc:	bf28      	it	cs
 800a4be:	4653      	movcs	r3, sl
 800a4c0:	465a      	mov	r2, fp
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	47a8      	blx	r5
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	dd38      	ble.n	800a53c <__sfvwrite_r+0x164>
 800a4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4ce:	4483      	add	fp, r0
 800a4d0:	eba9 0900 	sub.w	r9, r9, r0
 800a4d4:	1a18      	subs	r0, r3, r0
 800a4d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d1e7      	bne.n	800a4ae <__sfvwrite_r+0xd6>
 800a4de:	e782      	b.n	800a3e6 <__sfvwrite_r+0xe>
 800a4e0:	f04f 0b00 	mov.w	fp, #0
 800a4e4:	f8df a180 	ldr.w	sl, [pc, #384]	; 800a668 <__sfvwrite_r+0x290>
 800a4e8:	46d9      	mov	r9, fp
 800a4ea:	e7e0      	b.n	800a4ae <__sfvwrite_r+0xd6>
 800a4ec:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	f1ba 0f00 	cmp.w	sl, #0
 800a4f6:	d0f9      	beq.n	800a4ec <__sfvwrite_r+0x114>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	68a2      	ldr	r2, [r4, #8]
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	0599      	lsls	r1, r3, #22
 800a500:	d563      	bpl.n	800a5ca <__sfvwrite_r+0x1f2>
 800a502:	4552      	cmp	r2, sl
 800a504:	d836      	bhi.n	800a574 <__sfvwrite_r+0x19c>
 800a506:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a50a:	d033      	beq.n	800a574 <__sfvwrite_r+0x19c>
 800a50c:	6921      	ldr	r1, [r4, #16]
 800a50e:	6965      	ldr	r5, [r4, #20]
 800a510:	eba0 0b01 	sub.w	fp, r0, r1
 800a514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a51c:	f10b 0201 	add.w	r2, fp, #1
 800a520:	106d      	asrs	r5, r5, #1
 800a522:	4452      	add	r2, sl
 800a524:	4295      	cmp	r5, r2
 800a526:	bf38      	it	cc
 800a528:	4615      	movcc	r5, r2
 800a52a:	055b      	lsls	r3, r3, #21
 800a52c:	d53d      	bpl.n	800a5aa <__sfvwrite_r+0x1d2>
 800a52e:	4629      	mov	r1, r5
 800a530:	4630      	mov	r0, r6
 800a532:	f7fd ff75 	bl	8008420 <_malloc_r>
 800a536:	b948      	cbnz	r0, 800a54c <__sfvwrite_r+0x174>
 800a538:	230c      	movs	r3, #12
 800a53a:	6033      	str	r3, [r6, #0]
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	e7ad      	b.n	800a4a2 <__sfvwrite_r+0xca>
 800a546:	4699      	mov	r9, r3
 800a548:	469a      	mov	sl, r3
 800a54a:	e7d2      	b.n	800a4f2 <__sfvwrite_r+0x11a>
 800a54c:	465a      	mov	r2, fp
 800a54e:	6921      	ldr	r1, [r4, #16]
 800a550:	9001      	str	r0, [sp, #4]
 800a552:	f7fe f9a7 	bl	80088a4 <memcpy>
 800a556:	89a2      	ldrh	r2, [r4, #12]
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a55e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a562:	81a2      	strh	r2, [r4, #12]
 800a564:	6123      	str	r3, [r4, #16]
 800a566:	6165      	str	r5, [r4, #20]
 800a568:	445b      	add	r3, fp
 800a56a:	eba5 050b 	sub.w	r5, r5, fp
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	4652      	mov	r2, sl
 800a572:	60a5      	str	r5, [r4, #8]
 800a574:	4552      	cmp	r2, sl
 800a576:	bf28      	it	cs
 800a578:	4652      	movcs	r2, sl
 800a57a:	6820      	ldr	r0, [r4, #0]
 800a57c:	9201      	str	r2, [sp, #4]
 800a57e:	4649      	mov	r1, r9
 800a580:	f7fe fe74 	bl	800926c <memmove>
 800a584:	68a3      	ldr	r3, [r4, #8]
 800a586:	9a01      	ldr	r2, [sp, #4]
 800a588:	1a9b      	subs	r3, r3, r2
 800a58a:	60a3      	str	r3, [r4, #8]
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	441a      	add	r2, r3
 800a590:	4655      	mov	r5, sl
 800a592:	6022      	str	r2, [r4, #0]
 800a594:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a598:	44a9      	add	r9, r5
 800a59a:	ebaa 0a05 	sub.w	sl, sl, r5
 800a59e:	1b45      	subs	r5, r0, r5
 800a5a0:	f8c8 5008 	str.w	r5, [r8, #8]
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	d1a4      	bne.n	800a4f2 <__sfvwrite_r+0x11a>
 800a5a8:	e71d      	b.n	800a3e6 <__sfvwrite_r+0xe>
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7fe fe77 	bl	80092a0 <_realloc_r>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d1d5      	bne.n	800a564 <__sfvwrite_r+0x18c>
 800a5b8:	6921      	ldr	r1, [r4, #16]
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7fd fe68 	bl	8008290 <_free_r>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c6:	81a3      	strh	r3, [r4, #12]
 800a5c8:	e7b6      	b.n	800a538 <__sfvwrite_r+0x160>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	4283      	cmp	r3, r0
 800a5ce:	d302      	bcc.n	800a5d6 <__sfvwrite_r+0x1fe>
 800a5d0:	6961      	ldr	r1, [r4, #20]
 800a5d2:	4551      	cmp	r1, sl
 800a5d4:	d915      	bls.n	800a602 <__sfvwrite_r+0x22a>
 800a5d6:	4552      	cmp	r2, sl
 800a5d8:	bf28      	it	cs
 800a5da:	4652      	movcs	r2, sl
 800a5dc:	4649      	mov	r1, r9
 800a5de:	4615      	mov	r5, r2
 800a5e0:	f7fe fe44 	bl	800926c <memmove>
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	6822      	ldr	r2, [r4, #0]
 800a5e8:	1b5b      	subs	r3, r3, r5
 800a5ea:	442a      	add	r2, r5
 800a5ec:	60a3      	str	r3, [r4, #8]
 800a5ee:	6022      	str	r2, [r4, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1cf      	bne.n	800a594 <__sfvwrite_r+0x1bc>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff fdee 	bl	800a1d8 <_fflush_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0c9      	beq.n	800a594 <__sfvwrite_r+0x1bc>
 800a600:	e79c      	b.n	800a53c <__sfvwrite_r+0x164>
 800a602:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a606:	459a      	cmp	sl, r3
 800a608:	bf38      	it	cc
 800a60a:	4653      	movcc	r3, sl
 800a60c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a60e:	fb93 f3f1 	sdiv	r3, r3, r1
 800a612:	464a      	mov	r2, r9
 800a614:	434b      	muls	r3, r1
 800a616:	4630      	mov	r0, r6
 800a618:	69e1      	ldr	r1, [r4, #28]
 800a61a:	47a8      	blx	r5
 800a61c:	1e05      	subs	r5, r0, #0
 800a61e:	dcb9      	bgt.n	800a594 <__sfvwrite_r+0x1bc>
 800a620:	e78c      	b.n	800a53c <__sfvwrite_r+0x164>
 800a622:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a626:	2000      	movs	r0, #0
 800a628:	3708      	adds	r7, #8
 800a62a:	e6f3      	b.n	800a414 <__sfvwrite_r+0x3c>
 800a62c:	f10b 0901 	add.w	r9, fp, #1
 800a630:	e700      	b.n	800a434 <__sfvwrite_r+0x5c>
 800a632:	4293      	cmp	r3, r2
 800a634:	dc08      	bgt.n	800a648 <__sfvwrite_r+0x270>
 800a636:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a638:	69e1      	ldr	r1, [r4, #28]
 800a63a:	4652      	mov	r2, sl
 800a63c:	4630      	mov	r0, r6
 800a63e:	47a8      	blx	r5
 800a640:	1e05      	subs	r5, r0, #0
 800a642:	f73f af13 	bgt.w	800a46c <__sfvwrite_r+0x94>
 800a646:	e779      	b.n	800a53c <__sfvwrite_r+0x164>
 800a648:	4651      	mov	r1, sl
 800a64a:	9201      	str	r2, [sp, #4]
 800a64c:	f7fe fe0e 	bl	800926c <memmove>
 800a650:	9a01      	ldr	r2, [sp, #4]
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	60a3      	str	r3, [r4, #8]
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	4413      	add	r3, r2
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	4615      	mov	r5, r2
 800a660:	e704      	b.n	800a46c <__sfvwrite_r+0x94>
 800a662:	2001      	movs	r0, #1
 800a664:	e70c      	b.n	800a480 <__sfvwrite_r+0xa8>
 800a666:	bf00      	nop
 800a668:	7ffffc00 	.word	0x7ffffc00

0800a66c <_fwalk_reent>:
 800a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a670:	4606      	mov	r6, r0
 800a672:	4688      	mov	r8, r1
 800a674:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a678:	2700      	movs	r7, #0
 800a67a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a67e:	f1b9 0901 	subs.w	r9, r9, #1
 800a682:	d505      	bpl.n	800a690 <_fwalk_reent+0x24>
 800a684:	6824      	ldr	r4, [r4, #0]
 800a686:	2c00      	cmp	r4, #0
 800a688:	d1f7      	bne.n	800a67a <_fwalk_reent+0xe>
 800a68a:	4638      	mov	r0, r7
 800a68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a690:	89ab      	ldrh	r3, [r5, #12]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d907      	bls.n	800a6a6 <_fwalk_reent+0x3a>
 800a696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a69a:	3301      	adds	r3, #1
 800a69c:	d003      	beq.n	800a6a6 <_fwalk_reent+0x3a>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	47c0      	blx	r8
 800a6a4:	4307      	orrs	r7, r0
 800a6a6:	3568      	adds	r5, #104	; 0x68
 800a6a8:	e7e9      	b.n	800a67e <_fwalk_reent+0x12>

0800a6aa <__swhatbuf_r>:
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	460e      	mov	r6, r1
 800a6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	b096      	sub	sp, #88	; 0x58
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	461d      	mov	r5, r3
 800a6ba:	da09      	bge.n	800a6d0 <__swhatbuf_r+0x26>
 800a6bc:	89b3      	ldrh	r3, [r6, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	d116      	bne.n	800a6f6 <__swhatbuf_r+0x4c>
 800a6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	e015      	b.n	800a6fc <__swhatbuf_r+0x52>
 800a6d0:	466a      	mov	r2, sp
 800a6d2:	f000 f9b7 	bl	800aa44 <_fstat_r>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	dbf0      	blt.n	800a6bc <__swhatbuf_r+0x12>
 800a6da:	9a01      	ldr	r2, [sp, #4]
 800a6dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6e4:	425a      	negs	r2, r3
 800a6e6:	415a      	adcs	r2, r3
 800a6e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ec:	602a      	str	r2, [r5, #0]
 800a6ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	e002      	b.n	800a6fc <__swhatbuf_r+0x52>
 800a6f6:	2340      	movs	r3, #64	; 0x40
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	b016      	add	sp, #88	; 0x58
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}

0800a700 <__smakebuf_r>:
 800a700:	898b      	ldrh	r3, [r1, #12]
 800a702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a704:	079d      	lsls	r5, r3, #30
 800a706:	4606      	mov	r6, r0
 800a708:	460c      	mov	r4, r1
 800a70a:	d507      	bpl.n	800a71c <__smakebuf_r+0x1c>
 800a70c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	2301      	movs	r3, #1
 800a716:	6163      	str	r3, [r4, #20]
 800a718:	b002      	add	sp, #8
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	ab01      	add	r3, sp, #4
 800a71e:	466a      	mov	r2, sp
 800a720:	f7ff ffc3 	bl	800a6aa <__swhatbuf_r>
 800a724:	9900      	ldr	r1, [sp, #0]
 800a726:	4605      	mov	r5, r0
 800a728:	4630      	mov	r0, r6
 800a72a:	f7fd fe79 	bl	8008420 <_malloc_r>
 800a72e:	b948      	cbnz	r0, 800a744 <__smakebuf_r+0x44>
 800a730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a734:	059a      	lsls	r2, r3, #22
 800a736:	d4ef      	bmi.n	800a718 <__smakebuf_r+0x18>
 800a738:	f023 0303 	bic.w	r3, r3, #3
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	e7e3      	b.n	800a70c <__smakebuf_r+0xc>
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <__smakebuf_r+0x7c>)
 800a746:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	9b00      	ldr	r3, [sp, #0]
 800a754:	6163      	str	r3, [r4, #20]
 800a756:	9b01      	ldr	r3, [sp, #4]
 800a758:	6120      	str	r0, [r4, #16]
 800a75a:	b15b      	cbz	r3, 800a774 <__smakebuf_r+0x74>
 800a75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a760:	4630      	mov	r0, r6
 800a762:	f000 f981 	bl	800aa68 <_isatty_r>
 800a766:	b128      	cbz	r0, 800a774 <__smakebuf_r+0x74>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	89a0      	ldrh	r0, [r4, #12]
 800a776:	4305      	orrs	r5, r0
 800a778:	81a5      	strh	r5, [r4, #12]
 800a77a:	e7cd      	b.n	800a718 <__smakebuf_r+0x18>
 800a77c:	0800a275 	.word	0x0800a275

0800a780 <_raise_r>:
 800a780:	291f      	cmp	r1, #31
 800a782:	b538      	push	{r3, r4, r5, lr}
 800a784:	4604      	mov	r4, r0
 800a786:	460d      	mov	r5, r1
 800a788:	d904      	bls.n	800a794 <_raise_r+0x14>
 800a78a:	2316      	movs	r3, #22
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	f04f 30ff 	mov.w	r0, #4294967295
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a798:	b112      	cbz	r2, 800a7a0 <_raise_r+0x20>
 800a79a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a79e:	b94b      	cbnz	r3, 800a7b4 <_raise_r+0x34>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 f831 	bl	800a808 <_getpid_r>
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4601      	mov	r1, r0
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7b0:	f000 b818 	b.w	800a7e4 <_kill_r>
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d00a      	beq.n	800a7ce <_raise_r+0x4e>
 800a7b8:	1c59      	adds	r1, r3, #1
 800a7ba:	d103      	bne.n	800a7c4 <_raise_r+0x44>
 800a7bc:	2316      	movs	r3, #22
 800a7be:	6003      	str	r3, [r0, #0]
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	e7e6      	b.n	800a792 <_raise_r+0x12>
 800a7c4:	2400      	movs	r4, #0
 800a7c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	4798      	blx	r3
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	e7df      	b.n	800a792 <_raise_r+0x12>
	...

0800a7d4 <raise>:
 800a7d4:	4b02      	ldr	r3, [pc, #8]	; (800a7e0 <raise+0xc>)
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	f7ff bfd1 	b.w	800a780 <_raise_r>
 800a7de:	bf00      	nop
 800a7e0:	20000014 	.word	0x20000014

0800a7e4 <_kill_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	; (800a804 <_kill_r+0x20>)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	f7f7 fe87 	bl	8002504 <_kill>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d102      	bne.n	800a800 <_kill_r+0x1c>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	b103      	cbz	r3, 800a800 <_kill_r+0x1c>
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	bf00      	nop
 800a804:	20000fb8 	.word	0x20000fb8

0800a808 <_getpid_r>:
 800a808:	f7f7 be74 	b.w	80024f4 <_getpid>

0800a80c <__sread>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	460c      	mov	r4, r1
 800a810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a814:	f000 f94a 	bl	800aaac <_read_r>
 800a818:	2800      	cmp	r0, #0
 800a81a:	bfab      	itete	ge
 800a81c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800a81e:	89a3      	ldrhlt	r3, [r4, #12]
 800a820:	181b      	addge	r3, r3, r0
 800a822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a826:	bfac      	ite	ge
 800a828:	6523      	strge	r3, [r4, #80]	; 0x50
 800a82a:	81a3      	strhlt	r3, [r4, #12]
 800a82c:	bd10      	pop	{r4, pc}

0800a82e <__swrite>:
 800a82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a832:	461f      	mov	r7, r3
 800a834:	898b      	ldrh	r3, [r1, #12]
 800a836:	05db      	lsls	r3, r3, #23
 800a838:	4605      	mov	r5, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	4616      	mov	r6, r2
 800a83e:	d505      	bpl.n	800a84c <__swrite+0x1e>
 800a840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a844:	2302      	movs	r3, #2
 800a846:	2200      	movs	r2, #0
 800a848:	f000 f91e 	bl	800aa88 <_lseek_r>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	4632      	mov	r2, r6
 800a85a:	463b      	mov	r3, r7
 800a85c:	4628      	mov	r0, r5
 800a85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a862:	f000 b875 	b.w	800a950 <_write_r>

0800a866 <__sseek>:
 800a866:	b510      	push	{r4, lr}
 800a868:	460c      	mov	r4, r1
 800a86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a86e:	f000 f90b 	bl	800aa88 <_lseek_r>
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	bf15      	itete	ne
 800a878:	6520      	strne	r0, [r4, #80]	; 0x50
 800a87a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a87e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a882:	81a3      	strheq	r3, [r4, #12]
 800a884:	bf18      	it	ne
 800a886:	81a3      	strhne	r3, [r4, #12]
 800a888:	bd10      	pop	{r4, pc}

0800a88a <__sclose>:
 800a88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88e:	f000 b871 	b.w	800a974 <_close_r>

0800a892 <__swbuf_r>:
 800a892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a894:	460e      	mov	r6, r1
 800a896:	4614      	mov	r4, r2
 800a898:	4605      	mov	r5, r0
 800a89a:	b118      	cbz	r0, 800a8a4 <__swbuf_r+0x12>
 800a89c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a89e:	b90b      	cbnz	r3, 800a8a4 <__swbuf_r+0x12>
 800a8a0:	f7ff fd06 	bl	800a2b0 <__sinit>
 800a8a4:	69a3      	ldr	r3, [r4, #24]
 800a8a6:	60a3      	str	r3, [r4, #8]
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	0719      	lsls	r1, r3, #28
 800a8ac:	d529      	bpl.n	800a902 <__swbuf_r+0x70>
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	b33b      	cbz	r3, 800a902 <__swbuf_r+0x70>
 800a8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b6:	b2f6      	uxtb	r6, r6
 800a8b8:	049a      	lsls	r2, r3, #18
 800a8ba:	4637      	mov	r7, r6
 800a8bc:	d52a      	bpl.n	800a914 <__swbuf_r+0x82>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	6920      	ldr	r0, [r4, #16]
 800a8c2:	1a18      	subs	r0, r3, r0
 800a8c4:	6963      	ldr	r3, [r4, #20]
 800a8c6:	4283      	cmp	r3, r0
 800a8c8:	dc04      	bgt.n	800a8d4 <__swbuf_r+0x42>
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f7ff fc83 	bl	800a1d8 <_fflush_r>
 800a8d2:	b9e0      	cbnz	r0, 800a90e <__swbuf_r+0x7c>
 800a8d4:	68a3      	ldr	r3, [r4, #8]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	60a3      	str	r3, [r4, #8]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	701e      	strb	r6, [r3, #0]
 800a8e2:	6962      	ldr	r2, [r4, #20]
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d004      	beq.n	800a8f4 <__swbuf_r+0x62>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	07db      	lsls	r3, r3, #31
 800a8ee:	d506      	bpl.n	800a8fe <__swbuf_r+0x6c>
 800a8f0:	2e0a      	cmp	r6, #10
 800a8f2:	d104      	bne.n	800a8fe <__swbuf_r+0x6c>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f7ff fc6e 	bl	800a1d8 <_fflush_r>
 800a8fc:	b938      	cbnz	r0, 800a90e <__swbuf_r+0x7c>
 800a8fe:	4638      	mov	r0, r7
 800a900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a902:	4621      	mov	r1, r4
 800a904:	4628      	mov	r0, r5
 800a906:	f7ff fb79 	bl	8009ffc <__swsetup_r>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d0d1      	beq.n	800a8b2 <__swbuf_r+0x20>
 800a90e:	f04f 37ff 	mov.w	r7, #4294967295
 800a912:	e7f4      	b.n	800a8fe <__swbuf_r+0x6c>
 800a914:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a91c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a920:	6663      	str	r3, [r4, #100]	; 0x64
 800a922:	e7cc      	b.n	800a8be <__swbuf_r+0x2c>

0800a924 <_wcrtomb_r>:
 800a924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a926:	4c09      	ldr	r4, [pc, #36]	; (800a94c <_wcrtomb_r+0x28>)
 800a928:	b085      	sub	sp, #20
 800a92a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800a92e:	4605      	mov	r5, r0
 800a930:	461e      	mov	r6, r3
 800a932:	b909      	cbnz	r1, 800a938 <_wcrtomb_r+0x14>
 800a934:	460a      	mov	r2, r1
 800a936:	a901      	add	r1, sp, #4
 800a938:	47b8      	blx	r7
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	bf01      	itttt	eq
 800a93e:	2300      	moveq	r3, #0
 800a940:	6033      	streq	r3, [r6, #0]
 800a942:	238a      	moveq	r3, #138	; 0x8a
 800a944:	602b      	streq	r3, [r5, #0]
 800a946:	b005      	add	sp, #20
 800a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000854 	.word	0x20000854

0800a950 <_write_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d07      	ldr	r5, [pc, #28]	; (800a970 <_write_r+0x20>)
 800a954:	4604      	mov	r4, r0
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	2200      	movs	r2, #0
 800a95c:	602a      	str	r2, [r5, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	f7f7 fe07 	bl	8002572 <_write>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_write_r+0x1e>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_write_r+0x1e>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	20000fb8 	.word	0x20000fb8

0800a974 <_close_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4d06      	ldr	r5, [pc, #24]	; (800a990 <_close_r+0x1c>)
 800a978:	2300      	movs	r3, #0
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	f7f7 fe13 	bl	80025aa <_close>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_close_r+0x1a>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_close_r+0x1a>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	20000fb8 	.word	0x20000fb8

0800a994 <_fclose_r>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	4606      	mov	r6, r0
 800a998:	460c      	mov	r4, r1
 800a99a:	b911      	cbnz	r1, 800a9a2 <_fclose_r+0xe>
 800a99c:	2500      	movs	r5, #0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
 800a9a2:	b118      	cbz	r0, 800a9ac <_fclose_r+0x18>
 800a9a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9a6:	b90b      	cbnz	r3, 800a9ac <_fclose_r+0x18>
 800a9a8:	f7ff fc82 	bl	800a2b0 <__sinit>
 800a9ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ae:	07d8      	lsls	r0, r3, #31
 800a9b0:	d405      	bmi.n	800a9be <_fclose_r+0x2a>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	0599      	lsls	r1, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_fclose_r+0x2a>
 800a9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ba:	f7fd fd2f 	bl	800841c <__retarget_lock_acquire_recursive>
 800a9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c2:	b93b      	cbnz	r3, 800a9d4 <_fclose_r+0x40>
 800a9c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a9c6:	f015 0501 	ands.w	r5, r5, #1
 800a9ca:	d1e7      	bne.n	800a99c <_fclose_r+0x8>
 800a9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ce:	f7fd fd26 	bl	800841e <__retarget_lock_release_recursive>
 800a9d2:	e7e4      	b.n	800a99e <_fclose_r+0xa>
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7ff fb70 	bl	800a0bc <__sflush_r>
 800a9dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9de:	4605      	mov	r5, r0
 800a9e0:	b133      	cbz	r3, 800a9f0 <_fclose_r+0x5c>
 800a9e2:	69e1      	ldr	r1, [r4, #28]
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4798      	blx	r3
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	bfb8      	it	lt
 800a9ec:	f04f 35ff 	movlt.w	r5, #4294967295
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	061a      	lsls	r2, r3, #24
 800a9f4:	d503      	bpl.n	800a9fe <_fclose_r+0x6a>
 800a9f6:	6921      	ldr	r1, [r4, #16]
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7fd fc49 	bl	8008290 <_free_r>
 800a9fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa00:	b141      	cbz	r1, 800aa14 <_fclose_r+0x80>
 800aa02:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800aa06:	4299      	cmp	r1, r3
 800aa08:	d002      	beq.n	800aa10 <_fclose_r+0x7c>
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7fd fc40 	bl	8008290 <_free_r>
 800aa10:	2300      	movs	r3, #0
 800aa12:	6323      	str	r3, [r4, #48]	; 0x30
 800aa14:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aa16:	b121      	cbz	r1, 800aa22 <_fclose_r+0x8e>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7fd fc39 	bl	8008290 <_free_r>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6463      	str	r3, [r4, #68]	; 0x44
 800aa22:	f7ff fc2d 	bl	800a280 <__sfp_lock_acquire>
 800aa26:	2300      	movs	r3, #0
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa2c:	07db      	lsls	r3, r3, #31
 800aa2e:	d402      	bmi.n	800aa36 <_fclose_r+0xa2>
 800aa30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa32:	f7fd fcf4 	bl	800841e <__retarget_lock_release_recursive>
 800aa36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa38:	f7fd fcef 	bl	800841a <__retarget_lock_close_recursive>
 800aa3c:	f7ff fc26 	bl	800a28c <__sfp_lock_release>
 800aa40:	e7ad      	b.n	800a99e <_fclose_r+0xa>
	...

0800aa44 <_fstat_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d07      	ldr	r5, [pc, #28]	; (800aa64 <_fstat_r+0x20>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	4611      	mov	r1, r2
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	f7f7 fdb6 	bl	80025c2 <_fstat>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	d102      	bne.n	800aa60 <_fstat_r+0x1c>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	b103      	cbz	r3, 800aa60 <_fstat_r+0x1c>
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	20000fb8 	.word	0x20000fb8

0800aa68 <_isatty_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d06      	ldr	r5, [pc, #24]	; (800aa84 <_isatty_r+0x1c>)
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4604      	mov	r4, r0
 800aa70:	4608      	mov	r0, r1
 800aa72:	602b      	str	r3, [r5, #0]
 800aa74:	f7f7 fdb5 	bl	80025e2 <_isatty>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d102      	bne.n	800aa82 <_isatty_r+0x1a>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	b103      	cbz	r3, 800aa82 <_isatty_r+0x1a>
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	20000fb8 	.word	0x20000fb8

0800aa88 <_lseek_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d07      	ldr	r5, [pc, #28]	; (800aaa8 <_lseek_r+0x20>)
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	4608      	mov	r0, r1
 800aa90:	4611      	mov	r1, r2
 800aa92:	2200      	movs	r2, #0
 800aa94:	602a      	str	r2, [r5, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	f7f7 fdae 	bl	80025f8 <_lseek>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_lseek_r+0x1e>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_lseek_r+0x1e>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	20000fb8 	.word	0x20000fb8

0800aaac <_read_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d07      	ldr	r5, [pc, #28]	; (800aacc <_read_r+0x20>)
 800aab0:	4604      	mov	r4, r0
 800aab2:	4608      	mov	r0, r1
 800aab4:	4611      	mov	r1, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	602a      	str	r2, [r5, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7f7 fd3c 	bl	8002538 <_read>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_read_r+0x1e>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_read_r+0x1e>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20000fb8 	.word	0x20000fb8

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
